/* macros to support lockless, single writer variables for multiple
threads.  The basic scheme is that each thread's "run" loop is isolated
in a separate file, and each thread's shared variables are carried in
an instance of a structure.  In this structure, the variables are named
after the intended writer.  Accidentally trying to write from the
wrong thread will fail because the name generated by the macros will
be undefined.

The other major criterion is that this expands in to natural C code
with no mysterious functions or side effects.  For example
THEAD_READ(G,xx) expands into something like G->xx
*/


// things that execute in the main thread need no special treatment
#ifndef CURRENT_THREAD 
#define CURRENT_THREAD MAIN
#endif

#define THREAD_CAT4(a,b,c,d) a ## b ## c ## d

//
// this gubbish with multiple macros calling each other is to get the
// definition of CURRENT_THREAD into the macro expansion, instead of
// the literal string CURRENT_THREAD
//
// single writer variables are defined with two names, the "read" name
// is available to all, the "write" name is defined only in the appropriate
// thread file.
//
// this convolution assures that the restriction that some variables
// have only one writer thread is maintained, by virtue of the write
// operation is only defined in that one thread's file.
//
#define SINGLE_WRITER(thread,type,name)	\
	union { type write_ ## thread ## _ ## name; type read_ ## name; }

#define STATIC_ARRAY(type,name,size)	\
	type read_ ## name[size]

#define THREAD_WRITE_CURRENT(current_thread,base,name,value)	\
  THREAD_CAT4(base->write_,current_thread,_,name)=value

#define THREAD_INCREMENT_CURRENT(current_thread,base,name)	\
  THREAD_CAT4(base->write_,current_thread,_,name)++

#define THREAD_DECREMENT_CURRENT(current_thread,base,name) \
  THREAD_CAT4(base->write_,current_thread,_,name)--

//
// to access thread variables, use THREAD_WRITE THREAD_READ THREAD_INCREMENT and THREAD_DECREMENT
//
#define THREAD_WRITE(base,name,value)	THREAD_WRITE_CURRENT(CURRENT_THREAD,base,name,value)

#define THREAD_READ(base,name)	(base->read_ ## name)


#define THREAD_INCREMENT(base,name)	THREAD_INCREMENT_CURRENT(CURRENT_THREAD,base,name)

#define THREAD_DECREMENT(base,name)	THREAD_DECREMENT_CURRENT(CURRENT_THREAD,base,name)


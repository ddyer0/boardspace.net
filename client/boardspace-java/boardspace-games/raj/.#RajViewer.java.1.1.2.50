package raj;
/**
 * The unusual feature of Raj is simultaneous play, and no "done" moves.
 */

import online.common.*;
import online.common.SimpleSprite.Movement;

import java.awt.*;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.*;

import lib.G;
import lib.Text;
import lib.TextChunk;
import online.game.*;
import online.game.sgf.sgf_names;
import online.game.sgf.sgf_node;
import online.game.sgf.sgf_property;

/**
 * Raj is the first Boardspace game which has truly simultaneous play.  A number of
 * adaptions to the overall kit were required, and the internal structure of the board
 * and communications is significantly different from standard.
 * 
 * In "SIMULTANEOUS_PLAY" mode, there are no "Done" buttons.  All the players are free to
 * play their card, and retract that play, until all player have played at the same time.
 * In this phase, the board state is either "play" or "wait"
 * When the nominal "current player" notices that all are ready, he enters "commit" phase
 * and commits his move, which bumps the current player to the next.  This guarantees that
 * he stays committed permanently.   The next player will usually see all players reads
 * and also commit, but if he or one of the remaining players has retracted a move he simply
 * waits for the "all ready".
 * 
 *  
*/

public class RajViewer extends commonCanvas 
	implements ViewerProtocol, RajConstants, sgf_names
{	static final long serialVersionUID = 1000;

	/**
	 * this is a filter used to eliminate ephemeral moves from the game record
	 * used to synchronize players.
	 * @author ddyer
	 *
	 */
	class FinalFilter implements online.game.commonMove.MoveFilter
	{ 
		public boolean reNumber() { return(true); }
		public boolean included(commonMove m) 
		{	return(!m.isEphemeral());
		}
	}

	/**
	 * this is a filter used to present only the ephemeral moves
	 * at the end of the history for use by the game filter.
	 * @author ddyer
	 *
	 */
	class EphemeralFilter implements online.game.commonMove.MoveFilter 
	{ 
		int seen = 0;		// a bitmask of the player indexes that have committed their ephemeral cards
		public EphemeralFilter(int see) { seen = see; } 
		public boolean reNumber() { return(true); }
		public boolean included(commonMove m) 
		{	return(m.isEphemeral() && ((seen & (1<<m.player))==0));
		}
	}

	//if true, run the UI with simultaneous plays. Otherwise, run the moves serially
	//like most of the other games.  Changing to false is intended for debugging only.
	static boolean SIMULTANEOUS_PLAY = true;

     // colors
    private Color reviewModeBackground = new Color(220,165,200);
    private Color HighlightColor = new Color(0.2f, 0.95f, 0.75f);
    private Color chatBackgroundColor = new Color(248,252,238);
    private Color rackBackGroundColor = new Color(178,212,168);
    private Color boardBackgroundColor = new Color(178,212,168);
    private Color vcrButtonColor = new Color(0.7f, 0.7f, 0.75f);
    Font cardDeckFont = G.getFont("Dialog", G.Style.Bold, 25);
    // images, shared among all instances of the class so loaded only once
    private static StockArt[] tileImages = null; // tile images
    private static Image[] textures = null;// background textures
    
    // private state
    private RajBoard bb = null; //the board from which we are displaying
    private int CELLSIZE; 	//size of the layout cell
 
    // addRect is a service provided by commonCanvas, which supports a mode
    // to visualize the layout during development.  Look for "show rectangles"
    // in the options menu.
    //
    private Rectangle logRect = addZoneRect("logRect"); //the game log, normally off the the right
    private Rectangle prizeRect = addZoneRect("prizeRect");
    private Rectangle stateRect = addRect("stateRect");
    private Rectangle doneRect = addZoneRect("doneRect");
    private Rectangle editRect = addRect("editRect");
    private Rectangle goalRect = addRect("goalRect");
    //private Rectangle repRect = addRect("repRect");	// not needed for raj
    private Rectangle progressRect = addRect("progressRect");

    private Rectangle playerRects[] = { addRect("P0"),addRect("P1"),addRect("P2"),addRect("P3"),addRect("P4")};
    
    public Color rajMouseColors[] = 
    {	RajColor.Red.color,
    	RajColor.Green.color,
    	RajColor.Blue.color,
    	RajColor.Brown.color,
    	RajColor.Purple.color
    };
    public Color rajDotColors[] = 
    {	Color.white,Color.white,Color.white,Color.white,Color.black
    };
/**
 * this is called during initialization to load all the images. Conventionally,
 * these are loading into a static variable so they can be shared by all.
 */
    public void preloadImages()
    {	RajChip.preloadImages(this,ImageDir);	// load the images used by stones
    	if (tileImages == null)
    	{ 	// note that for this to work correctly, the images and masks must be the same size.  
        	// Refer to http://www.andromeda.com/people/ddyer/java/imagedemo/transparent.html
    		
    		// images and textures are static variables, so they're shared by
    		// the entire class and only get loaded once.  Special synchronization
    		// tricks are used to make sure this is true.
    		
    	  // load the tiles used to construct the board as stock art

          textures = load_images(ImageDir,TextureNames);

    	}
    }

	/**
	 * 
	 * this is the real instance intialization, performed only once.
	 * info contains all the goodies from the environment.
	 * */
    public void init(exHashtable info)
    {	//
    	// for games that require some random initialization, the random key should be
    	// captured at this point and passed to the the board init too.
        // randomKey = info.getInt(exHashtable.RANDOMSEED,-1);
    	//
        super.init(info);
        // use_grid=reviewer;// use this to turn the grid letters off by default

        MouseColors = rajMouseColors;
        int randomKey = info.getInt(exHashtable.RANDOMSEED,-1);
        int np = Math.max(2,info.getInt(exHashtable.PLAYERS_IN_GAME));
         
        bb = new RajBoard(info.getString(exHashtable.GAMETYPE, Raj_INIT),randomKey,np);
        doInit(false);

    }

    /** 
     *  used when starting up or replaying and also when loading a new game 
     *  */
    public void doInit(boolean preserve_history)
    {
        //System.out.println(myplayer.trueName + " doinit");
        super.doInit(preserve_history);				// let commonViewer do it's things
        bb.doInit();						// initialize the board
        bb.setMyIndex(my.boardIndex,SIMULTANEOUS_PLAY);
        if(!preserve_history)
    		{ PerformAndTransmit(reviewOnly?"Edit":"Start P0", false,replayMode.Live);
    		}
    }

    
	/**
	 * 
	 * this is a debugging hack to give you an event based on clicking in the player name
	 * You can take whatever action you like, or no action.
	 */
    public boolean inPlayRect(int eventX, int eventY)
    {	return(super.inPlayRect(eventX,eventY));
    }

	/**
	 * 
	 * this is a debugging hack to give you an event based on clicking in the time
	 * clock.  You can take whatever action you like, or no action.
	 * */
    public boolean inTimeRect(int eventX, int eventY)
    {
        boolean val = super.inTimeRect(eventX, eventY);
        //if (val && extraactions)
        //{
        //    System.out.println(formHistoryString());
        //}
        return (val);
    }
    
    void createPlayerGroup(commonPlayer pl0,int x,int y,Rectangle pic,boolean left,boolean flat)
    {	Rectangle firstPlayerRect = pl0.nameRect;
    	Rectangle p0time = pl0.timeRect;
    	Rectangle p0anim = pl0.animRect;
    	Rectangle firstPlayerPicRect = pl0.picRect;
	    
	    //first player name
       	G.SetRect(firstPlayerRect, x, y, CELLSIZE*6, CELLSIZE);

    	// time dispay for first player
       	G.SetRect(p0time, G.Right(firstPlayerRect)+CELLSIZE/3,G.Top(firstPlayerRect),
       			2*CELLSIZE, CELLSIZE);
       	// first player "i'm alive" anumation ball
	    G.SetRect(p0anim, G.Right(p0time) ,G.Top( p0time), CELLSIZE,G.Height( p0time));
	    
	    int firstW = CELLSIZE*4;
	    int firstY = G.Bottom(firstPlayerRect);
	    int picW = CELLSIZE*6;
	    int firstX;
	    int picX;
	    
    	if(flat)
	    {	
	    	firstX= x;
	    	picX = G.Right(p0anim);
	    }
	    else if(left)
	    {	firstX = x;
	   		picX = firstX+firstW;
	    }
	    else 
	    {
	    	picX = x;
	    	firstX = picX+picW;
	    }
    	G.SetRect(firstPlayerPicRect,firstX,firstY,firstW,firstW);
    	G.SetRect(pic,picX,G.Top(firstPlayerPicRect),picW,picW);

    }

	/**
	 * this is the main method to do layout of the board and other widgets.  I don't
	 * use swing or any other standard widget kit, or any of the standard layout managers.
	 * they just don't have the flexibility to produce the results I want.  Your milage
	 * may vary, and of course you're free to use whatever layout and drawing methods you
	 * want to.  However, I do strongly encourage making a UI that is resizable within
	 * reasonable limits, and which has the main "board" object at the left.
	 * <p>
	 *  The basic layout technique used here is to start with a cell which is about the size
	 *  of a board square, and lay out all the other objects relative to the board or to one
	 *  another.  The rectangles don't all have to be on grid points, and don't have to
	 *  be nonoverlapping, just so long as the result generally looks good.
	 *  <p>
	 *  When "extraactions" is available, a menu opion "show rectangles" works
	 *  with the "addRect" mechanism to help visualize the layout.
	 */ 
    public void setLocalBounds(int x, int y, int width, int height)
    {	int nplayers = bb.nPlayers();
    	boolean wideFormat = false; //(height*1.6)<width;
        int ncols = 38; // more cells wide to allow for the aux displays
        int nrows = nplayers<3?12:18;  
        int cellw = width / ncols;
        int chatHeight = selectChatHeight(height);
        int cellh = (height-(wideFormat?0:chatHeight)) / nrows;
        CELLSIZE = Math.max(2,Math.min(cellw, cellh)); //cell size appropriate for the aspect ratio of the canvas
        int logHeight = wideFormat ? CELLSIZE*4 : chatHeight;

        G.SetRect(fullRect,x,y,width, height);
 
        int boardW = CELLSIZE * 15;
        int boardX = (width-boardW)/2;
        
        G.SetRect(stateRect, CELLSIZE/2,chatHeight,boardW-CELLSIZE,CELLSIZE);
        G.SetRect(boardRect,boardX ,G.Bottom(stateRect)+CELLSIZE, boardW, CELLSIZE * 10 );
              
        int logW = CELLSIZE * 4 * nplayers;
        G.SetRect(logRect, wideFormat ? G.Right(boardRect)-logW-CELLSIZE
        						:width-logW-CELLSIZE/2,
        				y +CELLSIZE/2,
        				logW,logHeight);


		// a pool of chips for the first player at the top
        G.SetRect(prizeRect, (G.Left(boardRect) + G.Width(boardRect)/2-5*CELLSIZE/2),
        		G.Top(boardRect)-CELLSIZE-CELLSIZE/2,
        		5*CELLSIZE,4*CELLSIZE);
        

		//this sets up the "vcr cluster" of forward and back controls.
        SetupVcrRects(CELLSIZE / 2,
        			height-CELLSIZE*3-CELLSIZE/2,
        			CELLSIZE * 6,
        			CELLSIZE*3);
        
        G.SetRect(goalRect,G.Left( boardRect)+CELLSIZE*3,		// really just a general message
        		G.Bottom(fullRect)-CELLSIZE,
        		G.Width(boardRect)-CELLSIZE*6,CELLSIZE);
        
        G.SetRect(progressRect, G.Left(goalRect)+G.Width(goalRect)/6,	// a simple progress bar when the robot is running.
        		G.Top(goalRect),
        		G.Width( goalRect)/2,
        		CELLSIZE/3);

  
        {
            commonPlayer pl0 =getPlayerOrTemp(0);
            commonPlayer pl1 = getPlayerOrTemp(1);
           {
            int playerTop = G.Bottom(stateRect)+CELLSIZE;
            int playerMid = playerTop + CELLSIZE*8;
            int playerBot = G.Bottom(boardRect)+CELLSIZE/2;
            int playerLeft = CELLSIZE/2;
            int playerRight = G.Right(boardRect)+CELLSIZE;
            createPlayerGroup(pl0,playerLeft,playerTop,playerRects[0],true,false);
            createPlayerGroup(pl1,playerRight,playerTop,playerRects[1],false,false);
            if(nplayers>2)
            {	createPlayerGroup(getPlayerOrTemp(2),playerRight,playerMid,playerRects[2],false,false);
               	if(nplayers>3)
            	{
            			{ if(nplayers>4)
            				{createPlayerGroup(getPlayerOrTemp(3),G.Left(boardRect),playerBot,playerRects[3],true,true);
            				}
            			else
            				{
            				createPlayerGroup(getPlayerOrTemp(3),playerLeft,playerMid,playerRects[3],true,false);  
            				}
             			}
            		if(nplayers>4)
            		{	createPlayerGroup(getPlayerOrTemp(4),playerLeft,playerMid,playerRects[4],true,false);  ;}
            			
            	}
            }

            // "edit" rectangle, available in reviewers to switch to puzzle mode
            G.SetRect(editRect, G.Right(boardRect)-3*CELLSIZE/2, G.Bottom(boardRect)+CELLSIZE, CELLSIZE*2, CELLSIZE);
            
            int chatX = wideFormat ? G.Right(boardRect):x;
            int chatY = wideFormat ? G.Top(prizeRect)+6*CELLSIZE : y;
            G.SetRect(chatRect, 
            		chatX,		// the chat area
            		chatY,
            		width-(wideFormat?chatX:logW)-CELLSIZE,
            		wideFormat?Math.min(height-chatY-CELLSIZE/2,chatHeight):chatHeight);

          
            // "done" rectangle, normally not used by can appear in testing.
            G.SetRect(doneRect,G.Left( editRect), G.Bottom(editRect)+CELLSIZE,
            		G.Width(editRect),G.Height(editRect));
           }}
 

        positionTheChat(chatRect,chatBackgroundColor,chatBackgroundColor);
     
        generalRefresh();
    }
    //
    // draw the numbered side of a card.
    //
    private void drawCardFace(Graphics gc,Rectangle r,RajChip ch)
    {	int xp = G.Left(r)+G.Width(r)/2;
		int yp = G.Top(r)+G.Height(r)/2;
		int hscale = G.Width(r);
		ch.drawChipFront(gc,this,hscale,xp,yp);
    }

    public Text censoredMoveText(commonMove sp,int index)
     {
    	commonMove last = History.top();
    	String mv = last.getSliderNumString();
    	String spnum = sp.getSliderNumString();
    	boolean censor = mv.equals(spnum) && (sp.op!=MOVE_AWARD);
    	Rajmovespec spc = (Rajmovespec)sp;
    	return(TextChunk.create(spc.shortMoveString(censor)));
     }

    private int movingObjectIndex()
    { 	return(bb.movingObjectIndex()); 
    }
    private void drawPlayerBoard(Graphics gc,int pl,HitPoint highlight,RajBoard gb,HitPoint anyHit)
    {	RajBoard.PlayerBoard pb = gb.playerBoards[pl];
    	Rectangle r = playerRects[pl];
    	boolean left = G.Left(r) < 2*G.Width(fullRect)/3;
    	int h = G.Height(r);
    	int w = G.Width(r);
    	Rectangle playerPrizeRect = new Rectangle(left?G.Left(r)+CELLSIZE:G.Right(r)-w/2,G.Top(r)+CELLSIZE/3,w/2,h/3);
    	int mid = G.Top(r)+G.Height(r)/2;
    	int step = (-G.Width(r)/5);
    	int cx = (left ? G.Right(r)+step: G.Left(r)-step);
    	RajCell played = pb.playedCards;
    	RajCell unplayed = pb.cards;
        drawPrizePool(gc, playerPrizeRect, anyHit,gb,pb.wonPrizes,true);
        boolean canHitPlayedCards = gb.LegalToHitCards(played);    
        //StockArt.SmallO.drawChip(gc,this,CELLSIZE*2,r.x,mid-step,null);
    	if(played.drawHStack(gc,this,
    				canHitPlayedCards?highlight:null,CELLSIZE*2,
    				G.Left(r)+(left?CELLSIZE:CELLSIZE*3),mid-step,0,0.07,null))
    	{	highlight.setHelpText(s.get("Used Cards"));
    		highlight.hit_y = -1;
    		highlight.arrow = (movingObjectIndex()<0)?StockArt.UpArrow:StockArt.DownArrow;
    		highlight.awidth = CELLSIZE;
   		
    	}

     	{	
     		int cy = mid+CELLSIZE+CELLSIZE/3;
     		int hscale = CELLSIZE*2;
     		int stackHeight = unplayed.height();
     		double vscale = 1.0/15+0.5/Math.max(8,stackHeight);
     		double vsize = hscale+(stackHeight*vscale)*CELLSIZE+CELLSIZE*2;
     		double vstep = vsize/(stackHeight+1);
     		int boxtop = cy - (int)(vsize)+CELLSIZE*2;
            boolean canHitCards = (allowed_to_edit||(!my.spectator && (my.boardIndex==pl))) ? gb.LegalToHitCards(unplayed):false;    
            // a little assist for the robot
            Rectangle boxRect = new Rectangle(cx-CELLSIZE,boxtop,CELLSIZE*2,(int)(vstep*stackHeight));

            unplayed.drawStack(gc,this,null,CELLSIZE*2,cx,cy,0,vscale,null);
            // note we use anyHit because we can pick up cards out of turn sequence.
            // we're doing our own mouse sensitivity because the 2:1 aspect ratio is unexpected,
            // and we need to point to a particular card.
            //G.frameRect(gc,Color.red,boxRect);
        	if(G.pointInRect(canHitCards?anyHit:null,boxRect))
        	{	//showingLid = pl;
         		int ind = Math.max(0,Math.min(stackHeight-1,(int)((G.Top(anyHit)-boxtop)/vstep)));
         		anyHit.hitCode = unplayed.rackLocation;
         		anyHit.hitObject = unplayed;
        		RajChip ch = unplayed.chipAtIndex(ind);
        		if(ch!=null)
        		{
        			anyHit.hit_y = ind;
        			anyHit.setHelpText(s.get(ClickToSelect));
        			anyHit.arrow = (movingObjectIndex()<0)?StockArt.UpArrow:StockArt.DownArrow;
        			anyHit.awidth = CELLSIZE;
        			drawCardFace(gc,new Rectangle(G.Left(anyHit)-CELLSIZE,G.Top(anyHit)-5*CELLSIZE/3,CELLSIZE*2,CELLSIZE*3),ch);
        		}
         	}
            //G.frameRect(gc,Color.yellow,boxRect);

     	}
    }
	// draw a box of spare chips. For raj it's purely for effect, but if you
    // wish you can pick up and drop chips.
    private void drawPrizePool(Graphics gc, Rectangle r, HitPoint highlight,RajBoard gb,RajCell pool,boolean up)
    {
        boolean canhit = gb.LegalToHitPrizes(pool) && G.pointInRect(highlight, r);
        int nPrizes = pool.height();
        int tvalue = 0;
        //RajChip.getTray().drawChip(gc,this,r,null);
        for(int lim=nPrizes-1; lim>=0; lim--) { tvalue += pool.chipAtIndex(lim).prizeValue(); }
        
        HitPoint.setHelpText(highlight,r,s.get(PrizeCountString,nPrizes,tvalue));
        if (canhit)
        {   highlight.hitCode = pool.rackLocation;
            highlight.hitObject = pool;
            highlight.arrow = (movingObjectIndex()>=0)?StockArt.DownArrow:StockArt.UpArrow;
            highlight.awidth = CELLSIZE;
         }

        if (gc != null)
        { int yloc = G.Top(r)+G.Height(r)/2;
          int xloc = G.Left(r);
          double space = 0.08;
          int total = pool.totalPrizeValue();
          pool.drawHStack(gc,this,highlight,CELLSIZE*2,xloc,yloc,0,space,null);
          if(pool.height()>0)
          {
          G.setFont(gc,largeBoldFont);
          G.Text(gc,true,xloc+CELLSIZE+(int)(nPrizes*space*CELLSIZE*2),
        		  yloc-CELLSIZE/2,CELLSIZE,CELLSIZE,
        		  Color.black,null,s.get(TotalString)+"\n"+total);
          }
        }
     }
    /**
    * sprites are normally a game piece that is "in the air" being moved
    * around.  This is called when dragging your own pieces, and also when
    * presenting the motion of your opponent's pieces, and also during replay
    * when a piece is picked up and not yet placed.  While "obj" is nominally
    * a game piece, it is really whatever is associated with b.movingObject()
    
      */
    public void drawSprite(Graphics g,int obj,int xp,int yp)
    {
    	// draw an object being dragged
    	// use the board cell size rather than the window cell size
    	RajChip ch = RajChip.getChip(obj);
    	if(ch.isCard() && (reviewOnly || (!my.spectator && (ch.cardColor().ordinal()==my.boardIndex))))
    		{ drawCardFace(g,new Rectangle(xp-CELLSIZE,yp-5*CELLSIZE/3,CELLSIZE*2,CELLSIZE*3),ch);
    		}
    	else { ch.drawChip(g,this,CELLSIZE*2, xp, yp, null); }
    }
    // also related to sprites,
    // default position to display static sprites, typically the "moving object" in replay mode
    //public Point spriteDisplayPoint()
    //{	BoardProtocol b = getBoard();
    //	int celloff = b.cellSize();
    //	return(new Point(G.Right(boardRect)-celloff,G.Bottom(boardRect)-celloff));
    //}  


    /** draw the deep unchangable objects, including those that might be rather expensive
     * to draw.  This background layer is used as a backdrop to the rest of the activity.
     * in our cease, we draw the board and the chips on it. 
     * */
    public void drawFixedElements(Graphics gc)
    { boolean review = reviewMode() && !mutable_game_record;
      // erase
      G.setColor(gc,review ? reviewModeBackground : boardBackgroundColor);
      //G.fillRect(gc, fullRect);
      G.tileImage(gc,textures[review?BACKGROUND_REVIEW_INDEX:BACKGROUND_INDEX], fullRect, this);  
      G.tileImage(gc,textures[BACKGROUND_TILE_INDEX],boardRect, this);   
      G.frameRect(gc,Color.black,boardRect);
      bb.SetDisplayParameters( 1.0, 1.0, 0, 0, 0); // shrink a little and rotate 30 degrees
      bb.SetDisplayRectangle(boardRect);
      
      // if the board is one large graphic, for which the visual target points
      // are carefully matched with the abstract grid
      //G.centerImage(gc,images[BOARD_INDEX], brect,this);

      // draw a picture of the board. In this version we actually draw just the grid
      // to draw the cells, set gb.Drawing_Style in the board init method.  Create a
      // DrawGridCoord(Graphics gc, Color clt,int xpos, int ypos, int cellsize,String txt)
      // on the board to fine tune the exact positions of the text
      //gb.DrawGrid(gc, brect, use_grid, boardBackgroundColor, RingFillColor, RingTextColor,GridColor);

 
    }
    
    /**
     * translate the mouse coordinate x,y into a size-independent representation
     * presumably based on the cell grid.  This is used to transmit our mouse
     * position to the other players and spectators, so it will be displayed
     * at approximately the same visual spot on their screen.  
     * 
     * Some trickier logic may be needed if the board has several orientations,
     * or if some mouse activity should be censored.
     */
    static final String HIDDEN = "H";
    public String encodeScreenZone(int x, int y,Point p)
    {	// censor the player card rectangles
    	for(commonPlayer pl : players)
    	{	if(pl!=null)
    		{	Rectangle pr = playerRects[pl.boardIndex];
    			if(G.pointInRect(x,y,pr)) 
    			{
    				return(HIDDEN);
    			}
    		}
    	}
    	return(super.encodeScreenZone(x,y,p));
    }
    
	/**
	 * Overriding this method so that we can "animate" a wolf while the
	 * wolf player is hiding & choosing a meal.
	 */
	public Point decodeScreenZone(String z,int x, int y) {
		if (HIDDEN.equals(z)) {
			// This is indication that the wolf player is moving within
			// the area with a hidden wolf, so use the Y coordinate as
			// the animation updated value.
			return new Point (0, 0);
		}

		return super.decodeScreenZone(z,x, y);
	}

   /** draw the board and the chips on it. the gc will normally draw on a background
    * array which contains the slowly changing part of the board. 
    * */
    private void drawBoardElements(Graphics gc, RajBoard gb, Rectangle brect, HitPoint highlight)
    {
        //
        // now draw the contents of the board and highlights or ornaments.  We're also
    	// called when not actually drawing, to determine if the mouse is pointing at
    	// something which might allow an action.  Either gc or highlight might be
    	// null, but not both.
        //
        // using closestCell is preferable to G.PointInside(highlight, xpos, ypos, CELLRADIUS)
        // because there will be no gaps or overlaps between cells.
        RajCell closestCell = gb.closestCell(highlight,brect);
        boolean hitCell = !my.spectator && gb.LegalToHitBoard(closestCell,(reviewOnly && (gb.getState()==RajState.PLAY_STATE)));
        boolean moving = (movingObjectIndex()>=0);
        RajState state = bb.getState();
        if(hitCell)
        { // note what we hit, row, col, and cell
          highlight.hitObject = closestCell;
          highlight.awidth = CELLSIZE;
          highlight.hitCode = moving ? RajId.EmptyBoard : RajId.BoardLocation;
          highlight.arrow = moving ? StockArt.DownArrow:StockArt.UpArrow;
          highlight.col = closestCell.col;
          highlight.row = closestCell.row;
        }
        // this enumerates the cells in the board in an arbitrary order.  A more
        // conventional double xy loop might be needed if the graphics overlap and
        // depend on the shadows being cast correctly.
        if (gc != null)
        {
        for(RajCell cell = gb.allCells; cell!=null; cell=cell.next)
          {
            boolean drawhighlight = (hitCell && (cell==closestCell)) 
   				|| gb.isDestCell(cell) 		// is legal for a "drop" operation
   				|| gb.isSource(cell);	// is legal for a "pick" operation+
         	int ypos = G.Bottom(brect) - gb.cellToY(cell);
            int xpos = G.Left(brect) + gb.cellToX(cell);
            RajChip top = cell.topChip();
            if (drawhighlight)
             { // checking for pointable position
            	 StockArt.SmallO.drawChip(gc,this,(int)(gb.CELLSIZE*5),xpos,ypos,null);                
             }
            boolean show = (state==RajState.AWARD_PRIZE_STATE) && (top!=null) && (top.isCard());
            double skip = Math.min(0.7,(5*0.7)/cell.height());
            cell.drawHStack(gc,this,null,CELLSIZE*2,xpos,ypos,0,skip,show?"#":null);
            }
        }
    }
    
    // this is non-standard, but for Raj the moving obects are per-player
    // this allows simultaneous card moves to display properly
    public int getMovingObject()
    {	return(my.spectator?NothingMoving:movingObjectIndex()); 
    }

    /**
     * draw the main window and things on it.  
     * If gc!=null then actually draw, 
     * If selectPos is not null, then as you draw (or pretend to draw) notice if
     * you are drawing under the current position of the mouse, and if so if you could
     * click there to do something.  Care must be taken to consider if a click really
     * ought to be allowed, considering spectator status, use of the scroll controls,
     * if some board token is already actively moving, and if the game is active or over.
     * <p>
     * This dual purpose (draw, and notice mouse sensitive areas) tends to make the
     * code a little complicated, but it is the most reliable way to make sure the
     * mouse logic is in sync with the drawing logic.
     * <p>
    General GUI checklist
<p>
<li>vcr scroll section always tracks, scroll bar drags
<li>lift rect always works
<li>zoom rect always works
<li>drag board always works
<li>pieces can be picked or dragged
<li>moving pieces always track
<li>stray buttons are insensitive when dragging a piece
<li>stray buttons and pick/drop are inactive when not on turn
*/
    public void redrawBoard(Graphics gc, HitPoint selectPos)
    {  RajBoard gb = (RajBoard)disB(gc);
       RajState state = gb.getState();
       if((state==RajState.PLAY_STATE) && gb.hasDroppedCard(my.boardIndex)) { state = RajState.WAIT_STATE; }
       boolean moving = (getMovingObject()>=0);
       // 
       // if it is not our move, we can't click on the board or related supplies.
       // we accomplish this by supressing the highlight pointer.
       //
       HitPoint ourTurnSelect = OurMove() ? selectPos : null;
       //
       // even if we can normally select things, if we have already got a piece
       // moving, we don't want to hit some things, such as the vcr group
       //
       HitPoint buttonSelect = moving ? null : ourTurnSelect;
       // hit anytime nothing is being moved, even if not our turn or we are a spectator
       HitPoint nonDragSelect = (moving && !reviewMode()) ? null : selectPos;
       
       redrawGameLog(gc, nonDragSelect, logRect, boardBackgroundColor);
       drawBoardElements(gc, gb, boardRect, (gb.getState()==RajState.PLAY_STATE)?selectPos:ourTurnSelect);
       drawPrizePool(gc, prizeRect, selectPos,gb,gb.prizes,false);
       int nPlayers = gb.nPlayers();
       for(int i=0;i<nPlayers;i++)
    	   { drawPlayerBoard(gc,i,(i==gb.whoseTurn)?ourTurnSelect:null,gb,selectPos);
    	   }
       G.setFont(gc,standardBoldFont);
       // draw the board control buttons 

		if (state != RajState.PUZZLE_STATE)
        {	// if in any normal "playing" state, there should be a done button
			// we let the board be the ultimate arbiter of if the "done" button
			// is currently active.
            if ((!SIMULTANEOUS_PLAY || (state==RajState.RESIGN_STATE)) && G.handleRoundButton(gc, doneRect, 
            		(gb.DoneState() ? buttonSelect : null), s.get(DoneAction),
                    HighlightColor, rackBackGroundColor))
            {	// always display the done button, but only make it active in
            	// the appropriate states
                buttonSelect.hitCode = DefaultId.HitDoneButton;
            }
            if (allowed_to_edit)
            {	// reviewer is active if there was a game here, and we were a player, 
            	// or all the time in review rooms.
            	// we're allowed to edit the board, so we need an edit button
                    if (G.handleRoundButton(gc, editRect, buttonSelect, s.get(EditAction),
                                HighlightColor, rackBackGroundColor))
                    {
                        buttonSelect.hitCode = DefaultId.HitEditButton;
                    }
            }
        }

 
        drawPlayerStuff(gc,(state==RajState.PUZZLE_STATE),moving?null:selectPos,
        			HighlightColor,
        			rackBackGroundColor);
  
 
        // draw the avatars
    	int activePl = (simultaneous_turns_allowed(null))
    								? my.boardIndex
    								: gb.whoseTurn;
        standardGameMessage(gc,
        		state==RajState.GAMEOVER_STATE?gameOverMessage():s.get(state.getDescription()),
        				state!=RajState.PUZZLE_STATE,
        				activePl,
        				stateRect);
        goalAndProgressMessage(gc,selectPos,s.get(GoalString),progressRect, goalRect);
        //DrawRepRect(gc,gb.Digest(),repRect);	// Not needed for raj
    
        // draw the vcr controls
        drawVcrGroup(nonDragSelect, gc, HighlightColor, vcrButtonColor);

    }
    
    //
    // in simultaneous mode, all players clocks advance
    public void updatePlayerTime(long inc,commonPlayer p)
    {	if(SIMULTANEOUS_PLAY)
    	{
    	switch(reviewMode()?pre_review_state:bb.getState())
    	{
    	case PLAY_STATE:
    		for(commonPlayer pl : players)
    		{
    			if(pl!=null)
    			{
    				if(!bb.hasDroppedCard(pl.boardIndex))
    				{
    					super.updatePlayerTime(inc,pl);
    				}
    			}
    		}
    		return;
    	default: break;
    	}}
    	// default is to do the usual
   		super.updatePlayerTime(inc,p);
    }
    /**
     * Execute a move by the other player, or as a result of local mouse activity,
     * or retrieved from the move history, or replayed form a stored game. 
     * @param mm the parameter is a commonMove so the superclass commonCanvas can
     * request execution of moves in a generic way.
     * @return true if all went well.  Normally G.Error would be called if anything went
     * seriously wrong.
     */
     public boolean Execute(commonMove mm,replayMode replay)
    {	
    	 // record some state so the game log will look pretty
        if(bb.getState()==RajState.PUZZLE_STATE)
    	{   mm.setSliderNumString("--");
    		switch(mm.op)
        	{
        	case MOVE_PICK: 
        	case MOVE_PICKB: 
        		break;
    		default:
    			mm.setLineBreak(true);
        	}
    	}
        if(mm.op==MOVE_SELECT) { mm.setLineBreak(true);mm.setSliderNumString("--"); }
        handleExecute(bb,mm,replay);
        
        startBoardAnimations(replay);
        
		lastDropped = bb.lastDroppedObject;	// this is for the image adjustment logic
		if(replay!=replayMode.Replay) { playSounds((Rajmovespec)mm); }
       return (true);
    }
     void startBoardAnimations(replayMode replay)
     {
        if(replay!=replayMode.Replay)
     	{	while(bb.animationStack.size()>1)
     		{
     		RajCell dest = bb.animationStack.pop();
     		RajCell src = bb.animationStack.pop();
     		startAnimation(src,dest,dest.topChip());
     		}
     	}
        	bb.animationStack.clear();
     } 
     void startAnimation(RajCell from,RajCell to,RajChip top)
     {	if((from!=null) && (to!=null) && (top!=null))
     	{	double speed = masterAnimationSpeed*0.5;
      		if(debug)
     		{
     			G.Assert(!((from.current_center_x==0) && (from.current_center_y==0)),"From Cell %s center is not set",from);
        			G.Assert(!((to.current_center_x==0) && (to.current_center_y==0)),"To %s center is not set",to);
     		}
     		
     		// make time vary as a function of distance to partially equalize the runtim of
     		// animations for long verses short moves.
     		double dist = G.distance(from.current_center_x, from.current_center_y, to.current_center_x,  to.current_center_y);
     		double full = G.distance(0,0,G.Width(boardRect),G.Height(boardRect));
     		double endtime = speed*Math.sqrt(dist/full);
     		
     		SimpleSprite newSprite = new SimpleSprite(true,top,
     				CELLSIZE*2,	// use the same cell size as drawSprite would
     				endtime,
             		from.current_center_x,from.current_center_y,
             		to.current_center_x,to.current_center_y);
     		newSprite.movement = Movement.SlowIn;
             to.addActiveAnimation(newSprite);
   			addSprite(newSprite);
   			}
     }
 void playSounds(Rajmovespec mm)
 {
	 switch(mm.op)
	 {
	 case MOVE_DROPB:
	 case MOVE_PICKB:
	 case MOVE_PICK:
	 case MOVE_DROP:
		 playASoundClip(light_drop,100);
		 break;
	 default: break;
	 }
 }
/**
 * parse a move specifier on behalf of the current player.  This is called by the 
 * "game" object when it receives a move from the other player.  Note that it may
 * be called while we are in review mode, so the current state of the board should
 * not be considered.
 */
    public commonMove ParseNewMove(String st)
    {
        return (new Rajmovespec(st, -1));
    }
/**
 * prepare to add nmove to the history list, but also edit the history
 * to remove redundant elements, so that indecisiveness by the user doesn't
 * result in a messy game log.  
 * 
 * For all ordinary cases, this is now handled by the standard implementation
 * in commonCanvas, which uses the board's Digest() method to distinguish new
 * states and reversions to past states.
 * 
 * For reference, the commented out method below does the same thing for "Hex". 
 * You could resort to similar techniques to replace or augment what super.EditHistory
 * does, but your efforts would probably be better spent improving your Digest() method
 * so the commonCanvas method gives the desired result.
 * 
 * Note that it should always be correct to simply return nmove and accept the messy
 * game record.
 * 
 * This may require that move be merged with an existing history move
 * and discarded.  Return null if nothing should be added to the history
 * One should be very cautious about this, only to remove real pairs that
 * result in a null move.  It is vital that the operations performed on
 * the history are identical in effect to the manipulations of the board
 * state performed by "nmove".  This is checked by verifyGameRecord().
 * 
 * in commonEditHistory()
 * 
 */
      public commonMove EditHistory(commonMove nmove)
      {	  commonMove rval = super.EditHistory(nmove);
    	  return(rval);
      }

    
    /** 
     * this method is called from deep inside PerformAndTransmit, at the point
     * where the move has been executed and the history has been edited.  It's
     * purpose is to veryfy that the history accurately represents the current
     * state of the game, and that the fundamental game machinery is in a consistent
     * and reproducable state.  Basically, it works by creating a duplicate board
     * resetting it and feeding the duplicate the entire history, and then verifying 
     * that the duplcate is the same as the original board.  It's perfectly ok, during
     * debugging and development, to temporarily change this method into a no-op, but
     * be warned if you do this because it is throwing an error, there are other problems
     * that need to be fixed eventually.
     */
    public void verifyGameRecord()
    {	super.verifyGameRecord();
    }
 // for reference, here's the standard definition
 //   public void verifyGameRecord()
 //   {	BoardProtocol ourB =  getBoard();
 //   	int ourDig = ourB.Digest();
 //   	BoardProtocol dup = dupBoard = ourB.cloneBoard();
 //   	int dupDig = dup.Digest();
 //   	G.Assert(dupDig==ourDig,"Duplicate Digest Matches");
 //   	dup.doInit();
 //   	int step = History.size();
 //   	int limit = viewStep>=0 ? viewStep : step;
 //   	for(int i=0;i<limit;i++) 
 //   		{ commonMove mv = History.elementAt(i);
 //   		  //G.print(".. "+mv);
 //   		  dup.Execute(mv); 
 //   		}
 //   	int dupRedig = dup.Digest();
 //   	G.Assert(dup.whoseTurn()==ourB.whoseTurn(),"Replay whose turn matches");
 //   	G.Assert(dup.moveNumber()==ourB.moveNumber(),"Replay move number matches");
 //   	if(dupRedig!=ourDig)
 //   	{
 //   	//int d0 = ourB.Digest();
 //   	//int d1 = dup.Digest();
 //   	G.Assert(false,"Replay digest matches");
 //   	}
 //   	// note: can't quite do this because the timing of "SetDrawState" is wrong.  ourB
 //   	// may be a draw where dup is not if ourB is pending a draw.
 //   	//G.Assert(dup.getState()==ourB.getState(),"Replay state matches");
 //   	dupBoard = null;
 //   }
    
/**
 * the preferred mouse gesture style is to let the user "pick up" objects
 * by simply clicking on them, but we also allow him to click and drag. 
 * StartDragging is called when he has done this.
 * <p>
 * None on debugging: If you get here mysteriously with hitOjbect and hitCode
 * set to default values, instead of the values you expect, you're probably
 * not setting the values when the gc is null.
 */
    public void StartDragging(HitPoint hp)
    {	RajCell hitCell = (RajCell)hp.hitObject;
        int mo = movingObjectIndex();
        if ((mo<0) && (hp.hitCode instanceof RajId)) // not dragging anything yet, so maybe start
        {
        RajId hitObject =  (RajId)hp.hitCode;
 	    switch(hitObject)
	    {
	    default: break;
	    
	    case PlayerPrizes:
       case PlayerCards:
       case PlayerDiscards:
    	{
	    	int cx = hp.hit_y;
	    	boolean simultaneous = simultaneous_turns_allowed(null);
	    	if(simultaneous)
	    	{	int ord = hitCell.col-'A';
	    		bb.setMyIndex(ord,true);
	    		PerformAndTransmit("epick "+ord+" "+hitObject.shortName+" "+hitCell.col+" "+cx);
	    	}
	    	else
	    	{	PerformAndTransmit("pick "+hitObject.shortName+" "+hitCell.col+" "+cx);	
	    	}
    		}
    		break;
	    case PrizePool:
	    	PerformAndTransmit("Pick P @ -1");
	    	break;
	    case BoardLocation:
	    	{	RajChip obj = hitCell.topChip();
	    	if(obj.isCard() && (simultaneous_turns_allowed(null)))
	    	{	int ord = obj.cardColor().ordinal();
	    		bb.setMyIndex(ord,true);  
	    		PerformAndTransmit("Epickb "+ord+" "+hitCell.col+" "+hitCell.row);
	    		
	    	}
	    	else {
	    		PerformAndTransmit("Pickb "+hitCell.col+" "+hitCell.row);
	    	}}
	    	break;
        }

        if (bb.movingObjectIndex() >= 0)
	        {	// if we got something started, inform the mouse handler
	            hp.dragging = true;
	        } 
        }
    }

	/** 
	 * this is called on "mouse up".  We may have been just clicking
	 * on something, or we may have just finished a click-drag-release.
	 * We're guaranteed just one mouse up, no bounces.
 * <p>
 * None on debugging: If you get here mysteriously with hitOjbect and hitCode
 * set to default values, instead of the values you expect, you're probably
 * not setting the values when the gc is null.
	 */
    public void StopDragging(HitPoint hp)
    {
    CellId id = hp.hitCode;
    if(!(id instanceof RajId))
    	{	if((id==DefaultId.HitNoWhere) && !my.spectator && simultaneous_turns_allowed(null))
    		{
    			String dn = bb.unDropMove();
    			if(dn!=null) { PerformAndTransmit(dn); }
    			String up = bb.unPickMove();
    			if(up!=null) { PerformAndTransmit(up); }
    			missedOneClick = false;
    		}
    		else { missedOneClick = performStandardActions(hp,missedOneClick); }
    		}
	else {
		RajId hitCode = (RajId)hp.hitCode;
		int mo = movingObjectIndex();
    	if(mo>=0)
    	{
		RajCell hitObject = (RajCell)hp.hitObject;
		RajState state = bb.getState();
		RajChip movingObject = RajChip.getChip(mo);
        switch (hitCode)
        {
        default:
        	throw G.Error("Hit Unknown object " + hitObject);
        case BoardLocation:	// we hit an occupied part of the board 
        case EmptyBoard:
			switch(state)
			{	case CONFIRM_CARD_STATE:
				default:
					throw G.Error("Not expecting hit in state "+state);
				case CONFIRM_STATE:
				case PLAY_STATE:
				case PUZZLE_STATE:
					if(movingObject.isCard() && simultaneous_turns_allowed(null) )
					{
						PerformAndTransmit("edropb "+ movingObject.cardColor().ordinal()+" "+hitObject.col+" "+hitObject.row);
					}
					else
					{
						PerformAndTransmit("dropb "+hitObject.col+" "+hitObject.row);
					}
					break;
			}
			break;
        case PlayerPrizes:
        case PlayerDiscards:
        case PlayerCards:
        	{
        	int cx = hp.hit_y;
        	String op = (simultaneous_turns_allowed(null)) ? ("edrop "+(hitObject.col-'A')+" ") : "Drop "; 
        	PerformAndTransmit(op+ hitCode.shortName+" "+hitObject.col+" "+cx);
        	}
        	break;
        	
        case PrizePool:
           if(movingObjectIndex()>=0) 
			{//if we're dragging a black chip around, drop it.
            	PerformAndTransmit("Drop P @ -1");
			}
           break;
 
         }
    	}}
         repaint(20);
    }

  
    /** this is the place where the canvas is actually repainted.  We get here
     * from the event loop, not from the normal canvas repaint request.
     * <p>
     * if complete is true, we definitely want to start from scratch, otherwise
     * only the known changed elements need to be painted.  Exactly what this means
     * is game specific, but for raj the underlying empty board is cached as a deep
     * background, but the chips are painted fresh every time.
     * <p>
     * this used to be very important to optimize, but with faster machines it's
     * less important now.  The main strategy we employ is to paint EVERYTHING
     * into a background bitmap, then display that bitmap to the real screen
     * in one swell foop at the end.
     * 
     * @param g the graphics object.  If gc is null, don't actually draw but do check for mouse location anyay
     * @param complete if true, always redraw everything
     * @param hp the mouse location.  This should be annotated to indicate what the mouse points to.
     */
    public void drawCanvas(Graphics offGC, boolean complete,HitPoint hp)
    {	
          // the numbers for the square-on display are slightly ad-hoc, but they look right
      	drawFixedElements(offGC,complete);	// draw the board into the deep background
   	
    	// draw the board contents and changing elements.
        redrawBoard(offGC,hp);
        //      draw clocks, sprites, and other ephemera
        drawClocksAndMice(offGC, null);
        DrawTileSprite(offGC,hp); //draw the floating tile we are dragging, if present
        DrawArrow(offGC,hp);

        drawSprites(offGC);

    }
    
    /**
     * this is a token or tokens that initialize the variation and
     * set immutable parameters such as the number of players
     * and the random key for the game.  It can be more than one
     * token, which ought to be parseable by {@link online.game.commonCanvas#performHistoryInitialization}
     * @return return what will be the init type for the game
     */
     public String gameType() 
    	{
    	   // in games which have a randomized start, this method would return
    	   // return(bb.gametype+" "+bb.randomKey); 
    	return(bb.gametype+" "+bb.randomKey+" "+bb.nPlayers()); 
    	}	
     
    // this is the subgame "setup" within the master type.
    public String sgfGameType() { return(Raj_SGF); }	// this is the official SGF number assigned to the game

    // the format is just what is produced by FormHistoryString
    //
    // this is completely standardized
    //public void performHistoryTokens(StringTokenizer his)
    //{	String command = "";
    //    // now the rest
    //    while (his.hasMoreTokens())
    //    {
    //        String token = his.nextToken();
    //        if (",".equals(token) || ".end.".equals(token))
    //        {
    //            if (!"".equals(command))
    //            {
    //                PerformAndTransmit(command, false,false);
    //                command = "";
    //            }
    //        }
    //       else
    //        {
    //            command += (" " + token);
    //        }
    //    }	
    //} 
    //public void performPlayerInitialization(StringTokenizer his)
    //{	int fp = G.IntToken(his);
    //	BoardProtocol b = getBoard();
    //    if (fp < 0)   {  fp = 0;  }
    //    b.setWhoseTurn(fp);
    //    players[fp].ordinal = 0;
    //    players[(fp == 0) ? 1 : 0].ordinal = 1;
    //	
    //}
   
    /**
     * parse and perform the initialization sequence for the game, which
     * was produced by {@link online.game.commonCanvas#gameType}
     */
     public void performHistoryInitialization(StringTokenizer his)
    {   //the initialization sequence
    	String token = his.nextToken();
    	int key = G.IntToken(his);
    	int np = G.IntToken(his);
    	//
    	// in games which have a randomized start, this is the point where
    	// the randomization is inserted
        // int rk = G.IntToken(his);
    	// bb.doInit(token,rk);
        adjustPlayers(np);
        bb.doInit(token,key,np,my.boardIndex);
    }


    /** handle action events from menus.  Don't do any real work, just note
     * state changes and if necessary set flags for the run loop to pick up.
     * 
     */
    public boolean handleDeferredEvent(Object target)
    {
        boolean handled = super.handleDeferredEvent(target);


        return (handled);
    }

    /**
     * returns true if the game is over "right now", but also maintains 
     * the gameOverSeen instance variable and turns on the reviewer variable
     * for non-spectators.
     */
    //public boolean GameOver()
    //{	// the standard method calls b.GameOver() and maintains
    	// two variables.  
    	// "reviewer=true" means we were a player and the end of game has been reached.
    	// "gameOverSeen=true" means we have seen a game over state 
    //	return(super.GameOver());
    //}
    
    /** this is used by the stock parts of the canvas machinery to get 
     * access to the default board object.
     */
    public BoardProtocol getBoard()   {    return (bb);   }

    //** this is used by the game controller to supply entertainment strings to the lobby */
    // public String gameProgressString()
    // {	// this is what the standard method does
    // 	// return ((mutable_game_record ? Reviewing : ("" + viewMove)));
    // 	return(super.gameProgressString());
    // }


/** this is used by the scorekeeper to determine who won. Draws are indicated
 * by both players returning false.  Be careful not to let both players return true!
 */
    public boolean WinForPlayer(commonPlayer p)
    { // this is what the standard method does
      // return(getBoard().WinForPlayer(p.index));
      return (super.WinForPlayer(p));
    }
    public int ScoreForPlayer(commonPlayer p)
    {	return(bb.ScoreForPlayerNow(p.boardIndex));
    }


    /** factory method to create a robot */
    public SimpleRobotProtocol newRobotPlayer() 
    {  int level = sharedInfo.getInt(exHashtable.ROBOTLEVEL,0);
       switch(level)
       { default: 
       	// fall through
       	 return(new RajPlay(level));
       }
    }
    public boolean replayStandardProps(String name,String value)
    {	nextIntCompatabilityKludge(bb,name,value);
    	return(super.replayStandardProps(name,value));
    }
    /** replay a move specified in SGF format.  
     * this is mostly standard stuff, but the contract is to recognise
     * the elements that we generated in sgf_save
     */
    public void ReplayMove(sgf_node no)
    {
        String comments = "";
        sgf_property prop = no.properties;

        while (prop != null)
        {
            String name = prop.getName();
            String value = (String) prop.getValue();
            
            if (setup_property.equals(name))
            {	StringTokenizer tok = new StringTokenizer(value);
            	String game = tok.nextToken();
            	int key = G.IntToken(tok);
            	int np = G.IntToken(tok);
                bb.doInit(game,key,np,0);
                adjustPlayers(np);
              }
            else if (name.equals(comment_property))
            {
                comments += value;
            }
            else if (name.equals(game_property))
            {
                if (!(value.toLowerCase().equals("raj") || value.equals(Raj_SGF)))
                {
                	throw G.Error("game type " + value + " is not this game");
                }
            }
           else if (parseVersionCommand(name,value,2)) {}
           else if (parsePlayerCommand(name,value)) {}
            else
            {	// handle standard game properties, and also publish any
            	// unexpected names in the chat area
            	replayStandardProps(name,value);
            }

            prop = prop.next;
        }

        if (!"".equals(comments))
        {
            setComment(comments);
        }
    }
    
    // ***************************************************************************************
    // ******************                                                                 ****
    // ****************** special things we do because of the simultaneous movement phase ****
    // ******************                                                                 ****
    // ***************************************************************************************
    
    /** handle the run loop, and any special actions we need to take.
     * The mouse handling and canvas painting will be called automatically.
     * <p>
     * This is a good place to make notes about threads.  Threads in Java are
     * very dangerous and tend to lead to all kinds of undesirable and/or flakey
     * behavior.  The fundamental problem is that there are three or four sources
     * of events from different system-provided threads, and unless you are very
     * careful, these threads will all try to use and modify the same data
     * structures at the same time.   Java "synchronized" declarations are
     * hard to get right, resulting in synchronization locks, or lack of
     * synchronization where it is really needed.
     * <p>
     * This toolkit addresses this problem by adopting the "one thread" model,
     * and this is where it is.  Any other threads should do as little as possible,
     * mainly leave breadcrumbs that will be picked up by this thread.
     * <p>
     * In particular:
     * GUI events do not respond in the native thread.  Mouse movement and button
     * events are noted for later.  Requests to repaint the canvas are recorded but
     * not acted upon.
     * Network I/O events, merely queue the data for delivery later.
     *  */
        long award_prize_end_time = 0;
        static final int AWARD_PRIZE_DELAY = 2000;		// 2 seconds
        public void ViewerRun(boolean wait)
        {
            super.ViewerRun(wait);
            runAsyncRobots();
            
            if((started || reviewOnly) && (OurMove() && !reviewMode()))
            {	commonPlayer p = players[bb.whoseTurn];
            	if(p.robotPlayer==null)
            	{
            	if(bb.getState()==RajState.AWARD_PRIZE_STATE)
            	{	// in award_prize_state, we show the cards played and wait a short time
            		// for the players to see it.  Then the player whose turn it is auto-generates
            		// the award prize move.
            		if(bb.award_prize_timer==0)
            		{	// just starting, set up the delay
            			bb.award_prize_timer++;
            			award_prize_end_time = G.Date() + AWARD_PRIZE_DELAY; 
            		}
            		else if(G.Date()>award_prize_end_time)
            		{if(bb.award_prize_timer>0)
            			{bb.award_prize_timer = -1;
            			 PerformAndTransmit("Award");
            			}
            		}
            	}
            	else if(bb.getState()==RajState.CONFIRM_CARD_STATE)
            	{	// our turn, and we think everyone is ready.
            		// the theory is that if anyone becomes NOT ready, they will
            		// revert to "play" state until they also see all-ready.
            		// meantime, we're already comitted but oh-well - we were ready, right?
            		String mov = bb.cardMove();
            		if(mov!=null)
            		{
            		// we got the move.  If we didn't it's because we're the one who
            		// sneaked in a mind-change when the others weren't looking.
            		PerformAndTransmit(mov);
            		}
            	}
            	else if(bb.getState()==RajState.SELECT_PRIZE_STATE)
            	{	// time to select a new prize.
            		PerformAndTransmit("Select -1");
            	}
            	}
            }
        }
    //
    // this is called both when starting a new game, and when restoring a game from history.
    // we need to inform our board which index is "us"
    //
    public void startPlaying()
    {	super.startPlaying();
    	bb.setMyIndex(my.boardIndex,SIMULTANEOUS_PLAY);
    }
    //
    // when scrolling back to look at the game, the clocks must not stop unless we've made our move
    // so we have to remember the state when scrolling started
    //
    RajState pre_review_state = RajState.PUZZLE_STATE;
    public boolean doScrollTo(int whence)
    {	RajState pre_state = bb.getState();
    	int pre_view = viewStep;
    	boolean val = super.doScrollTo(whence);
    	if((pre_view==-1) && (viewStep!=-1))
    	{	pre_review_state = pre_state;
    	}
    	return(val);
    }
    //
    // if we're in a simultaneous move state, start the robot immediately rather 
    // than the normal wait for his turn.
    //
    public void startRobotTurn(commonPlayer p)
    {
       	switch(bb.getState())
    	{
    	case PLAY_STATE:
	    	if(!bb.hasDroppedCard(p.boardIndex))
					{ super.startRobotTurn(p); 
					}
	    	break;
	    default: 
	    	super.startRobotTurn(p);
    	}

    }
    //
    // get the player who may be running a robot. This is used
    // for board and progress displays.
    //
    public commonPlayer currenRobotPlayer()
    {	
    	switch(bb.getState())
    	{
    	case PLAY_STATE:
    	
    	if(SIMULTANEOUS_PLAY)
    	{
   			for(commonPlayer pp : players) 
    				{ if((pp!=null) 
    						&& pp.robotStarted() 
    						&& !bb.hasDroppedCard(pp.boardIndex))
    					{
    						return(pp);
    					}
    				}
    		}
			break;
		default:
			break;
    	}
    	return(super.currenRobotPlayer());
    }
    //
    // start robots if this is an asynchronous phase
    // if it's a normal, synchronous phase, the main game
    // controller will do it.
    //
    public void runAsyncRobots()
    {	
       	switch(bb.getState())
    	{
    	case PLAY_STATE:
    	if( !GameOver() && allRobotsIdle())
    	{ 	for(commonPlayer pp : players)
			{	if((pp!=null) && !bb.hasDroppedCard(pp.boardIndex))
					{ startRobotTurn(pp); 
					}
			}}
			break;
		default: break;
    	}
    }
    public boolean simultaneous_turns_allowed(commonPlayer whoseTurn)
    {	RajState state = bb.getState();
    	switch(state)
    	{
    	case PLAY_STATE:
    		return(true);
    	default: return(false);
    	}
    }
    public boolean fixed_move_baseline(commonPlayer whoseTurn)
    {	RajState state = reviewMode() ? pre_review_state : bb.getState();
    	switch(state)
    	{
    	case PLAY_STATE:
    		return(true);
    	default: return(false);
    	}
    }
    /**
     * the trickiest bit of simultaneous play is the inherent uncertainty that
     * the players will all see the same sequence of moves.  With up to 5 players
     * picking up cards and placing them, they will inevitably disagree about who
     * was first.  The server establishes a canonical order, but it's difficult
     * to use because the protocol is to play your move immediately rather than
     * wait for a round trip to the server.
     * 
     * if two players come to disagree about the sequence of moves, every time
     * they add a move to the server it causes consternation because it seems to
     * be contradicting the previous player.
     * 
     * After a lot of thought, the solution implemented here is to remove ALL ephemeral
     * moves from the game record, and tack on the unconfirmed, changeable, ephemeral moves
     * as a separate list.
     */
    /**
     * playback the history normal ephemeral history string, followed
     * by an additional list of ephemeral moves.
     */
    public void useEphemeraBuffer(StringTokenizer his)
    {
    	super.useEphemeraBuffer(his);
    	performHistoryTokens(his);
    }
    
    /**
     * this appends the ephemeral moves to the normal "ephemeral" history string.
     */
    public String formEphemeralHistoryString()
    {	String str = super.formEphemeralHistoryString();
    	ByteArrayOutputStream b = new ByteArrayOutputStream();
    	PrintStream os = new PrintStream(b);
    	os.print(" ");
    	int idx = History.size();
    	int hasSeen = 0;	// keeps track of the players we've seen make permanant moves.
    	boolean done = false;
    	while(!done && (--idx >=0))
    	{
    		commonMove m = History.elementAt(idx);
    		if(m.op==MOVE_CMOVE)
    		{	hasSeen |= (1<<m.player);	// note we've seen this player make a permanant move, so 
    			// we should filter out his ephemeral moves.
    		}
    		else if(m.op==MOVE_SELECT)
    		{	// found the start of a move
    			done = true;
    			// we backed up to the beginning of the current move.
    			m.formHistoryTree(os,new EphemeralFilter(hasSeen),m.index+10);
    	    	os.print(" ");
    		}
    	}
    	os.print(KEYWORD_END_HISTORY);
    	os.flush();
    	return(str + b.toString());
    }
    
    /**
     * form a canonical history string for the game synchronization that consists of only the
     * permanant moves.  
     */
    public void formHistoryString(PrintStream os)
    {	
        os.print(gameType() + " " + 0 );
        
        if (History.size() > 0)
        {	
            commonMove mv = History.elementAt(0);
            // the filter removes ephemeral moves and renumbers the moves
            mv.formHistoryTree(os,new FinalFilter(),0);
           
        }
    } 
}


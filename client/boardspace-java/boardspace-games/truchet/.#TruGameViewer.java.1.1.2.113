package truchet;


import java.awt.*;
import online.common.*;
import online.game.*;
import online.game.sgf.sgf_names;
import online.game.sgf.sgf_node;
import online.game.sgf.sgf_property;



import java.util.Hashtable;
import java.util.StringTokenizer;
import lib.G;

/**
 * 
 * Change History
 *
 * May 2007 initial work in progress. 
 *
 * This code is derived from the "HexGameViewer" class.  Refer to the
 * documentation there for overall structure notes.
*/
public class TruGameViewer extends commonCanvas 
	implements ViewerProtocol, TruConstants, sgf_names
{
     /**
	 * 
	 */
	static final long serialVersionUID = 1L;
	// colors
    private Color reviewModeBackground = new Color(220,165,200);
    private Color HighlightColor = new Color(0.2f, 0.95f, 0.75f);
    private Color rackBackGroundColor = new Color(194,175,148);
    private Color boardBackgroundColor = new Color(220,165,155);
     private Color vcrButtonColor = new Color(0.7f, 0.7f, 0.75f);
 
    // images
    private static Image[] textures = null;// background textures
    
    // private state
    private TruGameBoard b = null; 	// the board from which we are displaying
    private int CELLSIZE; 			// size of the layout cell.  
    private static int SUBCELL = 4;	// number of cells in a square
    private int SQUARESIZE;			// size of a board square
    
    // addRect is a service provided by commonCanvas, which supports a mode
    // to visualize the layout during development.  Look for "show rectangles"
    // in the options menu.
    //private Rectangle fullRect = addRect("fullRect"); //the whole viewer area
    //private Rectangle boardRect = addRect("boardRect"); //the actual board, normally at the left edge
    private Rectangle logRect = addRect("logRect"); //the game log, normally off the the right
    private Rectangle stateRect = addRect("stateRect");
    private Rectangle doneRect = addRect("doneRect");
    private Rectangle editRect = addRect("editRect");
    private Rectangle goalRect = addRect("goalRect");
    private Rectangle progressRect = addRect("progressRect");
    private Rectangle firstPlayerChipRect = addRect("firstPlayerChipRect");
    private Rectangle secondPlayerChipRect = addRect("secondPlayerChipRect");
    private Rectangle liftRect = addRect("liftRect");
    private Rectangle repRect = addRect("repRect");
    private boolean lifted=false;
    

    public void preloadImages()
    {	TruChip.preloadImages(this,ImageDir);
    	if (textures == null)
    	{ 
        textures = load_images(ImageDir,TextureNames);
    	}
    }

    Color CheMouseColors[] = { new Color(0.7f,0.7f,1.0f),new Color(0.3f,0.3f,1.0f)};
    Color CheMouseDotColors[] = { Color.black,Color.white};

	/**
	 * 
	 * this is the real instance intialization, performed only once.
	 * info contains all the goodies from the environment.
	 * */
    public void init(exHashtable info)
    {
        super.init(info);
        MouseColors = CheMouseColors;
        MouseDotColors = CheMouseDotColors;
       b = new TruGameBoard(info.getString(exHashtable.GAMETYPE, "Truchet"),
        		info.getString(exHashtable.GAMEUID));
        doInit(false);
        
     }

    /** 
     *  used when starting up or replaying and also when loading a new game 
     *  */
    public void doInit(boolean preserve_history)
    {
        //System.out.println(myplayer.trueName + " doinit");
        super.doInit(preserve_history);				// let commonViewer do it's things
        b.doInit(b.gametype,b.randomKey);						// initialize the board
        if(!preserve_history)
    	{
    	PerformAndTransmit(reviewOnly?"Edit":"Start P0", false,replayMode.Live);
    	}
   }
    

	static final int separation=1;

    public int setLocalBoundsSize(int width,int height,boolean wideMode,boolean tallMode)
    {	
        int chatHeight = selectChatHeight(height);
        boolean noChat = chatHeight==0;
        double sncols = b.boardSize+(tallMode ? 3 : (wideMode ? 11 : noChat? 7.5 : 5)); // more cells wide to allow for the aux displays
        double snrows = b.boardSize+(tallMode ? 5.5 : 0.25);  
        int cellw = (int)(width / sncols);
        int cellh = (int)((height-(wideMode ? 0 : chatHeight)) / snrows);
        SQUARESIZE = Math.max(1,Math.min(cellw, cellh)); //cell size appropriate for the aspect ration of the canvas
        CELLSIZE = SQUARESIZE/SUBCELL;
        return(SQUARESIZE);
    }
    public void createPlayerGroup(commonPlayer p0,int x,int y,Rectangle chipRect)
    {
    	Rectangle picRect = p0.picRect;
    	Rectangle nameRect = p0.nameRect;
    	Rectangle p0time = p0.timeRect;
    	Rectangle p0alt = p0.extraTimeRect;
        Rectangle p0anim = p0.animRect;
        Rectangle box = p0.playerBox;
        G.SetRect(chipRect,x,y,SQUARESIZE,SQUARESIZE);
             
        //first player name
        G.SetRect(nameRect, G.Right(chipRect)+CELLSIZE*2,G.Top(chipRect), CELLSIZE * 10, CELLSIZE*2);
        // first player portrait
        G.SetRect(picRect, G.Left(nameRect)+5*CELLSIZE, G.Bottom(nameRect),CELLSIZE * 8, CELLSIZE * 8);
              
        // time display for first player
        G.SetRect(p0time,G.Right( nameRect),y, CELLSIZE * 4, CELLSIZE);
        G.AlignLeft(p0alt,G.Bottom(p0time),p0time);
        // first player "i'm alive" animation ball
        G.SetRect(p0anim, G.Right(p0time)-CELLSIZE,G.Bottom( p0alt),CELLSIZE,CELLSIZE);

        G.SetRect(box,x,y,G.Right(p0anim)-x,G.Bottom(picRect)-y);
	
    }
    public void setLocalBoundsWT(int x, int y, int width, int height,boolean wideMode,boolean tallMode)
    {	
    	int chatHeight = selectChatHeight(height);
    	boolean noChat = chatHeight==0;
        int ideal_logwidth = CELLSIZE * 18;
        commonPlayer pl0 = getPlayerOrTemp(0);
        commonPlayer pl1 = getPlayerOrTemp(1);
        
        G.SetRect(fullRect,x,y,width,height);

        // game log.  This is generally off to the right, and it's ok if it's not
        // completely visible in all configurations.
        int boardW = SQUARESIZE * b.boardSize;
        G.SetRect(boardRect,x,wideMode ? y : chatHeight,boardW,boardW) ;
 
        G.SetRect(stateRect,G.Left( boardRect) + CELLSIZE, (wideMode ? 0 : chatHeight)+CELLSIZE/3,boardW - CELLSIZE, CELLSIZE );

        int playerX =  tallMode ? G.Left(boardRect) :  G.Right(boardRect)-CELLSIZE*2;
        createPlayerGroup(pl0,
        			playerX,
        			tallMode ? G.Bottom(boardRect)+CELLSIZE : wideMode ? CELLSIZE : chatHeight+CELLSIZE*2,
        			firstPlayerChipRect);
        createPlayerGroup(pl1,
        			playerX, 
        			tallMode ? G.Bottom(pl0.playerBox)+CELLSIZE : G.Bottom(boardRect)+CELLSIZE-G.Height(pl0.playerBox),
        			secondPlayerChipRect);
 
        int logH = noChat ? tallMode|wideMode ? CELLSIZE*20 : CELLSIZE*14 : chatHeight;
        int auxX =  G.Right(pl0.playerBox)+CELLSIZE/2;
        int chatY = y+(wideMode ? logH+CELLSIZE: CELLSIZE/2);
 
        int logX =tallMode 
        			?  G.Right(pl0.playerBox)+CELLSIZE 
        			:  wideMode ? auxX :  width-ideal_logwidth-CELLSIZE/2 ;
        int chatX = wideMode ? auxX : x+CELLSIZE/2;
        G.SetRect(chatRect,
        		chatX, chatY,
        		wideMode ? width-auxX -CELLSIZE : tallMode ? width-CELLSIZE : logX-chatX-CELLSIZE/2,
        		wideMode ? height-chatY-CELLSIZE : chatHeight);
        int logY = tallMode 
        			? G.Top(firstPlayerChipRect)+CELLSIZE 
        			: wideMode|!noChat
        				? y+CELLSIZE/2
        				: G.Bottom(pl0.playerBox)+CELLSIZE;
       G.SetRect(logRect,
        		logX,
        		logY, 
        		wideMode|tallMode ? width-logX-CELLSIZE/2 : ideal_logwidth,logH);


        // "edit" rectangle, available in reviewers to switch to puzzle mode
        G.SetRect(editRect, G.Right(boardRect)+CELLSIZE*separation, 
        			tallMode ? G.Top(boardRect)+SQUARESIZE : G.Bottom(firstPlayerChipRect)+CELLSIZE,
        			CELLSIZE*6, 2*CELLSIZE);

        G.SetRect(liftRect, G.Right(boardRect)+CELLSIZE, G.Bottom(editRect)+CELLSIZE,CELLSIZE*4,CELLSIZE*4);

        G.SetRect(goalRect,G.Left( boardRect)+CELLSIZE*3,G.Bottom(boardRect)-CELLSIZE,G.Width(boardRect)-CELLSIZE*6, CELLSIZE*2);
               
        setProgressRect(progressRect,goalRect);


        // "done" rectangle, should always be visible, but only active when a move is complete.
        G.SetRect(doneRect,G.Left( editRect), G.Bottom(liftRect)+CELLSIZE*2,G.Width(editRect),G.Height( editRect));
       
 
		//this sets up the "vcr cluster" of forward and back controls.
        SetupVcrRects(G.Left(liftRect),G.Bottom(doneRect)+2*CELLSIZE,
            CELLSIZE * 10,
            4 * CELLSIZE);
 
        G.SetRect(repRect, G.Left(doneRect),G.Bottom(vcrZone)+CELLSIZE/2,G.Width(doneRect)*2,G.Height( doneRect));

        positionTheChat(chatRect,Color.white,Color.white);

        generalRefresh();
    }
 
    private void DrawLiftRect(Graphics gc,HitPoint highlight)
    {	
    	
		if(gc!=null) 
		{ G.centerImage(gc,textures[LIFT_ICON_INDEX],liftRect,this); 
		  G.frameRect(gc,Color.black,liftRect);
		}
		if(G.pointInRect(highlight,liftRect))
    	{	highlight.spriteRect = liftRect;
    		highlight.spriteColor = Color.red;
    		highlight.hitCode = TruId.LiftRect;
    		highlight.dragging = lifted = highlight.down;
    	}
    }

	// draw a box of spare gobblets. Notice if any are being pointed at.  Highlight those that are.
    private void DrawCommonChipPool(Graphics gc, int forPlayer, Rectangle r, int player,
        HitPoint highlight)
    {	TruCell chips[]= b.Prototype_Chips;
        boolean canhit =  G.pointInRect(highlight, r) && b.LegalToHitChips(forPlayer);
        boolean canDrop = (getMovingObject()>=0);
        int cellW = G.Width(r);
        {	TruCell thisCell = chips[forPlayer];
        	if(thisCell!=null)
        	{	TruChip thisChip = thisCell.topChip();
        		int left = G.Left(r);
	    		int top = G.Top(r);
	       		if(canhit 
	       				&& G.pointInRect(highlight,left,top,cellW,SQUARESIZE)
	       				&& (canDrop ? b.canDropOn(thisCell) : (thisChip!=null))
	       				)
	    		{ highlight.hitObject = thisCell;
	     		  highlight.hitCode = (thisChip.playerIndex==FIRST_PLAYER_INDEX) ? TruId.White_Chip_Pool : TruId.Black_Chip_Pool;
	     	      highlight.arrow = canDrop ? StockArt.DownArrow : StockArt.UpArrow;
	     	      highlight.awidth = G.Width(r)/2;
	    		}
        		if(thisChip!=null)
        		{
                  if(gc!=null)
                	{int pl = thisChip.playerIndex;
                	 G.setFont(gc,largeBoldFont);
                 	 thisChip.drawChip(gc,this,SQUARESIZE,G.Left(r)+cellW/3,  G.Top(r)+cellW,
                			 ""+b.enemyBasesOccupied(pl)+"-"+b.chips_on_board[pl]);
                 	G.setFont(gc,standardPlainFont);
 
                	}
	       		}
        	}
        }
    }

    public void drawSprite(Graphics g,int idx,int xp,int yp)
    {	TruChip chip = TruChip.getChip(idx);
    	chip.drawChip(g,this,SQUARESIZE,xp-SQUARESIZE/3,yp+SQUARESIZE/3,null);
    }



    /* draw the deep unchangable objects, including those that might be rather expensive
     * to draw.  This background layer is used as a backdrop to the rest of the activity.
     * in our cease, we draw the board and the chips on it. 
     * */
    public void drawFixedElements(Graphics gc)
    { boolean review = reviewMode() && !mutable_game_record;
      // erase
      G.setColor(gc,review ? reviewModeBackground : boardBackgroundColor);
      //G.fillRect(gc, fullRect);
      G.tileImage(gc,textures[BACKGROUND_TILE_INDEX], fullRect, this);   
      if(review)
      {	 
        G.tileImage(gc,textures[BACKGROUND_REVIEW_INDEX],boardRect, this);   
      }
      b.SetDisplayParameters(0.94,1.0,  0.12,0.1,  0);
      b.SetDisplayRectangle(boardRect);

        
      // for us, the board is one large graphic, for which the target points
      // are carefully matched with the abstract grid
      //G.centerImage(gc,images[BOARD_INDEX], 
      //	  brect.x,brect.y,brect.width,brect.height,this);

      b.DrawGrid(gc,boardRect,use_grid,Color.white,Color.black,Color.blue,Color.black);
    }

   /* draw the board and the chips on it. */
    private int liftSteps=0;
    private void drawBoardElements(Graphics gc, TruGameBoard gb, Rectangle brect, HitPoint highlight)
    {
    	liftSteps = lifted ? Math.min(++liftSteps,12) : Math.max(--liftSteps,0);
     	int liftdiv = 40;
     	Hashtable<TruCell,TruCell> riverDests = gb.riverMoveDests();		// can be a river move cell
     	Hashtable<TruCell,TruCell> splitDests = gb.splitMoveDests();		// can be a split cell
     	Hashtable<TruCell,TruCell> mergeDests = gb.mergeMoveDests();		// can be a merge cell
     	Hashtable<TruCell,TruCell> mergeSources = gb.mergeMoveSources();	// can be the source for other partners in a merge
     	TruCell flipped = gb.flippedCell;
     	boolean dolift = (liftSteps>0);
     	setDraggingBoard(dolift);	// inhibit touch zoom while in contact
     	if(dolift && (liftSteps<12))
     		{ // this induces a very simple animation
     		repaint(20); 
     		}
     	//
        // now draw the contents of the board and anything it is pointing at
        //
    	TruCell hitCell = null;
     	int CSQ = 3*CELLSIZE/2;
        for (int row = gb.boardSize; row>0; row--)	// back to front
        { //where we draw the grid
        	for (int col = gb.boardSize-1; col>=0; col--)
        	{
            char thiscol = (char) ('A' + col);
            	TruCell cell = gb.getCell(thiscol,row);
                boolean isARiverDest = riverDests.get(cell)!=null;
                boolean isASplitDest = splitDests.get(cell)!=null; 
                boolean isAMergeDest = mergeDests.get(cell)!=null;
                boolean isAMergeSource = mergeSources.get(cell)!=null; 
                int ypos0 = G.Bottom(brect) - gb.cellToY(thiscol, row);
                int xpos0 = G.Left(brect) + gb.cellToX(thiscol, row);
                int topindex = cell.chipIndex;
                if(topindex>=0)
                {
                for(int cindex = 0; cindex<=topindex; cindex++)
                {
                TruChip cup = cell.chipAtIndex(cindex);
                int liftYval = ((cindex-1)*SQUARESIZE)/10
					+(dolift?((liftSteps*SQUARESIZE)/(2*liftdiv))*cindex : 0);
                int liftXval =  ((cindex-1)*SQUARESIZE)/40;
                int xpos = xpos0 + liftXval;
                int ypos = ypos0 - liftYval;
                if(cup!=null)
                {	
                	if(gc!=null) 
                		{
                		cup.drawChip(gc,this,SQUARESIZE,xpos,ypos,null);

                		if(cindex==0) 
                			{ 
                			  if(cell==flipped)
                				{
                				G.frameRect(gc,Color.red,xpos-CSQ,ypos-CSQ,CSQ*2-1,CSQ*2-1);
                				}
                			  if(cell.isBase)
                			  {G.frameRect(gc,Color.white,xpos+CSQ/2,ypos-7*CSQ/4,CSQ+1,CSQ);
                			  }
                			}
                		}
                }
                
                if((cindex==topindex) && (gc!=null))
                {
                if(isARiverDest)
                	{ G.DrawAACircle(gc,xpos+(int)(DOT_X_SCALE*SQUARESIZE),ypos-(int)(DOT_Y_SCALE*SQUARESIZE),Math.max(2,SQUARESIZE/10),Color.red,Color.red,true);
                	}
                if(isASplitDest)
            	{ G.DrawAACircle(gc,xpos+(int)(DOT_X_SCALE*SQUARESIZE),ypos-(int)(DOT_Y_SCALE*SQUARESIZE),Math.max(2,SQUARESIZE/10),Color.yellow,Color.yellow,true);
            	}
                if(isAMergeDest)
            	{ G.DrawAACircle(gc,xpos+(int)(DOT_X_SCALE*SQUARESIZE),ypos-(int)(DOT_Y_SCALE*SQUARESIZE),Math.max(2,SQUARESIZE/15),Color.green,Color.green,true);
            	}
                if(isAMergeSource)
            	{ G.DrawAACircle(gc,xpos+(int)(DOT_X_SCALE*SQUARESIZE),ypos-(int)(DOT_Y_SCALE*SQUARESIZE),Math.max(2,SQUARESIZE/15),Color.blue,Color.blue,true);
            	}

                }
                
              if(highlight!=null)
              {
              boolean hitpoint = 
            		  gb.LegalToHitBoard(cell)
            		  && cell.closestPointToCell(highlight,CELLSIZE*2, xpos, ypos)
                   			;

              if(cindex==topindex)
              {
            	if(hitpoint) 
              	{	hitCell = cell;
              	}
              else
              {	  int corner = (int)(1.414*CELLSIZE);
              	  if(gb.LegalToHitIntersection(cell)
              			  && cell.closestPointToCell(highlight, CELLSIZE*2,xpos+corner, ypos-corner)
            		  	)
            		  	{
              		    hitCell = cell;
             		  	} 	
              }
              }
              }}
              }
             }
        }
        
 
        if(hitCell!=null)
        {	highlight.hitCode = (hitCell.chipIndex>0) ? TruId.BoardLocation : TruId.EmptyBoard;
       		highlight.arrow =(getMovingObject()>=0) ? StockArt.DownArrow : StockArt.UpArrow;
      		highlight.awidth = SQUARESIZE/2;
      		highlight.spriteColor = Color.red;
         }

    }
    
    public void drawAuxControls(Graphics gc,HitPoint highlight)
    {  DrawLiftRect(gc,highlight); 
    }
    //
    // draw the board and things on it.  If gc!=null then actually 
    // draw, otherwise just notice if the highlight should be on
    //
    public void redrawBoard(Graphics gc, HitPoint highlight)
    {  TruGameBoard gb = (TruGameBoard) disB(gc);
      boolean ourTurn = OurMove();
      boolean moving = getMovingObject()>=0;
      HitPoint ot = ourTurn ? highlight : null;	// hit if our turn
      HitPoint select = moving?null:ot;	// hit if our turn and not dragging
      HitPoint ourSelect = (moving && !reviewMode()) ? null : highlight;	// hit if not dragging
      TruchetState vstate = b.getState();
      redrawGameLog(gc, ourSelect, logRect, boardBackgroundColor);
    
      drawBoardElements(gc, gb, boardRect, ot);

       DrawCommonChipPool(gc, FIRST_PLAYER_INDEX,firstPlayerChipRect, gb.whoseTurn,ot);
       DrawCommonChipPool(gc, SECOND_PLAYER_INDEX,secondPlayerChipRect, gb.whoseTurn,ot);
       G.setFont(gc,standardBoldFont);
       drawPlayerStuff(gc,(vstate==TruchetState.PUZZLE_STATE),ourSelect,
	   			HighlightColor, rackBackGroundColor);


		if (vstate != TruchetState.PUZZLE_STATE)
        {
             if (G.handleRoundButton(gc, doneRect, 
            		(b.DoneState()? select : null), s.get(DoneAction),
                    HighlightColor, rackBackGroundColor))
            {	// always display the done button, but only make it active in
            	// the appropriate states
                select.hitCode = DefaultId.HitDoneButton;
            }
             if (allowed_to_edit)
             {
       
                     if (G.handleRoundButton(gc, editRect, select, s.get(EditAction),
                                 HighlightColor, rackBackGroundColor))
                     {
                         select.hitCode = DefaultId.HitEditButton;
                     }
       
             }
         }

        String msg = s.get(vstate.getDescription());
        if(debug) { msg = "("+b.sm_step+")"+msg;}
        standardGameMessage(gc,
        		vstate==TruchetState.GAMEOVER_STATE?gameOverMessage():msg,
        				vstate!=TruchetState.PUZZLE_STATE,
        				gb.whoseTurn,
        				stateRect);
        goalAndProgressMessage(gc,ourSelect,s.get("Occupy 3 enemy bases"),progressRect, goalRect);
        DrawRepRect(gc,b.Digest(),repRect);
        drawAuxControls(gc,ourSelect);
        drawVcrGroup(ourSelect, gc, HighlightColor, vcrButtonColor);

    }

    /**
     * Execute a move by the other player, or as a result of local mouse activity,
     * or retrieved from the move history, or replayed form a stored game. 
     * @param mm the parameter is a commonMove so the superclass commonCanvas can
     * request execution of moves in a generic way.
     * @return true if all went well.  Normally G.Error would be called if anything went
     * seriously wrong.
     */
     public boolean Execute(commonMove mm,replayMode replay)
    {	
        if(b.getState()==TruchetState.PUZZLE_STATE)
    	{   mm.setSliderNumString("--");
    		switch(mm.op)
        	{
    		case MOVE_DROPB:
    		case MOVE_FLIP:
    			lastDropped = b.sm_picked[b.sm_step];
    			mm.setLineBreak(true);
       			break;
       			
        	case MOVE_PICK: 
        	case MOVE_PICKB: 
        		break;
    		default:
    			mm.setLineBreak(true);
        	}
    	}
 
        handleExecute(b,mm,replay);
        
        if(replay!=replayMode.Replay) { playSounds((TruMovespec)mm); }
 
        return (true);
    }
/**
 * parse a move specifier on behalf of the current player.  This is called by the 
 * "game" object when it receives a move from the other player.  Note that it may
 * be called while we are in review mode, so the current state of the board should
 * not be considered.
 */
    public commonMove ParseNewMove(String st)
    {
        return (new TruMovespec(st, -1));
    }
    
public commonMove EditHistory(commonMove m)
{	// allow "no change" moves, which occur when you pick or drop to the pool.
	if((m.op==MOVE_PICKB)||(m.op==MOVE_PICK)) { return(m); }
	int sz = History.size()-1;
	if(sz>=1)
		{	
		TruMovespec prev = (TruMovespec)History.elementAt(sz);
		TruMovespec prev2 = (TruMovespec)History.elementAt(sz-1);
		if(((m.op==MOVE_RESET)||(m.op==MOVE_DROP))&&(prev.op==MOVE_PICK)) 
			{ popHistoryElement();
			  return(null);
			} 
		else
		if((b.getState()==TruchetState.PUZZLE_STATE)
				&& (m.op==MOVE_DROPB) 
				&& (prev.op==MOVE_PICKB)
				&& (prev2.op==MOVE_DROPB)
				&& (prev.from_col==prev2.to_col)
				&& (prev.from_row==prev2.to_row))
			{
			popHistoryElement();
			popHistoryElement();
			}
		}
	return(super.EditHistory(m,true));
}
private void playSounds(TruMovespec m)
{
    // add the sound effects
    switch(m.op)
    {
    case MOVE_FLIP:
    	playASoundClip(scrape,50);
    	break;
    case MOVE_BOARD_BOARD:
       	playASoundClip(light_drop,50);
    	playASoundClip(heavy_drop,50);
    	break;
    case MOVE_SPLIT:
    case MOVE_MERGE:
    	{
	    	int nn = m.splitInfo.length();
	    	while(nn-- > 0)
	    	{playASoundClip(light_drop,100);
	    	}
    	}
    	break;
    case MOVE_PICK:
    case MOVE_DROP:
    case MOVE_PICKB:
    	playASoundClip(light_drop,50);
      	break;
    default: break;
    }
	
}

 
/**
 * the preferred mouse gesture style is to let the user "pick up" objects
 * by simply clicking on them, but we also allow him to click and drag. 
 * StartDragging is called when he has done this.
 */
    public void StartDragging(HitPoint hp)
    {
        int mo = getMovingObject();
        if ((mo < 0)&&(hp.hitCode instanceof TruId)) // not dragging anything yet, so maybe start
        {

        TruId hitObject = (TruId)hp.hitCode;
		TruCell cell = (TruCell)hp.hitObject;
		TruChip cup = (cell==null) ? null : cell.topChip();
		if(cup!=null)
		{
	    switch(hitObject)
	    {
	    case LiftRect:
	    case Black_Chip_Pool:
	    	PerformAndTransmit("Pick B ");
	    	break;
	    case White_Chip_Pool:
	    	PerformAndTransmit("Pick W ");
	    	break;
	    case EmptyBoard:
	    	PerformAndTransmit("Flip "+ cell.col+" "+cell.row);
	    	break;
	    case BoardLocation:
	    	PerformAndTransmit("Pickb "+cell.col+" "+cell.row+" "+cup.chipNumber);
	    	break;
		default:
			break;
        }

        if (getMovingObject() >= 0)
        {	// if we got something started, inform the mouse handler
            hp.dragging = true;
        } }
        }
    }

	/** 
	 * this is called on "mouse up".  We may have been just clicking
	 * on something, or we may have just finished a click-drag-release.
	 * We're guaranteed just one mouse up, no bounces.
	 */
    public void StopDragging(HitPoint hp)
    {
        CellId id = hp.hitCode;
        if(!(id instanceof TruId)) {  missedOneClick = performStandardActions(hp,missedOneClick); }
    	else {
    	TruId hitObject = (TruId)hp.hitCode;
        TruchetState state = b.getState();
		TruCell cell = (TruCell)hp.hitObject;
		TruChip cup = (cell==null) ? null : cell.topChip();
        switch (hitObject)
        {
        default:
        	throw G.Error("Hit Unknown object " + hitObject);
        case LiftRect:
        case EmptyBoard:
        case BoardLocation:	// we hit the board 
		 switch(state)
			{
			default: throw G.Error("Not expecting drop on filled board in state "+state);
			case M_STATE:
			case M_DONE_STATE:
			case S_STATE:
			case MSM_STATE: 
			case CONFIRM_STATE:
			case STARTM_STATE:
			case STARTS_STATE:
			case STARTSM_STATE:
			case SORM_STATE:
			case PLAY_STATE:
			case PUZZLE_STATE:
				if(b.movingObjectIndex()>=0)
				{ if(cell!=null) { PerformAndTransmit("Dropb "+cell.col+" "+cell.row); }
				}
				else if((cup!=null)&&(hitObject!=TruId.EmptyBoard))
				{
				PerformAndTransmit( "Pickb "+cell.col+" "+cell.row+" "+cup.chipNumber);
				}
				break;
			}
			break;
			
        case White_Chip_Pool:
        case Black_Chip_Pool:
        	{
        	int mov = b.movingObjectIndex();
        	String col = hitObject.shortName;
            if(mov>=0) 
			{//if we're dragging a black chip around, drop it.
            	switch(state)
            	{
            	default:throw  G.Error("can't drop on rack in state "+state);
                	case PLAY_STATE:
            		performReset();
            		break;

               	case PUZZLE_STATE:
            		PerformAndTransmit("Drop "+col+" "+cell.row+" "+mov);
            		break;
            	}
			}
         	}
            break;

        }
        }
    }


    public String gameType() { return(""+b.gametype+" "+b.randomKey); }
    public String sgfGameType() { return(Truchet_SGF); }

    public void performHistoryInitialization(StringTokenizer his)
    {   //the initialization sequence
    	String token = his.nextToken();
        long rk = G.LongToken(his);
        b.doInit(token,rk);
     }
    
   
//    public void doShowText()
//    {
//        if ( debug)
//        {
//            super.doShowText();
//        }
//        else
//        {
//            theChat.postMessage(GAMECHANNEL,KEYWORD_CHAT,
//                s.get(CensoredGameRecordString));
//        }
//    }


    public BoardProtocol getBoard()   {    return (b);   }
    public SimpleRobotProtocol newRobotPlayer() { return(new TruPlay()); }

    public boolean replayStandardProps(String name,String value)
    {	nextIntCompatabilityKludge(b,name,value,"Dec 6 2009");
    	return(super.replayStandardProps(name,value));
    }
    
    /** replay a move specified in SGF format.  
     * this is mostly standard stuff, but the key is to recognize
     * the elements that we generated in sgf_save
     */
    public void ReplayMove(sgf_node no)
    {
        String comments = "";
        sgf_property prop = no.properties;

        while (prop != null)
        {
            String name = prop.getName();
            String value = (String) prop.getValue();

            if (setup_property.equals(name))
            {	StringTokenizer tok = new StringTokenizer(value);
            	String gametype = tok.nextToken();
            	long rk = G.LongToken(tok);
                b.doInit(gametype,rk);
             }
            else if (name.equals(comment_property))
            {
                comments += value;
            }
            else if (name.equals(game_property))
            {
                if (!(value.equals(Truchet_SGF)))
                {
                	throw G.Error("game type " + value + " is not this game");
                }
            }
            else if(parsePlayerCommand(name,value)) {}
            else if (parseVersionCommand(name,value,2)) {}
            else
            {
                replayStandardProps(name,value);
            }

            prop = prop.next;
        }

        if (!"".equals(comments))
        {
            setComment(comments);
        }
    }
}


package oneday;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;

import lib.G;
import lib.OStack;
import online.game.commonCanvas;


class LineStack extends OStack<Line>
{
	public Line[] newComponentArray(int n) { return(new Line[n]); }
}

/* lines with the same fields as in the database */
class Line 
{
	String name;
	String comment;
	int runtime;
	Color color;
	Color textColor;
	boolean circular=false;
	boolean included = true;
	int interval;
	int startOffset;
	public int nStops() { return(stops.size()); }
	public StopStack stops = new StopStack();
	public String toString()
	{	return("<line "+name+" "+comment+">");
	}
	public void addStop(Stop s)
	{
		int nstops = stops.size()-1;
		while(nstops>=0) 
			{ if(stops.elementAt(nstops).ordinal<s.ordinal)
				{
				stops.insertElementAt(s,nstops+1);
				return;
				}
				nstops--;
			}
		stops.insertElementAt(s,0);
	}
	public Stop getStop(int n)
	{	if(circular) 
		{
			if(n==-1) { n = stops.size()-1; }
			if(n==stops.size()) { n = 0; }
		}
		return((n>=0 && n<stops.size())?stops.elementAt(n):null);
	}
	Line(String n,String c,int r,int g,int b,int ba,boolean inc,int run,int in,int off)
	{
		this(n,c,new Color(r,g,b),new Color(ba,ba,ba),inc,run,in,off);
	}

	Line(String n,String c,Color v,Color tc,boolean inc,int run,int in,int off)
	{	runtime = run;
		interval = in;
		startOffset = off;
		name = n;
		included = inc;
		comment = c;
		color = v;			// line's traditional color from the maps
		textColor = tc;		// guess at a black or white text appropriate for this color
		circular = name.toLowerCase().equals("circle");
		lines.push(this);
	}
	static LineStack lines = new LineStack();
	static public Line getLine(String name)
	  {	String lc = name.toLowerCase();
	    for(int i=lines.size()-1; i>=0; i--)
		  {	Line l = lines.elementAt(i);
			  if(l.name.toLowerCase().equals(lc)) { return(l); }
		  }
	    throw G.Error("Line "+name+" not found");
	  }
	static public Line getLine(int n)
	{
		return(lines.elementAt(n));
	}
	static public int nLines() { return(lines.size()); }
	public void registerSegments()
	{
		for(int i=0,nst = nStops(),lim=nst+(circular?0:-1);
		i<lim;
		i++)
		{
		Station from = getStop(i).station;
		Station to = getStop(i+1).station;
		if((from!=null) && (to!=null))
		{Segment s = new Segment(from,to,this);
		Segment.register(s);
		}
		}
	}
	static public void registerAllSegments()
	{
		for(int i=0;i<lines.size();i++) { lines.elementAt(i).registerSegments(); }
	}
	public void drawStops(Graphics g,commonCanvas can,Rectangle r)
	{
		for(int i=0,nst = nStops();i<nst;i++)
		{	getStop(i).station.drawStop(g,can,r,1.0);
			
		}
				
	}
	public void drawSegments(Graphics g1,Rectangle r,double scl)
	{	Graphics2D g = (Graphics2D) g1.create();
		double strokeWidth = Math.max(2,(scl*r.width/120));
		BasicStroke stroke = new BasicStroke((float)strokeWidth);
		for(int i=0,nst = nStops(),lim=nst+(circular?0:-1);
			i<lim;
			i++)
		{	Station from = getStop(i).station;
			Station to = getStop(i+1).station;
			if((from!=null) && (to!=null))
			{	Segment s = new Segment(from,to,this);
				Segment d = s.checkForDuplicate();

				int fx = G.Left(r)+(int)(from.xpos*G.Width(r)/100);
				int fy = G.Top(r)+(int)(from.ypos*G.Height(r)/100);
				int tx = G.Left(r)+(int)(to.xpos*G.Width(r)/100);
				int ty = G.Top(r)+(int)(to.ypos*G.Height(r)/100);
				if(s.line!=d.line)
				{
					if(Math.abs(fx-tx)>Math.abs(fy-ty))
					{
						fy+=strokeWidth;
						ty+= strokeWidth;
					}
					else { fx+=strokeWidth;
						tx+= strokeWidth;
					}
				}
				G.setColor(g,color);
				g.setStroke(stroke);
				G.drawLine(g,fx,fy,tx,ty);
			}
		}
	}
	
	public static void drawAllLines(Graphics gc,Rectangle r,double scl)
	{	for(int i=0;i<lines.size();i++) { lines.elementAt(i).drawSegments(gc,r,scl); }
	}
}
package frogs;

import online.common.*;
import online.game.*;
import online.game.sgf.*;

import java.awt.*;
import java.util.*;

import lib.G;


/**
 * 
 * Change History
 *
 * June 2006  Inital work in progress.  

*/
public class FrogViewer extends commonCanvas 
	implements ViewerProtocol, FrogConstants, sgf_names
{
     /**
	 * 
	 */
	static final long serialVersionUID = 1L;
	// colors
    private Color reviewModeBackground = new Color(220,165,200);
    private Color HighlightColor = new Color(0.2f, 0.95f, 0.75f);
    private Color logrectHighlightColor = new Color(0.9f,0.9f,0.3f);
    private Color ZoomColor = new Color(0.0f,0.0f,1.0f);
    private Color rackBackGroundColor = new Color(150,197,150);
    private Color boardBackgroundColor = new Color(215,197,157);
    private Color vcrButtonColor = new Color(0.7f, 0.7f, 0.75f);
    public Color[] FrogsMouseColors = 
	{ Color.green ,Color.blue, 
	  Color.white, Color.red
	  };
    

    /** default for center dots of mouse sprites */
    public Color[] FrogsMouseDotColors = 
	{ Color.white, Color.white, 
		Color.black, Color.black
    };
    private Font gameLogBoldFont=null;
    private Font gameLogFont = null;
    // images
    private static Image[] textures = null;// background textures
    // private state
    private FrogBoard b = null; //the board from which we are displaying
    private int CELLSIZE; 	//size of the layout cell
    private final double INITIAL_TILE_SCALE = 3.0;
    private double board_center_x = 0.0;
    private double board_center_y = 0.0;
    // addRect is a service provided by commonCanvas, which supports a mode
    // to visualize the layout during development.  Look for "show rectangles"
    // in the options menu.
    //private Rectangle fullRect = addRect("fullRect"); //the whole viewer area
    //private Rectangle boardRect = addRect("boardRect"); //the actual board, normally at the left edge
    private Rectangle logRect = addRect("logRect"); //the game log, normally off the the right
    private Rectangle doneRect = addRect("doneRect");
    private Rectangle repRect = addRect("repRect");
    private Rectangle editRect = addRect("editRect");
    private Rectangle goalRect = addRect("goalRect");
    private Rectangle progressRect = addRect("progressRect");
    private Rectangle bagRect = addRect("bagRect");
    
    private Rectangle handRect[] = 
    	{ addRect("firstPlayerHand"),
    	  addRect("secondPlayerHand"),
    	  addRect("thirdPlayerHand"),
    	  addRect("fourthPlayerHand")};
    private Rectangle chipRect[] = 
	{ addRect("firstPlayerChip"),
	  addRect("secondPlayerChip"),
	  addRect("thirdPlayerChip"),
	  addRect("fourthPlayerChip")};
   
    private Rectangle stateRect = addRect("stateRect");
    private Slider zoomRect = null;
    
    /**
     * return a score for the player in a multiplayer game. 
     */
    public int ScoreForPlayer(commonPlayer p)
    {	return(WinForPlayer(p)?11:10-b.numberOfGroups(p.boardIndex));
    }
    
    public void preloadImages()
    {	FrogPiece.preloadImages(this,ImageDir);
	    if (textures == null)
	        { // note that dfor this to work correctly, the images and masks must be the same size.  
	          // Refer to http://www.andromeda.com/people/ddyer/java/imagedemo/transparent.html
            textures = load_images(ImageDir,TextureNames);
	        }
    }
	/**
	 * 
	 * this is the real instance intialization, performed only once.
	 * info contains all the goodies from the environment.
	 * */
    public void init(exHashtable info)
    {   
        int randomv = info.getInt(exHashtable.RANDOMSEED);
        int pl = info.getInt(exHashtable.PLAYERS_IN_GAME);
     
        super.init(info);
        MouseDotColors = FrogsMouseDotColors;
        MouseColors = FrogsMouseColors;
        
        gameLogBoldFont = G.getFont(standardPlainFont, G.Style.Bold, FontHeight+2);
        gameLogFont = G.getFont(standardPlainFont,G.Style.Plain,FontHeight);
        zoomRect = addSlider("zoomRect",s.get("Tile Size"),FrogId.ZoomSlider);
        zoomRect.min=2.0;
        zoomRect.max=5.0;
        zoomRect.value=INITIAL_TILE_SCALE;
        zoomRect.barColor=ZoomColor;
        zoomRect.highlightColor = HighlightColor;
        b = new FrogBoard(info.getString(exHashtable.GAMETYPE, Frogs_INIT),randomv,pl);
        doInit(false);
     }

    /** 
     *  used when starting up or replaying and also when loading a new game 
     *  */
    public void doInit(boolean preserve_history)
    {
        //System.out.println(myplayer.trueName + " doinit");
        super.doInit(preserve_history);				// let commonViewer do it's things
        b.doInit(b.gametype,b.randomKey,b.nPlayers());						// initialize the board
        if(!preserve_history)
        	{
        	 zoomRect.setValue(INITIAL_TILE_SCALE);
        	 board_center_x = board_center_y = 0.0;
             PerformAndTransmit(reviewOnly?"Edit":"Start P0", false,replayMode.Live);
        	}
   }


    public void createPlayerGroup(commonPlayer pl0,int x,int y,Rectangle discRect,Rectangle frogRect)
    {	if(pl0!=null)
    	{
        Rectangle p0time = pl0.timeRect;
        Rectangle p0anim = pl0.animRect;
        Rectangle firstPlayerRect = pl0.nameRect;
        Rectangle firstPlayerPicRect = pl0.picRect;
  	
        
    	G.SetRect(discRect, x, y, CELLSIZE*4,CELLSIZE*2);

    	G.SetRect(frogRect, x, G.Bottom(discRect)+CELLSIZE/2, CELLSIZE*6,CELLSIZE*3);

        //first player name
    	G.SetRect(firstPlayerRect, G.Right(discRect)+CELLSIZE, G.Top(discRect), CELLSIZE * 6, 3*CELLSIZE/2);

        // time dispay for first player
    	G.SetRect(p0time,G.Right(firstPlayerRect),G.Top(firstPlayerRect), CELLSIZE * 3, CELLSIZE);
        // first player "i'm alive" anumation ball
    	G.SetRect(p0anim, G.Right(p0time),G.Top(p0time),G.Height(p0time), G.Height(p0time));

         // first player portrait
    	G.SetRect(firstPlayerPicRect, G.Right(frogRect)+CELLSIZE,G.Bottom(firstPlayerRect), CELLSIZE * 5,CELLSIZE * 5);

    	}
    }

	/**
	 * this is the main method to do layout of the board and other widgets.  I don't
	 * use swing or any other standard widget kit, or any of the standard layout managers.
	 * they just don't have the flexibility to produce the results I want.  Your milage
	 * may vary, and of course you're free to use whatever layout and drawing methods you
	 * want to.  However, I do strongly encourage making a UI that is resizable within
	 * reasonable limits, and which has the main "board" object at the left.
	 * 
	 *  The basic layout technique used here is to start with a cell which is about the size
	 *  of a board square, and lay out all the other object relative to the board or to one
	 *  another.  The rectangles don't all have to be on grid points, and don't have to
	 *  be nonoverlapping, just so long as the result generally looks good.
	 *  
	 *  When "extraactions" is available, a menu opion "show rectangles" works
	 *  with the "addRect" mechanism to help visualize the layout.
	 */ 
    public void setLocalBounds(int x, int y, int width, int height)
    {
        int ncols = b.ncols+14; // more cells wide to allow for the aux displays
        int nPlayers = b.nPlayers();
        int nrows = Math.max(b.nrows/2,nPlayers*6+9);
        int cellw = width / ncols;
        int chatHeight = selectChatHeight(height);
        int cellh = (height-chatHeight) / nrows;
        int rackWidth = 20*CELLSIZE;
        CELLSIZE = Math.max(2,Math.min(cellw, cellh)); //cell size appropriate for the aspect ration of the canvas

        G.SetRect(fullRect,x,y,width,height);

        // game log.  This is generally off to the right, and it's ok if it's not
        // completely visible in all configurations.
        int boardY = chatHeight+CELLSIZE*2;
        G.SetRect(boardRect, CELLSIZE/2,boardY,width-CELLSIZE-rackWidth,height-boardY-CELLSIZE);
   
        G.SetRect(stateRect,G.Left( boardRect), chatHeight+CELLSIZE/4,G.Width(boardRect)-CELLSIZE*7,3*CELLSIZE/2);
      
        G.SetRect(zoomRect, G.Right(stateRect),G.Top( stateRect), CELLSIZE*7,G.Height(stateRect));
        
        G.SetRect(chatRect,x,y,G.Width(boardRect),chatHeight);

        G.SetRect(logRect, G.Right(chatRect)+CELLSIZE/2 ,G.Top( chatRect),width-G.Width(boardRect)-CELLSIZE*2,G.Height(chatRect));

		//this sets up the "vcr cluster" of forward and back controls.
        SetupVcrRects(CELLSIZE / 2,
        	G.Bottom(boardRect) - 5*CELLSIZE/2, CELLSIZE * 8,
            3 * CELLSIZE);

        G.SetRect(goalRect,CELLSIZE * 5,G.Bottom( boardRect),29 * CELLSIZE,CELLSIZE );
        
        G.SetRect(progressRect, G.Left(goalRect)+G.Width(goalRect)/6,	// a simple progress bar when the robot is running.
        			G.Top(goalRect)+CELLSIZE/4,
        			G.Width(goalRect)/2,CELLSIZE/2);

        for(int i=0;i<nPlayers;i++)
        {	createPlayerGroup(getPlayerOrTemp(i),G.Right(boardRect)+CELLSIZE,chatHeight+CELLSIZE+i*CELLSIZE*7,chipRect[i],handRect[i]);
        }
        // "done" rectangle, should alway be visible, but only active when a move is complete.
        G.SetRect(doneRect, G.Right(boardRect)+CELLSIZE/2,G.Bottom(boardRect)-2*CELLSIZE, CELLSIZE*5, 2*CELLSIZE);
           
        // "edit" rectangle, available in reviewers to switch to puzzle mode
        G.SetRect(editRect, G.Right(doneRect)+CELLSIZE,G.Top(doneRect),G.Width( doneRect),G.Height(doneRect));
        
        G.SetRect(bagRect, G.Right(editRect)+CELLSIZE,G.Top(editRect)-CELLSIZE, CELLSIZE*5,CELLSIZE*5);
               
        G.SetRect(repRect,G.Left( doneRect),G.Top( doneRect)-CELLSIZE*2,CELLSIZE*12,CELLSIZE*2);
      
        positionTheChat(chatRect,Color.white,Color.white);
        generalRefresh();
    }
    
    private void DrawBag(Graphics gc,HitPoint hitpoint)
    {	Rectangle bag = bagRect;
    	boolean can = b.LegalToHitBag();
    	int wid = G.Width(bag)/2;
    	if(b.bag.drawChip(gc, this,
    			FrogPiece.getChip(FrogPiece.BAG_INDEX), can?hitpoint:null,
    			G.Width(bag),G.Left(bag)+wid,G.Top(bag)+G.Height(bag)/2,""+b.bag.height()))
    	{
    		hitpoint.arrow = b.pickedObject==null ? StockArt.UpArrow : StockArt.DownArrow;
    		hitpoint.awidth = wid/2;
    		hitpoint.hitObject = b.bag;
		}
    }


	// draw a box of spare chips. Notice if any are being pointed at.  Highlight those that are.
    private void DrawChipPool(Graphics gc, FrogState state, int player,HitPoint highlight)
    {	
    	Rectangle chip = chipRect[player];
    	Rectangle hand_r = handRect[player];
    	FrogCell hand[] = b.hand[player];
    	
    	FrogPiece disk = FrogPiece.getChip(FrogPiece.DISC_OFFSET+player);
    	// draw a sample chip to establish the player's color
    	disk.drawChip(gc,this,G.Width(chip),G.Left(chip)+2*G.Width(chip)/3,G.Top(chip)+G.Height(chip)/3,null);
    	
    	int wid = G.Width(hand_r)/2;
    	int xp = G.Left(hand_r)+wid/2;
    	int yp = G.Top(hand_r)+G.Height(hand_r)/2;
    	
    	for(int i=0;i<hand.length;i++)
    	{	FrogCell c = hand[i];
    		boolean can = b.LegalToHitChips(c,player);
    		if(c.drawChip(gc,this,c.topChip(),can?highlight:null,wid,xp,yp,null))
    		{	highlight.arrow = b.pickedObject==null ? StockArt.UpArrow : StockArt.DownArrow;
    			highlight.awidth = wid/2;
    			highlight.hitObject = c;
    		}
    		xp += wid;
    	}
    	
    }

    public void drawSprite(Graphics g,int idx,int xp,int yp)
    {	boolean inboard = boardRect.contains(xp,yp);
       	int cellS = inboard? (int)(b.CELLSIZE*2.2):CELLSIZE*3 ;
       	FrogPiece p = FrogPiece.getChip(idx);
       	p.drawChip(g,this,cellS,xp,yp,null);
    }
    

    /* draw the deep unchangable objects, including those that might be rather expensive
     * to draw.  This background layer is used as a backdrop to the rest of the activity.
     * in our cease, we draw the board and the chips on it. 
     * */
    public void drawFixedElements(Graphics gc)
    { boolean reviewBackground = reviewMode() && !mutable_game_record;
      G.setColor(gc,reviewBackground ? reviewModeBackground : boardBackgroundColor);
      G.tileImage(gc,textures[BACKGROUND_TILE_INDEX],fullRect, this);   
          G.tileImage(gc,textures[reviewBackground ? BROWN_FELT_INDEX:YELLOW_FELT_INDEX],
          		boardRect, this); 
      G.frameRect(gc,Color.black,boardRect);
     // draw a picture of the board. In this version we actually draw just the grid
      // to draw the cells, set gb.Drawing_Style in the board init method
      //gb.DrawGrid(gc, tbRect, use_grid, boardBackgroundColor, Color.blue, Color.blue,Color.black);

     }


    /* draw the board and the chips on it. */
      private void drawBoardElements(Graphics gc, FrogBoard gb, Rectangle tbRect,HitPoint ourTurnSelect,HitPoint anySelect)
     {	
         Rectangle oldClip = G.setClip(gc,tbRect);
     	 HitPoint mo = dragPoint;
    	 boolean canHitAny = G.pointInRect(anySelect,tbRect);
     	 boolean canHit = G.pointInRect(ourTurnSelect,tbRect);
 
     	 boolean draggingBoard = canHitAny && (mo!=null) && (mo.hitCode==FrogId.InvisibleDragBoard);
         if(draggingBoard)
      	{	double center_x = (board_center_x*G.Width(tbRect))+(G.Left(anySelect)-G.Left(mo))*12;
      	    double center_y = (board_center_y*G.Height(tbRect))-(G.Top(anySelect)-G.Top(mo))*12;
      	    board_center_x = center_x / G.Width(tbRect);
      	    board_center_y = center_y / G.Height(tbRect);
      	    G.SetTop(mo, G.Top(anySelect));
      	    G.SetLeft(mo, G.Left(anySelect));
      	    repaint(20);
      	}
      	
      	//
        // now draw the contents of the board and anything it is pointing at
        //
    	 Hashtable<FrogCell,FrogCell> dests = gb.getDests();

          FrogCell sourceCell = gb.sourceCell();
          FrogCell destCell = gb.destCell();
          int cellSize = (int)gb.CELLSIZE*2;
     	  Point empty = gb.emptyColumn();	// get an empty col/row to start the display
        // precalculate the spanning size of the board.
          int ncols = gb.ncols;
          //System.out.println("cs "+cs/CELLSIZE+ " "+cs+" "+CELLSIZE);
          if(ourTurnSelect!=null) {  ourTurnSelect.awidth = cellSize; }
          for (int col0 = ncols-1; col0 >=0 ; col0--)
          {	int col = (col0+G.Left(empty))%ncols;
             char thiscol = (char) ('A' + col);
             int lastincol = gb.nInCol[col];
             for (int thisrow0 = lastincol-1;
               	   thisrow0 >= 0; 
               	   thisrow0--) // start at row 1 (0 is the grid) 
              { //where we draw the grid
              int dispRow = (thisrow0+G.Top(empty))%lastincol+1 + gb.firstRowInCol[col];
              Point cp = gb.cellToXY(thiscol,dispRow,tbRect);	// calculate xy wrapped
              int xpos = G.Left(cp);
              int ypos = G.Top(cp);
                
                  {
               	  FrogCell ccell = gb.getCell(thiscol,dispRow);
                  boolean isADest = dests.get(ccell)!=null;
                  //boolean isASource = (ccell==sourceCell)||(ccell==destCell) || (sources.get(ccell)!=null);
                  boolean canHitThis = canHit && gb.LegalToHitBoard(ccell);
                  String labl = "";
                  if( debug && !use_grid) { labl+=""+ccell.col+ccell.row; }
                  if(ccell.drawChip(gc,this,ccell.topChip(),canHitThis?ourTurnSelect:null,cellSize,xpos,ypos,labl))
                  {	 //if(gc!=null) { gc.drawOval(xpos-cellSize/2,ypos-cellSize/2,cellSize,cellSize); }
                      boolean isEmpty = ccell.topChip()==null;
                      ourTurnSelect.awidth = CELLSIZE*2;
                      ourTurnSelect.hitCode = isEmpty?FrogId.EmptyBoard:FrogId.BoardLocation;
                      ourTurnSelect.arrow = isEmpty?StockArt.DownArrow:StockArt.UpArrow;
                      canHit = canHitAny = false;
                  }
                  if (gc != null)
                  {
                      if((sourceCell==ccell)||(destCell==ccell))
                      {
                    	  StockArt.Dot.drawChip(gc,this,cellSize/2+1,xpos,ypos,null);  
                      }

                 if(isADest)
                  	{
                  	StockArt.SmallO.drawChip(gc,this,CELLSIZE*3,xpos,ypos,labl);

                  	}
                  }}
              }
          }
        
   		if(canHitAny && !G.pointInRect(anySelect,vcrRect) && ((mo==null)||draggingBoard))
      	{ //let him drag anywhere, just don't annoy with the hand icon.
      		anySelect.hitCode=FrogId.InvisibleDragBoard;
      		anySelect.dragging = anySelect.down;
      	}
   		G.setClip(gc,oldClip);
      }


    //
    // draw the board and things on it.  If gc!=null then actually 
    // draw, otherwise just notice if the highlight should be on
    //
    public void redrawBoard(Graphics gc, HitPoint selectPos)
    {  FrogBoard gb = (FrogBoard)disB(gc);
       int nPlayers = gb.nPlayers();
       boolean moving = (getMovingObject()>=0);
       HitPoint ourTurnSelect = OurMove() ? selectPos : null;
       HitPoint buttonSelect = moving?null:ourTurnSelect;
       HitPoint nonDraggingSelect = (moving && !reviewMode()) ? null : selectPos;
       FrogState state = b.getState();

        redrawGameLog(gc, nonDraggingSelect, logRect, Color.black,logrectHighlightColor,gameLogBoldFont,gameLogFont);
        drawBoardElements(gc, gb, boardRect, ourTurnSelect,nonDraggingSelect);
        for(int i=0;i<nPlayers;i++)
        {
        DrawChipPool(gc,state,i,ourTurnSelect);
        }
        
        DrawBag(gc,ourTurnSelect);
        
        zoomRect.draw(gc,nonDraggingSelect);
        DrawRepRect(gc,b.Digest(),repRect);
        G.setFont(gc,standardBoldFont);
		if (state != FrogState.PUZZLE_STATE)
        {
             if (G.handleRoundButton(gc, doneRect, 
            		(b.DoneState() ? buttonSelect : null), s.get(DoneAction),
                    HighlightColor, rackBackGroundColor))
            {	// always display the done button, but only make it active in
            	// the appropriate states
            	buttonSelect.hitCode = DefaultId.HitDoneButton;
            }
            
            if(allowed_to_edit)
            {
            if (G.handleRoundButton(gc, editRect, buttonSelect, s.get(EditAction),
                    HighlightColor, rackBackGroundColor))
            	{
            	buttonSelect.hitCode = DefaultId.HitEditButton;
            	}
            }
        }

		drawPlayerStuff(gc,(state==FrogState.PUZZLE_STATE),moving?null:selectPos,
				HighlightColor, rackBackGroundColor);
		


        standardGameMessage(gc,
            		state==FrogState.GAMEOVER_STATE?gameOverMessage():s.get(state.getDescription()),
            				state!=FrogState.PUZZLE_STATE,
            				gb.whoseTurn,
            				stateRect);
        goalAndProgressMessage(gc,selectPos,s.get("Connect all your frogs (at least 7) in one cluster"),progressRect, goalRect);
        
        drawVcrGroup(nonDraggingSelect, gc, HighlightColor, vcrButtonColor);

    }


    /**
     * Execute a move by the other player, or as a result of local mouse activity,
     * or retrieved from the move history, or replayed form a stored game. 
     * @param m the parameter is a commonMove so the superclass commonCanvas can
     * request execution of moves in a generic way.
     * @return true if all went well.  Normally G.Error would be called if anything went
     * seriously wrong.
     */
     public boolean Execute(commonMove m,replayMode replay)
    {
 
        if(b.getState()==FrogState.PUZZLE_STATE)
    	{   m.setSliderNumString("--");
    		switch(m.op)
        	{
        	case MOVE_PICK: 
        	case MOVE_PICKB: 
        		break;
    		case MOVE_DROPB:
    			//this is used in the aux_slider code 
    			lastDropped = b.pickedObject;
				//$FALL-THROUGH$
			default:
    			m.setLineBreak(true);
        	}
    	}
 
        handleExecute(b,m,replay);
        if(replay!=replayMode.Replay) { playSounds((FrogMovespec)m); }
         return (true);
    }
     void playSounds(FrogMovespec mm)
     {
    	 switch(mm.op)
    	 {
    	 case MOVE_MOVE:
    		 playASoundClip(light_drop,100);
    		 //$FALL-THROUGH$
		 case MOVE_DROPB:
    	 case MOVE_PICKB:
    	 case MOVE_PICK:
    	 case MOVE_DROP:
    		 playASoundClip(light_drop,200);
    		 break;
    	 default: break;
    	 }
     }
/**
 * parse a move specifier on behalf of the current player.  This is called by the 
 * "game" object when it receives a move from the other player.  Note that it may
 * be called while we are in review mode, so the current state of the board should
 * not be considered.
 */
    public commonMove ParseNewMove(String st)
    {
        return (new FrogMovespec(st, -1));
    }
   

/**
 * the preferred mouse gesture style is to let the user "pick up" objects
 * by simply clicking on them, but we also allow him to click and drag. 
 * StartDragging is called when he has done this.
 */
    public void StartDragging(HitPoint hp)
    {
        int mo = b.movingObjectIndex();
        
        if ((mo < 0) && (hp.hitCode instanceof FrogId))// not dragging anything yet, so maybe start
        {
       	FrogId hitObject = (FrogId) hp.hitCode;
		FrogCell cell = (FrogCell)hp.hitObject;
		FrogPiece bug = (cell==null) ? null : cell.topChip();
		switch(hitObject)
	    {
	    default: break;
	    case InvisibleDragBoard:
        	if(b.moveNumber>=1)
        	{   hp.dragging=true;
          	}
			//$FALL-THROUGH$
		case ZoomSlider:
	    case BoardLocation:
	    	if(bug!=null)
	    	{
	    	PerformAndTransmit("Pickb "+cell.col+" "+cell.row);
	    	}
	    	break;
        }

        if (b.movingObjectIndex() >= 0)
	        {	// if we got something started, inform the mouse handler
	            hp.dragging = true;
	        } 
        }
    }

	/** 
	 * this is called on "mouse up".  We may have been just clicking
	 * on something, or we may have just finished a click-drag-release.
	 * We're guaranteed just one mouse up, no bounces.
	 */
    public void StopDragging(HitPoint hp)
    {
        CellId id = hp.hitCode;
        if(!(id instanceof FrogId)) {  missedOneClick = performStandardActions(hp,missedOneClick);}
    	else {
    	missedOneClick = false;
    	FrogId hitObject = (FrogId)hp.hitCode;
        FrogState state = b.getState();
		FrogCell cell = (FrogCell)hp.hitObject;
		FrogPiece bug = (cell==null) ? null : cell.topChip();
       	
		
		switch (hitObject)
        {
        default:
        	if (performStandardButtons(hitObject)) {}
        	else if (performVcrButton(hitObject, hp)) {}	// handle anything in the vcr group
            else
            {
            	throw G.Error("Hit Unknown object " + hitObject);
            }
        	break;
        case Frog_Bag:
        case Frog_Hand0:
        case Frog_Hand1:
        case Frog_Hand2:
        case Frog_Hand3:
        {
        	int pl = hitObject.handNum();
        	if(b.pickedObject!=null) 
        	{ PerformAndTransmit("Drop "+pl+" "+cell.row);
        	}
        	else
        	{ PerformAndTransmit("Pick "+pl+" "+cell.row);
        	}
        }
        	break;
        case ZoomSlider:
        case InvisibleDragBoard:
        	break;
        case EmptyBoard:
        case BoardLocation:	// we hit an occupied part of the board 
			switch(state)
			{
			default: throw G.Error("Not expecting drop on filled board in state "+state);
			case CONFIRM_STATE:
			case PLAY_STATE:
			case MOVE_FROG_STATE:
			case PUZZLE_STATE:
			{	if(cell!=null)
				{
				int obj = b.movingObjectIndex();
				if(obj>=0)
				{ PerformAndTransmit("Dropb "+cell.col+" "+cell.row);
				}
				else if(bug!=null)
				{
				PerformAndTransmit( "Pickb "+cell.col+" "+cell.row);
				}
				}
				break;
			}}
			break;
			
        }
        }

        repaint(20);
    }

    /** this is the place where the canvas is actually repainted.  We get here
     * from the event loop, not from the normal canvas repaint request.
     */
    public void drawCanvas(Graphics offGC, boolean complete,HitPoint hp)
    {
    	 
      	b.SetDisplayParameters(zoomRect.value,1.0,board_center_x,board_center_y,30.0); // shrink a little and rotate 30 degrees
     	b.SetDisplayRectangle(boardRect);

     	drawFixedElements(offGC,complete);
   	
    	// draw the board contents and changing elements.
        redrawBoard(offGC,hp);
        //      draw clocks, sprites, and other ephemera
        drawClocksAndMice(offGC, null);
        DrawTileSprite(offGC,hp); //draw the floating tile, if present
        DrawArrow(offGC,hp);
        drawSprites(offGC);     
    }
    
    // return what will be the init type for the game
    public String gameType() { return(b.gametype+" "+b.randomKey+" "+b.nPlayers()); }
    
    public String sgfGameType() { return(Frogs_SGF); }
    public void performHistoryInitialization(StringTokenizer his)
    {   //the initialization sequence
    	String token = his.nextToken();
    	int ran = G.IntToken(his);
    	int np = G.IntToken(his);
        b.doInit(token,ran,np);
        adjustPlayers(np);

     }



    public BoardProtocol getBoard()   {    return (b);   }
    

    /** factory method to create a robot */
    public SimpleRobotProtocol newRobotPlayer() { return(new FrogPlay()); }

    public boolean replayStandardProps(String name,String value)
    {	nextIntCompatabilityKludge(b,name,value);
    	return(super.replayStandardProps(name,value));
    }


    /** replay a move specified in SGF format.  
     * this is mostly standard stuff, but the key is to recognise
     * the elements that we generated in sgf_save
     */
    public void ReplayMove(sgf_node no)
    {
        String comments = "";
        sgf_property prop = no.properties;

        while (prop != null)
        {
            String name = prop.getName();
            String value = (String) prop.getValue();

            //System.out.println("prop " + name + " " + value);
            if (setup_property.equals(name))
            {	StringTokenizer tok = new StringTokenizer(value);
            	String key = tok.nextToken();
            	int ran = G.IntToken(tok);
            	int np = G.IntToken(tok);
                b.doInit(key,ran,np);
             }
            else if (name.equals(comment_property))
            {
                comments += value;
            }
            else if (name.equals(game_property))
            {
                if (!(value.toLowerCase().equals("frogs") || value.equals(Frogs_SGF)))
                {
                	throw G.Error("game type " + value + " is not this game");
                }
            }
            else if (parseVersionCommand(name,value,2)) {}
            else if (parsePlayerCommand(name,value)) {}
            else
            {
            	replayStandardProps(name,value);
            }

            prop = prop.next;
        }

        if (!"".equals(comments))
        {
            setComment(comments);
        }
    }
}


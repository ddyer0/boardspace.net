package volcano;


import java.awt.*;

import online.common.*;
import online.game.*;
import online.game.sgf.*;

import java.util.Hashtable;
import java.util.StringTokenizer;

import lib.G;

/**
 * 
 * Change History
 *
 * Feb 2008 initial work. 
 *
 * This code is derived from the "HexGameViewer" and other viewer classes.  Refer to the
 * documentation there for overall structure notes.
 * 
 * TODO: change the replay animation to show the volcano cap in place instead of in the corner
*/
public class VolcanoGameViewer extends commonCanvas 
	implements ViewerProtocol, VolcanoConstants, sgf_names
{	// TODO: get the random seed into the game records and history strings
     /**
	 * 
	 */
	static final long serialVersionUID = 1L;
	// colors
    private Color reviewModeBackground = new Color(220,165,200);
    private Color HighlightColor = new Color(0.2f, 0.95f, 0.75f);
    private Color rackBackGroundColor = new Color(174,155,150);
    private Color boardBackgroundColor = new Color(220,165,155);
    private Color vcrButtonColor = new Color(0.7f, 0.7f, 0.75f);
    // images
    private static Image[] images = null; // images of black and white gobblets and board
    private static Image[] textures = null;// background textures
    // private state
    private VolcanoBoard b = null; 	// the board from which we are displaying
    private int CELLSIZE; 			// size of the layout cell.  
    private static int SUBCELL = 4;	// number of cells in a square
    private int SQUARESIZE;			// size of a board square
    
    // addRect is a service provided by commonCanvas, which supports a mode
    // to visualize the layout during development.  Look for "show rectangles"
    // in the options menu.
    // private Rectangle fullRect = addRect("fullRect"); //the whole viewer area
    //private Rectangle boardRect = addRect("boardRect"); //the actual board, normally at the left edge
    private Rectangle logRect = addRect("logRect"); //the game log, normally off the the right
    private Rectangle stateRect = addRect("stateRect");
    private Rectangle doneRect = addRect("doneRect");
    private Rectangle editRect = addRect("editRect");
    private Rectangle goalRect = addRect("goalRect");
    private Rectangle progressRect = addRect("progressRect");
    private Rectangle firstPlayerChipRect = addRect("firstPlayerChipRect");
    private Rectangle secondPlayerChipRect = addRect("secondPlayerChipRect");
    private Rectangle firstPlayerScoreRect = addRect("firstPlayerScoreRect");
    private Rectangle secondPlayerScoreRect = addRect("secondPlayerScoreRect");
    private Rectangle liftRect = addRect("liftRect");
    private Rectangle repRect = addRect("repRect");

    private boolean lifted=false;
    

    public void preloadImages()
    {	
    	if (textures == null)
    	{ // note that for this to work correctly, the images and masks must be the same size.  
      // Refer to http://www.andromeda.com/people/ddyer/java/imagedemo/transparent.html
        Pyramid.preloadImages(this,ImageDir);
        images = load_images(ImageDir, ImageFileNames, load_images(ImageDir, ImageFileNames,"-mask")); // load the main images
        textures = load_images(ImageDir,TextureNames);
    	}
    }


	/**
	 * 
	 * this is the real instance intialization, performed only once.
	 * info contains all the goodies from the environment.
	 * */
    public void init(exHashtable info)
    {
        super.init(info);
        int randomKey = gameInfo.getInt(exHashtable.RANDOMSEED,-1);

        b = new VolcanoBoard(randomKey,info.getString(exHashtable.GAMETYPE, "volcano"));
        doInit(false);
        
     }

    /** 
     *  used when starting up or replaying and also when loading a new game 
     *  */
    public void doInit(boolean preserve_history)
    {	boolean hexB = b.hexBoard;
        //System.out.println(myplayer.trueName + " doinit");
        super.doInit(preserve_history);				// let commonViewer do it's things
        b.doInit(b.gametype,b.randomKey);				// initialize the board
        if(b.hexBoard!=hexB) { resetBounds(); }
        if(!preserve_history)
    	{ PerformAndTransmit(reviewOnly?"Edit":"Start P0", false,replayMode.Live);
    	}
   }


    public int setLocalBoundsSize(int width,int height,boolean wideMode,boolean tallMode)
    {	
    	// the overall layout is based on a nominal board size of 10x10
    	// but the actual board may differ.  This makes the proportions 
    	// of the other elements reasonable and consistent, no matter how
    	// many squares the board has.
        int chatHeight = selectChatHeight(height);
        boolean noChat = chatHeight==0;
    	int ncols = b.getRealBoard().lastColumn()-'@';
        int sncols = (ncols*SUBCELL)+(tallMode ? 7 : (wideMode ? 31 : 18)); // more cells wide to allow for the aux displays
        int snrows = ncols*SUBCELL+(tallMode ? 20 : (wideMode|!noChat) ? 1 : 5);  
        int cellw = width / sncols;
        int cellh = (height-(wideMode ? 0 : chatHeight)) / snrows;
        CELLSIZE = Math.max(1,Math.min(cellw, cellh)); //cell size appropriate for the aspect ration of the canvas
        return(CELLSIZE);
    }
    public void createPlayerGroup(boolean tallMode,commonPlayer p0,int x,int y,Rectangle chipRect,Rectangle scoreRect)
    {
    	Rectangle picRect = p0.picRect;
    	Rectangle nameRect = p0.nameRect;
    	Rectangle p0time = p0.timeRect;
    	Rectangle p0alt = p0.extraTimeRect;
        Rectangle p0anim = p0.animRect;
        Rectangle box = p0.playerBox;
    	boolean hexBoard = b.hexBoard;
       
        G.SetRect(chipRect,x,y,  SQUARESIZE*3-(hexBoard?0:2*CELLSIZE),SQUARESIZE);
        G.SetRect(scoreRect,
        		tallMode ? G.Right(chipRect) : G.Right(chipRect)-	CELLSIZE*2, 
        		tallMode ? G.Top(chipRect) : G.Bottom(chipRect),CELLSIZE*2,CELLSIZE*2);
        
  
        //first player name
        G.SetRect(nameRect,G.Right(scoreRect)+CELLSIZE,G.Top(chipRect),
        		CELLSIZE * 5,CELLSIZE);

        
        // time display for first player
        G.SetRect(p0time, 
        		tallMode ? G.Right(nameRect) : G.Left(nameRect),
        		tallMode ? G.Top(nameRect) : G.Bottom(nameRect),
        		CELLSIZE * 3,CELLSIZE);
        G.AlignLeft(p0alt,G.Bottom(p0time), p0time);
        
        // first player "i'm alive" animation ball
        G.SetRect(p0anim,
        		tallMode ? G.Left(p0time) : G.Right(p0time),
        		tallMode ? G.Bottom(p0alt) : G.Top(p0time),
        		G.Height(p0time),G.Height(p0time));
 
        // first player portrait
        G.SetRect(picRect,
        		tallMode ? G.Right(p0alt) : G.Left(p0alt),
        		tallMode ? y : G.Bottom(p0alt),
        		CELLSIZE * 5,CELLSIZE * 5);

        G.SetRect(box,x,y,
        		G.Right(picRect)-x,G.Bottom(picRect)-y);
	
    }
    public void setLocalBoundsWT(int x, int y, int width, int height,boolean wideMode,boolean tallMode)
    {   
    	int ideal_logwidth = CELLSIZE * 16;
    	int ncols = b.getRealBoard().lastColumn()-'@';
        int chatHeight = selectChatHeight(height);
        boolean noChat = chatHeight==0;
    	boolean hexBoard = b.hexBoard;
    	int separation=2;

        SQUARESIZE = CELLSIZE*SUBCELL;
        G.SetRect(fullRect,x,y,width,height);

        // game log.  This is generally off to the right, and it's ok if it's not
        // completely visible in all configurations.
        
        G.SetRect(boardRect,x,wideMode ? y : chatHeight-CELLSIZE,SQUARESIZE * ncols ,SQUARESIZE * (ncols));

        G.SetRect(stateRect,G.Left( boardRect) + CELLSIZE,(wideMode ? y : chatHeight)+CELLSIZE/3,G.Width(boardRect)- CELLSIZE, CELLSIZE);

        
        commonPlayer pl0 = getPlayerOrTemp(0);
        commonPlayer pl1 = getPlayerOrTemp(1);
        createPlayerGroup(tallMode,pl0,
        		tallMode ? G.Left(boardRect)+CELLSIZE : G.Right(boardRect)-CELLSIZE/2,
        		tallMode ? G.Bottom(boardRect)+CELLSIZE*2 : (wideMode ? G.Top(boardRect) : chatHeight)+CELLSIZE,
        		firstPlayerChipRect,firstPlayerScoreRect);
 
        int pbox = G.Right(pl0.playerBox);
        int logH = wideMode|noChat ? CELLSIZE*5 : chatHeight;
        int chatY = wideMode ? logH + CELLSIZE : y;
        G.SetRect(chatRect, 
        		(wideMode ? pbox : x)+CELLSIZE/2,
        		chatY,
        		tallMode ? width-CELLSIZE : wideMode ? width-pbox-CELLSIZE : Math.max(G.Width(boardRect),width-ideal_logwidth-CELLSIZE),
        		wideMode ? height-chatY-CELLSIZE/2 : chatHeight);
        int logX = tallMode ? G.Left(boardRect)+CELLSIZE : (wideMode ? pbox : G.Right( chatRect))+CELLSIZE/3 ;
    
        // "edit" rectangle, available in reviewers to switch to puzzle mode
        G.SetRect(editRect, 
        		G.Right(boardRect)+CELLSIZE*separation, 
        		tallMode ? G.Top(boardRect)+G.Height(boardRect)/3 : G.Bottom(firstPlayerChipRect)+CELLSIZE,
        		CELLSIZE*4, 3*CELLSIZE/2);
        int liftW = CELLSIZE*(hexBoard?3:2);
        G.SetRect(liftRect, G.Right(boardRect),G.Bottom(boardRect)-CELLSIZE*(hexBoard?4:3), liftW,liftW);

        G.SetRect(goalRect,G.Left( boardRect)+2*SQUARESIZE,G.Bottom(boardRect)-CELLSIZE*2,G.Width(boardRect)-2*SQUARESIZE, CELLSIZE);  
        
        setProgressRect(progressRect,goalRect);

        
        // "done" rectangle, should always be visible, but only active when a move is complete.
        G.SetRect(doneRect,G.Left( editRect), G.Bottom(editRect)+3*CELLSIZE/2,G.Width( editRect),G.Height( editRect));
        
        createPlayerGroup(tallMode,pl1,
        		G.Left( firstPlayerChipRect), 
        		tallMode ? G.Bottom(pl0.playerBox)+CELLSIZE : G.Bottom(doneRect)+3*CELLSIZE/2,secondPlayerChipRect,secondPlayerScoreRect);

        int logY = tallMode
        			? G.Bottom(pl1.playerBox)+CELLSIZE/2 
        			: wideMode 
        				? y 
        				: noChat ? G.Bottom(pl1.playerBox)+CELLSIZE/2 : G.Top( chatRect);
        G.SetRect(logRect,logX,
        		logY,
        		Math.min(ideal_logwidth,width-logX),Math.min(height-logY-CELLSIZE/2,
        		tallMode|(noChat&!wideMode) ? height-logY-CELLSIZE/2 : logH));

        G.SetRect(repRect, G.Left(goalRect)+SQUARESIZE/2,G.Top( goalRect)+CELLSIZE,G.Width(goalRect)-SQUARESIZE,G.Height( goalRect));

		//this sets up the "vcr cluster" of forward and back controls.
        SetupVcrRects(G.Left(boardRect)+CELLSIZE/2,G.Bottom(boardRect)-3*CELLSIZE,
            CELLSIZE * 8,
            (hexBoard?4:3) * CELLSIZE);
        positionTheChat(chatRect,Color.white,Color.white);
        generalRefresh();
    }
    

   private int liftSteps=0;
   private int rotateSteps=0;
   private int initial_lift_x = 0;
   private void DrawLiftRect(Graphics gc,HitPoint highlight)
    {	
		if(lifted || (liftSteps>0) || (rotateSteps>0)) { repaint(20); }
		liftSteps = lifted ? Math.min(++liftSteps,12) : Math.max(--liftSteps,0);
		if((liftSteps==12)&&(highlight!=null)&&lifted)
		{
		if(!highlight.down) {lifted=false; }
		int dif = (G.Left(highlight)-initial_lift_x)/3;
		dif = Math.max(-4,Math.min(4,dif));
		if(dif!=0)
		{ rotateSteps = Math.max(0,Math.min(30,rotateSteps+dif));
		  initial_lift_x=G.Left(highlight);
		}}
		else { rotateSteps = Math.max(0,rotateSteps-1); }
		
		if(G.pointInRect(highlight,liftRect))
    	{	
    		highlight.hitCode = VolcanoId.LiftRect;
    		highlight.spriteRect = liftRect;
    		highlight.spriteColor = Color.red;
       		if(!lifted) { initial_lift_x = G.Left(highlight); }
       	   	highlight.dragging = lifted = highlight.down;
    	}
		if(gc!=null) 
		{ G.centerImage(gc,textures[LIFT_ICON_INDEX],liftRect,this); 
		  G.frameRect(gc,Color.black,liftRect);
		}
    }
	// draw a box of spare pyramids. Notice if any are being pointed at.  Highlight those that are.
    private void DrawCommonChipPool(Graphics gc, VolcanoBoard bd,int forPlayer, Rectangle r, Rectangle sr,int player,  HitPoint highlight)
    {	VolcanoCell captures = bd.captures[forPlayer];
    	if((highlight!=null)&&(highlight.hitObject!=null)) { highlight=null; }
        boolean canhit = G.pointInRect(highlight, r) && bd.LegalToHitChips(forPlayer) ;
        boolean canDrop = (getMovingObject()>=0);
        //set up cells as a rack of pyramids sorted by color and size
        VolcanoCell cells[] = new VolcanoCell[Pyramid.nColors];
        for(int i=0;i<cells.length;i++) { cells[i]=new VolcanoCell(null,i,captures.rackLocation()); }
        // sort the captives into the cells
        for(int i=0;i<=captures.chipIndex;i++)
        {	Pyramid p = captures.chipAtIndex(i);
        	cells[p.colorIndex].addPyramidInPosition(p);
        }
        int cellW = G.Width(r)/bd.colorsToWin;
        int e_y = G.centerY(r);
        if(gc!=null) {  G.frameRect(gc,Color.black,r);  G.frameRect(gc,Color.black,sr);}
        for(int cx = 0,e_x = G.Left(r)+cellW/2;
        	 cx<cells.length;
        	 cx++)
        {	VolcanoCell c = cells[cx];
        	if(c.drawStack(gc,canhit?highlight:null,e_x,e_y,this,liftSteps,SQUARESIZE,yscale,null))
        	{
        		highlight.arrow = canDrop ? StockArt.DownArrow : StockArt.UpArrow;
        		highlight.awidth = SQUARESIZE/4;
        		highlight.spriteColor = Color.red;
        	}
        	if(c.chipIndex>=0)
        		{e_x = e_x + cellW;
        		}
        }

        int score = bd.scoreForPlayer(forPlayer);
        if(gc!=null)
        {	G.setFont(gc,standardPlainFont);
        	G.Text(gc,true,G.Left(r),G.Bottom(r)-20,G.Width(r),20,Color.blue,null,
        		"Solid Nests: "+bd.capture_size[0]+" Mixed Nests: "+bd.capture_size[1]+" Other: "+bd.capture_size[2]);
        	G.setFont(gc,largeBoldFont);
        	G.Text(gc,true,sr,0,Color.blue,null,""+score);
        	G.setFont(gc,standardPlainFont);
        }
        
     }
    public void drawSprite(Graphics g,int idx,int xp,int yp)
    {	Pyramid.getPyramid(idx).drawChip(g,this,SQUARESIZE,xp,yp,null);
    }



    /* draw the deep unchangable objects, including those that might be rather expensive
     * to draw.  This background layer is used as a backdrop to the rest of the activity.
     * in our cease, we draw the board and the chips on it. 
     * */
    public void drawFixedElements(Graphics gc)
    {boolean review = reviewMode() && !mutable_game_record;
      // erase
      G.setColor(gc,review ? reviewModeBackground : boardBackgroundColor);
      //G.fillRect(gc, fullRect);
      G.tileImage(gc,textures[BACKGROUND_TILE_INDEX], fullRect, this);   
      if(review)
      {	 
        G.tileImage(gc,textures[BACKGROUND_REVIEW_INDEX],boardRect, this);   
      }
       
      // for us, the board is one large graphic, for which the target points
      // are carefully matched with the abstract grid
      G.centerImage(gc,images[b.hexBoard?HBOARD_INDEX:BOARD_INDEX], boardRect,this);
	    {	// good for board-skew : gb.SetDisplayParameters(0.7,0.8,  0.0,0.00,  2.3, .15, 0.25);
	    	// good for board-skew2 gb.SetDisplayParameters(0.67,0.72,  0.0,0.00,  14.5, .22, 0.25);
	    	// good for board-skew3 gb.SetDisplayParameters(0.54,0.80,  0.0,-0.30,  7.0, .250, 0.32);
	    	double lr = 30.0*rotateSteps/12;
	    	if(b.hexBoard)
	    		{ b.getRealBoard().SetDisplayParameters(0.69,0.75,  .25,1.0,  19+lr,
	    				.29, 0.15,0.0);
	    		}
	    	else
	    	{ // square geometry board
	    	b.getRealBoard().SetDisplayParameters(0.6,0.88,  0.20,0.50,  20.0+lr, .205, 0.20,0.0);
	    	}
	    	}
	  b.getRealBoard().SetDisplayRectangle(boardRect);
	      
      b.getRealBoard().DrawGrid(gc,boardRect,use_grid,Color.white,Color.black,Color.blue,Color.yellow);
    }
 	double yscale = 1/15.0;

   /* draw the board and the chips on it. */
    private void drawBoardElements(Graphics gc, VolcanoBoard gb, Rectangle brect, HitPoint highlight)
    {	gBoard<VolcanoCell> rb = gb.getRealBoard();
      	Hashtable<VolcanoCell,VolcanoCell> dests = gb.getMoveDests();
     	Hashtable<VolcanoCell,VolcanoCell> caps = gb.getCaptures();
     	int dotsize = Math.max(2,SQUARESIZE/15);
     	//
        // now draw the contents of the board and anything it is pointing at
        //
     	
       	for (char thiscol = rb.lastColumn(),first=rb.firstColumn(); 
       			thiscol>=first; 
       			thiscol--)
         { //where we draw the grid
  	        for (int row = rb.lastRowInColumn(thiscol),frow=rb.firstRowInColumn(thiscol);
  	        	row>=frow; 
  	        	row--)	// back to front
        	{
            VolcanoCell cell = gb.getCell(thiscol,row);
            boolean isADest = dests.get(cell)!=null;
            boolean canHit = gb.LegalToHitBoard(cell);
            int ypos = G.Bottom(brect) - rb.cellToY(thiscol, row);
            int xpos = G.Left(brect) + rb.cellToX(thiscol, row);
            if(cell.drawStack(gc,canHit?highlight:null,xpos,ypos,this,liftSteps,SQUARESIZE,yscale,null))
            {
            highlight.arrow = (getMovingObject()>=0) ? StockArt.DownArrow : StockArt.UpArrow;
            highlight.awidth = SQUARESIZE/3;
            highlight.spriteColor = Color.red;
            }
 
            if(gc!=null)
            	{
            	if(isADest)
	        	{
	        		G.DrawAACircle(gc,xpos+dotsize,ypos,dotsize,Color.red,Color.gray,true);
	        	}
	            if(caps.get(cell)!=null)
	            { 	
	           	drawImage(gc,images[X_INDEX],SCALES[X_INDEX],xpos,ypos,SQUARESIZE,1.0,0.0,null,true);
	            }
	        	}
          }
  	        }

    }
    
    public void drawAuxControls(Graphics gc,HitPoint highlight)
    {  DrawLiftRect(gc,highlight); 
    }
    //
    // draw the board and things on it.  If gc!=null then actually 
    // draw, otherwise just notice if the highlight should be on
    //
    public void redrawBoard(Graphics gc, HitPoint highlight)
    {  VolcanoBoard gb = (VolcanoBoard) disB(gc);
      boolean ourTurn = OurMove();
      boolean moving = getMovingObject()>=0;
      HitPoint ot = ourTurn ? highlight : null;	// hit if our turn
      HitPoint select = moving?null:ot;	// hit if our turn and not dragging
      HitPoint ourSelect = (moving && !reviewMode()) ? null : highlight;	// hit if not dragging
       VolcanoState vstate = b.getState();
       redrawGameLog(gc, ourSelect, logRect, boardBackgroundColor);
       drawBoardElements(gc, gb, boardRect, ot);
       DrawCommonChipPool(gc,gb, FIRST_PLAYER_INDEX,firstPlayerChipRect, firstPlayerScoreRect,gb.whoseTurn,ot);
       DrawCommonChipPool(gc,gb, SECOND_PLAYER_INDEX,secondPlayerChipRect, secondPlayerScoreRect,gb.whoseTurn,ot);
       G.setFont(gc,standardBoldFont);
       drawPlayerStuff(gc,(vstate==VolcanoState.PUZZLE_STATE),ourSelect,
	   			HighlightColor, rackBackGroundColor);

		if (vstate != VolcanoState.PUZZLE_STATE)
        {
            if (G.handleRoundButton(gc, doneRect, 
            		(b.DoneState()? select : null), s.get(DoneAction),
                    HighlightColor, rackBackGroundColor))
            {	// always display the done button, but only make it active in
            	// the appropriate states
                select.hitCode = DefaultId.HitDoneButton;
            }
            if (allowed_to_edit)
            {
                    if (G.handleRoundButton(gc, editRect, select, s.get(EditAction),
                                HighlightColor, rackBackGroundColor))
                    {
                        select.hitCode = DefaultId.HitEditButton;
                    }

            }
         }
 
		standardGameMessage(gc,
            		vstate==VolcanoState.GAMEOVER_STATE?gameOverMessage():s.get(vstate.getDescription()),
            				vstate!=VolcanoState.PUZZLE_STATE,
            				gb.whoseTurn,
            				stateRect);
         goalAndProgressMessage(gc,ourSelect,
            		s.get("Capture the best combinations of all 5 colors"),progressRect,
             		goalRect);
        DrawRepRect(gc,b.Digest(),repRect);
        drawAuxControls(gc,ourSelect);
        drawVcrGroup(ourSelect, gc, HighlightColor, vcrButtonColor);

    }

    /**
     * Execute a move by the other player, or as a result of local mouse activity,
     * or retrieved from the move history, or replayed form a stored game. 
     * @param mm the parameter is a commonMove so the superclass commonCanvas can
     * request execution of moves in a generic way.
     * @return true if all went well.  Normally G.Error would be called if anything went
     * seriously wrong.
     */
     public boolean Execute(commonMove mm,replayMode replay)
    {	
        if(b.getState()==VolcanoState.PUZZLE_STATE)
    	{   mm.setSliderNumString("--");
    		switch(mm.op)
        	{
    		case MOVE_DROPB:
    			lastDropped = b.pickedObject;
				break;
			case MOVE_PICK: 
        	case MOVE_PICKB: 
        		break;
    		default:
    			mm.setLineBreak(true);
        	}
    	}
 
        handleExecute(b,mm,replay);
        
        if(replay!=replayMode.Replay) { playSounds((VolcanoMovespec)mm); }
 
        return (true);
    }
/**
 * parse a move specifier on behalf of the current player.  This is called by the 
 * "game" object when it receives a move from the other player.  Note that it may
 * be called while we are in review mode, so the current state of the board should
 * not be considered.
 */
    public commonMove ParseNewMove(String st)
    {
        return (new VolcanoMovespec(st, -1));
    }
    

private void playSounds(VolcanoMovespec m)
{
    // add the sound effects
    switch(m.op)
    {
    case MOVE_DROPB:
    case MOVE_BOARD_BOARD:
    	{ 
    	  int h = m.undoInfo%10+1;	// number of pyramids moved
    	  while(h-- > 0) { playASoundClip(light_drop,50); }
    	}
    	break;
    case MOVE_DROP:
    case MOVE_PICKB:
    case MOVE_PICK:
    	 playASoundClip(light_drop,50);
    	 break;
     default: break;
    }
	
}

 
/**
 * the preferred mouse gesture style is to let the user "pick up" objects
 * by simply clicking on them, but we also allow him to click and drag. 
 * StartDragging is called when he has done this.
 */
    public void StartDragging(HitPoint hp)
    {
        int mo = getMovingObject();
        if ((mo < 0)&&(hp.hitCode instanceof VolcanoId)) // not dragging anything yet, so maybe start
        {

        VolcanoId hitObject = (VolcanoId)hp.hitCode;
		VolcanoCell cell = (VolcanoCell)hp.hitObject;
		Pyramid chip = (cell==null) ? null : cell.topChip();
		if(chip!=null)
		{
	    switch(hitObject)
	    {
	    case LiftRect:
        case First_Player_Captures:
        case Second_Player_Captures:
        	PerformAndTransmit("Pick "+hitObject.shortName+" "+chip.colorIndex+" "+chip.sizeIndex);
        	break;
	    case BoardLocation:
	    	if(cell.chipIndex>0)
	    		{
	    		PerformAndTransmit("Pickb "+cell.col+" "+cell.row+" "+chip.colorIndex+" "+chip.sizeIndex);
	    		}
	    	break;
		default:
			break;
        }

        if (getMovingObject() >= 0)
        {	// if we got something started, inform the mouse handler
            hp.dragging = true;
        } }
        }
    }

	/** 
	 * this is called on "mouse up".  We may have been just clicking
	 * on something, or we may have just finished a click-drag-release.
	 * We're guaranteed just one mouse up, no bounces.
	 */
    public void StopDragging(HitPoint hp)
    {
        CellId id = hp.hitCode;
        if (performStandardButtons(id)) {}
    	else if (performVcrButton(id, hp)) {}
    	else if (id == DefaultId.HitNoWhere) { performReset(); }
    	else if(!(id instanceof VolcanoId)) {   missedOneClick = performStandardActions(hp,missedOneClick);}
    	else {
    		missedOneClick = false;
    		VolcanoId hitObject = (VolcanoId)hp.hitCode;
        VolcanoState state = b.getState();
		VolcanoCell cell = (VolcanoCell)hp.hitObject;
		Pyramid cup = (cell==null) ? null : cell.topChip();
        switch (hitObject)
        {
        default:
        	throw G.Error("Hit Unknown object " + hitObject);
         case LiftRect:
        	break;
         case BoardLocation:	// we hit the board 
			switch(state)
			{
			default: throw G.Error("Not expecting drop on filled board in state "+state);
			case CONFIRM_STATE:
			case PLAY_STATE:
			case PUZZLE_STATE:
				if(b.movingObjectIndex()>=0)
				{ if(cell!=null) { PerformAndTransmit("Dropb "+cell.col+" "+cell.row); }
				}
				else if(cup!=null)
				{
				PerformAndTransmit( "Pickb "+cell.col+" "+cell.row+" "+cup.colorIndex+" "+cup.sizeIndex);
				}
				break;
			}
			break;
			
        case First_Player_Captures:
        case Second_Player_Captures:
        	{
            int mov = b.movingObjectIndex();
            if(mov>=0) 
			{//if we're dragging a black chip around, drop it.
            	switch(state)
            	{
            	default: throw G.Error("can't drop on rack in state "+state);
                	case PLAY_STATE:
            		performReset();
            		break;

               	case PUZZLE_STATE:
                	String col = hitObject.shortName;
               		PerformAndTransmit("Drop "+col+" "+mov);
            		break;
            	}
			}
         	}
            break;
        }
        }
    }


    public String gameType() { return(b.gametype+" "+b.randomKey); }
    public String sgfGameType() { return(Volcano_SGF); }

    public void performHistoryInitialization(StringTokenizer his)
    {   //the initialization sequence
    	String token = his.nextToken();
    	long rk = G.LongToken(his);
        b.doInit(token,rk);
    }
    

    public BoardProtocol getBoard()   {    return (b);   }
    public SimpleRobotProtocol newRobotPlayer() { return(new VolcanoPlay()); }

    public boolean replayStandardProps(String name,String value)
    {	nextIntCompatabilityKludge(b,name,value,"Oct 25 2013");
    	return(super.replayStandardProps(name,value));
    }

    /** replay a move specified in SGF format.  
     * this is mostly standard stuff, but the key is to recognize
     * the elements that we generated in sgf_save
     */
    public void ReplayMove(sgf_node no)
    {
        String comments = "";
        sgf_property prop = no.properties;

        while (prop != null)
        {
            String name = prop.getName();
            String value = (String) prop.getValue();

            if (setup_property.equals(name))
            {	StringTokenizer tok = new StringTokenizer(value);
        		String gametype = tok.nextToken();
        		long rk = G.LongToken(tok);
                b.doInit(gametype,rk);
             }
            else if (name.equals(comment_property))
            {
                comments += value;
            }
            else if (name.equals(game_property))
            {
                if (!(value.equals(Volcano_SGF)))
                {
                	throw G.Error("game type " + value + " is not this game");
                }
            }
            else if (parseVersionCommand(name,value,2)) {}
            else if (parsePlayerCommand(name,value)) {}
            else
            {
                replayStandardProps(name,value);
            }

            prop = prop.next;
        }

        if (!"".equals(comments))
        {
            setComment(comments);
        }
    }
}


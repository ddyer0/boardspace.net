package dvonn;

import java.awt.*;
import javax.swing.JCheckBoxMenuItem;

import online.common.*;
import online.game.*;
import online.game.sgf.*;

import java.util.*;
import lib.G;




/**
 * 
 * Change History
 *
 * Feb 2008 initial work. 
 * Jan 2013 Changed moving object to a stack.  Added animation to robot and replay
 *
 * This code is derived from the "HexGameViewer" and other viewer classes.  Refer to the
 * documentation there for overall structure notes.
 * 
 */
public class DvonnViewer extends commonCanvas 
	implements ViewerProtocol, DvonnConstants, sgf_names
{	
    /**
	 * 
	 */
	static final long serialVersionUID = 1L;
	private Color reviewModeBackground = new Color(220,165,200);
    private Color HighlightColor = new Color(0.2f, 0.95f, 0.75f);
    private Color rackBackGroundColor = new Color(194,175,148);
    private Color boardBackgroundColor = new Color(220,165,155);
    private Color vcrButtonColor = new Color(0.7f, 0.7f, 0.75f);
    // images
    private static Image[] images = null; // images of black and white gobblets and board
    private static Image[] textures = null;// background textures
    // private state
    private DvonnBoard b = null; 	// the board from which we are displaying
    private int CELLSIZE; 			// size of the layout cell.  
    private static int SUBCELL = 4;	// number of cells in a square
    private int SQUARESIZE;			// size of a board square
    // addRect is a service provided by commonCanvas, which supports a mode
    // to visualize the layout during development.  Look for "show rectangles"
    // in the options menu.
    //private Rectangle fullRect = addRect("fullRect"); //the whole viewer area
    //private Rectangle boardRect = addRect("boardRect"); //the actual board, normally at the left edge
    private Rectangle logRect = addRect("logRect"); //the game log, normally off the the right
    private Rectangle stateRect = addRect("stateRect");
    private Rectangle firstPlayerScoreRect = addRect("firstPlayerScore");
    private Rectangle secondPlayerScoreRect = addRect("secondPlayerScore");
    private Rectangle doneRect = addRect("doneRect");
    private Rectangle editRect = addRect("editRect");
    private Rectangle goalRect = addRect("goalRect");
    private Rectangle progressRect = addRect("progressRect");
    private Rectangle liftRect = addRect("liftRect");
    private Rectangle firstPlayerRack = addRect("whiteRack");
    private Rectangle secondPlayerRack = addRect("blackRack");
    private Color ZoomColor = new Color(0.0f,0.0f,1.0f);
    private Color ZoomHighlightColor = new Color(150,195,166);
    private Rectangle reverseViewRect = addRect("reverse");
    private JCheckBoxMenuItem reverseOption = null;

    private boolean lifted=false;
    

    public void preloadImages()
    {	
    	if (textures == null)
    	{ // note that for this to work correctly, the images and masks must be the same size.  
    	  // Refer to http://www.andromeda.com/people/ddyer/java/imagedemo/transparent.html
    	DvonnChip.preloadImages(this,ImageDir);
        images = load_images(ImageDir, ImageFileNames, load_images(ImageDir, ImageFileNames,"-mask")); // load the main images
        textures = load_images(ImageDir,TextureNames);
    	}
    }
    public Slider sizeRect = null;


	/**
	 * 
	 * this is the real instance intialization, performed only once.
	 * info contains all the goodies from the environment.
	 * */
    public void init(exHashtable info)
    {
        super.init(info);
        int randomKey = gameInfo.getInt(exHashtable.RANDOMSEED,-1);
        labelFont = largeBoldFont;
        sizeRect = addSlider("zoomRect",s.get("Stack Height"),DvonnId.ZoomSlider);
        sizeRect.min=MIN_CHIP_SCALE;
        sizeRect.max=MAX_CHIP_SCALE;
        sizeRect.value=INITIAL_CHIP_SCALE;
        sizeRect.barColor=ZoomColor;
        sizeRect.highlightColor = ZoomHighlightColor;
 
        b = new DvonnBoard(randomKey,info.getString(exHashtable.GAMETYPE, "dvonn"));
        doInit(false);
        reverseOption = myFrame.addOption(s.get(ReverseView),b.reverse_y,deferredEvents);
        
     }

    /** 
     *  used when starting up or replaying and also when loading a new game 
     *  */
    public void doInit(boolean preserve_history)
    {
        //System.out.println(myplayer.trueName + " doinit");
        super.doInit(preserve_history);				// let commonViewer do it's things
        b.doInit(b.gametype,b.randomKey);			// initialize the board
        if(!preserve_history)
    	{ PerformAndTransmit(reviewOnly?"Edit":"Start P0", false,replayMode.Replay);
    	}
    }
    

	/**
     * calculate a metric for one of three layouts, "normal" "wide" or "tall",
     * which should normally correspond to the area devoted to the actual board.
     * these don't have to be different, but devices with very rectangular
     * aspect ratios make "wide" and "tall" important.  
     * @param width
     * @param height
     * @param wideMode
     * @param tallMode
     * @return a metric corresponding to board size
     */
    public int setLocalBoundsSize(int width,int height,boolean wideMode,boolean tallMode)
    {	
    	int chatHeight = selectChatHeight(height);
    	int ncols = b.lastColumn()-'@';
        int sncols = (ncols*SUBCELL)+(wideMode ? 15 : 1); // more cells wide to allow for the aux displays
        int snrows = 5*SUBCELL+(wideMode ? 5 : 10);  
        int cellw = width / sncols;
        int cellh = (height-chatHeight) / snrows;
        CELLSIZE = Math.max(1,Math.min(cellw, cellh)); //cell size appropriate for the aspect ration of the canvas
        SQUARESIZE = CELLSIZE*SUBCELL;
        return(SQUARESIZE);
    }
    public void setLocalBoundsWT(int x, int y, int width, int height,boolean wideMode,boolean tallMode)
    { 	
    	int chatHeight = selectChatHeight(height);
    	boolean noChat = chatHeight==0;
        int ideal_logwidth = CELLSIZE * 10;
    	int ncols = b.lastColumn()-'@';
        int CELL32 = (3*CELLSIZE)/2;
        int C2 = CELLSIZE/2;
        int playerY = chatHeight+2*CELLSIZE;
        G.SetRect(fullRect, 0, 0, width, height);

        // game log.  This is generally off to the right, and it's ok if it's not
        // completely visible in all configurations.
        int boardH = SQUARESIZE * (6);
       
        G.SetRect(boardRect,CELLSIZE,playerY+(wideMode ? 0 : 4*CELLSIZE),SQUARESIZE * ncols,boardH);
       
        int bbot = G.Bottom(boardRect)-CELLSIZE*5;
        
        G.SetRect(firstPlayerRack,G.Left(boardRect)+CELLSIZE*2-C2,G.Bottom(boardRect)-G.Height(boardRect)/3,
        		CELLSIZE,CELLSIZE);
        G.AlignXY(secondPlayerRack, G.Right(boardRect)-CELLSIZE*3,G.Top(firstPlayerRack),firstPlayerRack);
        
        G.SetRect(stateRect,G.Left( boardRect) + CELLSIZE,chatHeight+CELLSIZE/3,
        		G.Width(boardRect) - CELLSIZE, CELL32);

        G.SetRect(chatRect,G.Left(boardRect),y, Math.min(G.Width(boardRect),width-ideal_logwidth-C2),chatHeight);

        int logX = G.Right( chatRect)+CELLSIZE/3;
        G.SetRect(logRect,logX,G.Top(chatRect), 
        		Math.min(ideal_logwidth,width-logX-CELLSIZE/3),
        		noChat ? CELLSIZE*8 : chatHeight);
        

        G.SetRect(sizeRect,  G.Left(liftRect)-G.Width(liftRect)*2-CELLSIZE,G.Top(liftRect),G.Width( liftRect)*2, CELLSIZE);
        
        G.SetRect(goalRect,G.Left( boardRect)+2*SQUARESIZE,G.Bottom(boardRect)-CELLSIZE*3,G.Width(boardRect)-4*SQUARESIZE, CELLSIZE*2);
        
        setProgressRect(progressRect,goalRect);

        G.SetRect(liftRect,
        		G.Right(goalRect)+CELLSIZE, bbot,CELLSIZE*4,G.Width(liftRect));

        {
            commonPlayer pl0 =getPlayerOrTemp(0);
            commonPlayer pl1 = getPlayerOrTemp(1);
            Rectangle p0time = pl0.timeRect;
            Rectangle p1time = pl1.timeRect;
            Rectangle p0anim = pl0.animRect;
            Rectangle p1anim = pl1.animRect;
            
            Rectangle firstPlayerRect = pl0.nameRect;
            Rectangle secondPlayerRect = pl1.nameRect;
            Rectangle firstPlayerPicRect = pl0.picRect;
            Rectangle secondPlayerPicRect = pl1.picRect;
            Rectangle p0aux = pl0.extraTimeRect;
            Rectangle p1aux = pl1.extraTimeRect;

            //first player name
            G.SetRect(firstPlayerRect, 
            		(wideMode ? G.Right(boardRect) : G.Left(boardRect)) , 
            		wideMode ? G.Bottom(logRect)+C2 : playerY, 
            		CELLSIZE * 8, CELL32);
     
            //second player name
            G.AlignXY(secondPlayerRect,
            		wideMode 
            			? G.Right(boardRect) 
            			: (noChat?G.Left(logRect):G.Right(boardRect))-G.Width(firstPlayerRect)-C2,
            		G.Top(firstPlayerRect)+(wideMode ? CELLSIZE*8 : 0),
            		firstPlayerRect);
     
            // "edit" rectangle, available in reviewers to switch to puzzle mode
            int dw = CELLSIZE*5;
            G.SetRect(doneRect,
            		(G.Left(boardRect)+G.Right(boardRect)-dw)/2,
            		bbot,
            		dw, CELLSIZE*2);
            // first player portrait
            G.SetRect(firstPlayerPicRect, G.Right(firstPlayerRect),G.Top( firstPlayerRect),
            		CELLSIZE * 6, CELLSIZE * 6);
                
            // player 2 portrait
            G.AlignXY(secondPlayerPicRect, 
            		wideMode
            				? G.Right(secondPlayerRect) 
            				: G.Left( secondPlayerRect)-G.Width(firstPlayerPicRect),
            		G.Top(secondPlayerRect),
            		firstPlayerPicRect);
            G.SetRect(p0time, G.Left(firstPlayerRect), G.Bottom(firstPlayerRect), CELLSIZE * 5, CELL32);
            G.AlignLeft(p0aux, G.Bottom(p0time),p0time);
            
            G.SetRect(firstPlayerScoreRect,G.Right(p0aux), G.Bottom(p0time)+C2,CELLSIZE*2,CELLSIZE*2);
            
            // first player "i'm alive" animation ball
            G.SetRect(p0anim, G.Right(p0time),G.Top(p0time),CELL32,CELL32);

             // time display for second player
            G.AlignXY(p1time,G.Left( secondPlayerRect),G.Bottom(secondPlayerRect) ,p0time);
            
            G.AlignLeft(p1aux,G.Bottom(p1time),p1time);

            G.AlignXY(secondPlayerScoreRect, 
            		G.Right(p1aux),G.Top(p1aux)+C2,
            		firstPlayerScoreRect);
            G.AlignXY(p1anim, G.Right(p1time),G.Top(p1time),p0anim);
               	
            }
       
        // "done" rectangle, should always be visible, but only active when a move is complete.
        G.AlignTop(editRect,G.Left(doneRect)-CELLSIZE*6,doneRect);
                
        G.SetRect(reverseViewRect,G.Right(liftRect)+CELLSIZE,G.Top(liftRect), CELLSIZE*2, CELLSIZE*4);
 
  
		//this sets up the "vcr cluster" of forward and back controls.
        SetupVcrRects(G.Left(boardRect)+C2,G.Bottom(boardRect)-5*CELLSIZE,
            CELLSIZE * 9,
            4 * CELLSIZE);
        positionTheChat(chatRect,Color.white,Color.white);
         generalRefresh();
    }
    
    
	// draw a box of spare . Notice if any are being pointed at.  Highlight those that are.
    private void DrawReverseMarker(Graphics gc, Rectangle r,HitPoint highlight)
    {	StockArt king = DvonnChip.getChip(b.reverse_y?DvonnChip.WHITE_CHIP_INDEX:DvonnChip.BLACK_CHIP_INDEX);
    	StockArt reverse = DvonnChip.getChip(b.reverse_y?DvonnChip.BLACK_CHIP_INDEX:DvonnChip.WHITE_CHIP_INDEX);
    	G.frameRect(gc,Color.black,r);
    	reverse.drawChip(gc,this,G.Width(r),G.centerX(r),G.Top(r)+G.Width(r)/2,null);
    	king.drawChip(gc,this,G.Width(r),G.centerX(r),G.Top(r)+G.Width(r)+G.Width(r)/2,null);
    	if(HitPoint.setHelpText(highlight,r,s.get(ReverseViewExplanation)))
    	{	highlight.spriteRect = r;
    		highlight.spriteColor = Color.red;
    		highlight.hitCode = DvonnId.ReverseViewButton;
    	}
     }  

   private int liftSteps=0;
   private int rotateSteps=0;
   private int initial_lift_x = 0;
   private void DrawLiftRect(Graphics gc,HitPoint highlight)
    {	
		if(lifted || (liftSteps>0) || (rotateSteps>0)) { repaint(20); }
		liftSteps = lifted ? Math.min(++liftSteps,12) : Math.max(--liftSteps,0);
		if((liftSteps==12)&&(highlight!=null)&&lifted)
		{
		if(!highlight.down) {lifted=false; }
		int dif = (G.Left(highlight)-initial_lift_x)/3;
		dif = Math.max(-4,Math.min(4,dif));
		if(dif!=0)
		{ rotateSteps = Math.max(0,Math.min(30,rotateSteps+dif));
		  initial_lift_x=G.Left(highlight);
		}}
		else { rotateSteps = Math.max(0,rotateSteps-1); }
		
		if(gc!=null) 
		{ G.centerImage(gc,textures[LIFT_ICON_INDEX],liftRect,this); 
		  G.frameRect(gc,Color.black,liftRect);
		}
		if(G.pointInRect(highlight,liftRect))
    	{	
    		highlight.hitCode = DvonnId.LiftRect;
       		if(!lifted) { initial_lift_x = G.Left(highlight); }
       	   	highlight.dragging = lifted = highlight.down;
       	   	highlight.spriteRect = liftRect;
       	   	highlight.spriteColor = Color.red;
    	}
    }
   

    public void drawSprite(Graphics g,int idx,int xp,int yp)
    {	if(idx==DvonnId.PickedStack.ordinal())
    	{
    	b.pickedStack.drawStack(g,this,null,SQUARESIZE,xp,yp,0,sizeRect.value,null);
    	}
     	//DvonnChip.getChip(idx).drawChip(g,this,SQUARESIZE,xp,yp,0,1.0,null);
     }




    /* draw the deep unchangable objects, including those that might be rather expensive
     * to draw.  This background layer is used as a backdrop to the rest of the activity.
     * in our cease, we draw the board and the chips on it. 
     * */
    
    public void drawFixedElements(Graphics gc)
    { 	boolean reviewBackground = reviewMode() && !mutable_game_record;
    
    	{	// good for board-skew : gb.SetDisplayParameters(0.7,0.8,  0.0,0.00,  2.3, .15, 0.25);
    	// good for board-skew2 gb.SetDisplayParameters(0.67,0.72,  0.0,0.00,  14.5, .22, 0.25);
    	// good for board-skew3 gb.SetDisplayParameters(0.54,0.80,  0.0,-0.30,  7.0, .250, 0.32);
    	double lr = 30.0*rotateSteps/12;
    	b.SetDisplayParameters(.68,0.8, 0.85,-0.4, 30.0+lr,0.2, 0.10,0.0);
	    b.SetDisplayRectangle(boardRect);
    	}

      // erase
      G.setColor(gc,reviewBackground ? reviewModeBackground : boardBackgroundColor);
      //G.fillRect(gc, fullRect);
      G.tileImage(gc,textures[BACKGROUND_TILE_INDEX],fullRect, this);   
      if(reviewBackground)
      {	 
        G.tileImage(gc,textures[BACKGROUND_REVIEW_INDEX],boardRect, this);   
      }
       
      // for us, the board is one large graphic, for which the target points
      // are carefully matched with the abstract grid
      G.centerImage(gc,images[BOARD_INDEX],boardRect,this);
      b.DrawGrid(gc,boardRect,use_grid,Color.white,Color.black,Color.blue,Color.yellow);
    }
    private void DrawScore(Graphics gc,Rectangle r,int player)
    {	if(gc!=null)
    	{
    	G.setFont(gc,largeBoldFont);
    	G.Text(gc,true,r,0,Color.black,rackBackGroundColor,""+b.scoreForPlayer(player));
    	G.frameRect(gc,Color.black,r);
    	}
    }
    private void drawZoomStack(Graphics gc,DvonnCell cell,int xpos,int ypos,int steps,HitPoint canhit,HitPoint draw)
	{	double zoom = sizeRect.value;
        int height = cell.chipIndex+1;
        boolean lifting = (draw!=null) && (draw.hitCode==DvonnId.LiftRect);
        String msg = ((height>1) && (lifting || (zoom<=(MIN_CHIP_SCALE+0.01))))
            				? (""+height)
            				: null;
        cell.drawStack(gc,this,canhit,SQUARESIZE,xpos,ypos,steps,zoom,msg);
 	}
   /* draw the board and the chips on it. */
    private void drawBoardElements(Graphics gc, DvonnBoard rb, Rectangle brect, HitPoint highlight,HitPoint any)
    {	Hashtable<DvonnCell,DvonnCell> dests = rb.getMoveDests();
    	Hashtable<DvonnCell,DvonnCell> removed = rb.getRemoved();
     	boolean dolift = (liftSteps>0);
     	setDraggingBoard(dolift);	// inhibit touch zoom while in contact
      	int dotsize = Math.max(2,SQUARESIZE/15);
      	boolean canHit =  (highlight!=null);
      	if(dolift && (liftSteps<12))
     		{ // this induces a very simple animation
     		repaint(20); 
     		}
     	//
        // now draw the contents of the board and anything it is pointing at
        //
       	for (int thiscolnum = rb.rightColNum(),stepcol = rb.stepColNum(),lastcolnum = rb.leftColNum()-stepcol;
       	    	thiscolnum!=lastcolnum; 
       			thiscolnum -= stepcol)
         { //where we draw the grid
       		char thiscol = (char)(thiscolnum+'A');
  	        for (int row=rb.topRowInColumn(thiscol),steprow=rb.stepRow(),last = rb.bottomRowInColumn(thiscol)+steprow;
  	        	row!=last; 
  	        	row += steprow)	// back to front
        	{
            DvonnCell c = rb.getCell(thiscol,row);
            boolean canHitCell = canHit && rb.LegalToHitBoard(c);
            int ypos = G.Bottom(brect) - rb.cellToY(thiscol, row);
            int xpos = G.Left(brect) + rb.cellToX(thiscol, row);
            drawZoomStack(gc,c,xpos,ypos,liftSteps,(canHitCell?highlight:null),any);
            // mark the cells for debugging
            //StockArt.SmallO.drawChip(gc,this,SQUARESIZE,xpos,ypos,""+c.col+c.row);
            if(rb.isSource(c))
            {	G.DrawAACircle(gc,xpos+dotsize,ypos,dotsize,Color.blue,Color.gray,true);
            }
            if(dests.get(c)!=null)
	        {
	        	G.DrawAACircle(gc,xpos+dotsize,ypos,dotsize,Color.red,Color.gray,true);
	        }
            if(removed.get(c)!=null)
            {	
           	 StockArt.SmallX.drawChip(gc,this,SQUARESIZE,xpos,ypos,null);
            }
         }}
        boolean allPlaced = !rb.placingRings();   
       	DvonnCell p1rack = allPlaced ? rb.captures[FIRST_PLAYER_INDEX] : rb.rack[FIRST_PLAYER_INDEX];
       	DvonnCell p2rack = allPlaced ? rb.captures[SECOND_PLAYER_INDEX] : rb.rack[SECOND_PLAYER_INDEX];
        drawZoomStack(gc,p1rack,G.centerX(firstPlayerRack),G.Top(firstPlayerRack),
       			0,rb.LegalToHitChips(FIRST_PLAYER_INDEX)?highlight:null,any);
        drawZoomStack(gc,p2rack,G.centerX(secondPlayerRack),G.Top(secondPlayerRack),
       			0,rb.LegalToHitChips(SECOND_PLAYER_INDEX)?highlight:null,any);
    	
        if(canHit && (highlight.hitObject!=null))
        {	DvonnCell ch = (DvonnCell)highlight.hitObject;
        	highlight.arrow = ((ch.topChip()==null)||(getMovingObject()>=0))
        			? StockArt.DownArrow 
        			: StockArt.UpArrow;
        	highlight.awidth = SQUARESIZE/3;
        	highlight.spriteColor = Color.red;
        }

    }
    
    public void drawAuxControls(Graphics gc,HitPoint highlight)
    {  	DrawLiftRect(gc,highlight); 
    	DrawReverseMarker(gc,reverseViewRect,highlight);
    }
    //
    // draw the board and things on it.  If gc!=null then actually 
    // draw, otherwise just notice if the highlight should be on
    //
    public void redrawBoard(Graphics gc, HitPoint highlight)
    {  DvonnBoard gb = (DvonnBoard) disB(gc);

      boolean ourTurn = OurMove();
      boolean moving = getMovingObject()>=0;
      HitPoint ot = ourTurn ? highlight : null;	// hit if our turn
      HitPoint select = moving?null:ot;	// hit if our turn and not dragging
      HitPoint ourSelect = (moving && !reviewMode()) ? null : highlight;	// hit if not dragging
      DvonnState vstate = b.getState();
       redrawGameLog(gc, ourSelect, logRect, boardBackgroundColor);
    
   	   DrawScore(gc,firstPlayerScoreRect,FIRST_PLAYER_INDEX);
   	   DrawScore(gc,secondPlayerScoreRect,SECOND_PLAYER_INDEX);

       G.setFont(gc,standardBoldFont);
       drawPlayerStuff(gc,(vstate==DvonnState.PUZZLE_STATE),ourSelect,
	   			HighlightColor, rackBackGroundColor);

       drawBoardElements(gc, gb, boardRect, ot, highlight);

       if (vstate != DvonnState.PUZZLE_STATE)
        {
            if (G.handleRoundButton(gc, doneRect, 
            		(b.DoneState()? select : null), s.get(DoneAction),
                    HighlightColor, rackBackGroundColor))
            {	// always display the done button, but only make it active in
            	// the appropriate states
                select.hitCode = DefaultId.HitDoneButton;
            }
            if (allowed_to_edit)
            {
     
                    if (G.handleRoundButton(gc, editRect, select, s.get(EditAction),
                                HighlightColor, rackBackGroundColor))
                    {
                        select.hitCode = DefaultId.HitEditButton;
                    }
                }
        }
 
        
            standardGameMessage(gc,
            		vstate==DvonnState.GAMEOVER_STATE?gameOverMessage():s.get(vstate.getDescription()),
            				vstate!=DvonnState.PUZZLE_STATE,
            				gb.whoseTurn,
            				stateRect);
            goalAndProgressMessage(gc,ourSelect,s.get("Capture the most chips under your color stack"),progressRect, goalRect);
         
        // no repetitions are possible in dvonn
        // DrawRepRect(gc,b.Digest(),repRect);
        drawAuxControls(gc,ourSelect);
 	    sizeRect.draw(gc,ourSelect);
        drawVcrGroup(ourSelect, gc, HighlightColor, vcrButtonColor);

    }
    public boolean PerformAndTransmit(commonMove m, boolean transmit,replayMode mode)
    {	// the super method in commonCanvas is where the history is actually recorded
       	if((b.getState()==DvonnState.PASS_STATE) && (m.op==MOVE_DONE) && OurMove() && (mode==replayMode.Live))
    	{
         PerformAndTransmit("Pass",true,mode); 
    	}
       	boolean val =  super.PerformAndTransmit(m,transmit,mode);
        return(val);
    }
    /**
     * Execute a move by the other player, or as a result of local mouse activity,
     * or retrieved from the move history, or replayed form a stored game. 
     * @param mm the parameter is a commonMove so the superclass commonCanvas can
     * request execution of moves in a generic way.
     * @return true if all went well.  Normally G.Error would be called if anything went
     * seriously wrong.
     */
     public boolean Execute(commonMove mm,replayMode replay)
    {	DvonnState state = b.getState();
        if(state==DvonnState.PUZZLE_STATE)
    	{   mm.setSliderNumString("--");
    		switch(mm.op)
        	{
    		case MOVE_DROPB:
         	case MOVE_PICK: 
        	case MOVE_PICKB: 
        		break;
    		default:
    			mm.setLineBreak(true);
        	}
    	}
  
        handleExecute(b,mm,replay);
  
        startBoardAnimations(replay);
        
        if(replay!=replayMode.Replay) { playSounds((DvonnMovespec)mm); }
 
        return (true);
    }
     
     void startBoardAnimations(replayMode replay)
     {
        if(replay!=replayMode.Replay)
     	{	double start = 0.0;
     		double speed = masterAnimationSpeed*0.5;
     		boolean later = false;
     		//
     		// if there is only one pair on the stack it's an ordinary move, and we
     		// migrate it cleanly.  If there are multiple pairs, the later pairs are
     		// captured chips which we want to send off in a staggered manner
     		for(int idx = 0,lim=b.animationStack.size(); idx<lim; idx+=2)
     		{
     		DvonnCell dest = b.animationStack.elementAt(idx+1);
     		DvonnCell src = b.animationStack.elementAt(idx);
     		if(later)
     		{	// this extra animation displays a static image of a stack waiting
     			// to start moving. The cell is a throw away copy that is source, dest, and 
     			// the stack to be painted all in one.
     			SimpleSprite ss = startAnimation(src,src,src,SQUARESIZE,0,start);		// stand the stacks while waiting to start moving
     			ss.overlapped = true;	// this keeps the stack visible despite an animation in progress.
     		}
     		startAnimation(src,dest,src,SQUARESIZE,start,speed);
     		start += masterAnimationSpeed*0.2;
     		speed = masterAnimationSpeed*1.0;
     		later = true;
     		}
     	}
        	b.animationStack.clear();
     }
/**
 * parse a move specifier on behalf of the current player.  This is called by the 
 * "game" object when it receives a move from the other player.  Note that it may
 * be called while we are in review mode, so the current state of the board should
 * not be considered.
 */
    public commonMove ParseNewMove(String st)
    {
        return (new DvonnMovespec(st, -1));
    }
    

     

private void playSounds(DvonnMovespec m)
{
    // add the sound effects
    switch(m.op)
    {
    case MOVE_DROPB:
    case MOVE_BOARD_BOARD:
    	{
    	  int h = (m.undoInfo==null) ? 1 : (1+(m.undoInfo.length()/3));	// proportional to the number of chips removed
    	  while(h-- > 0) { playASoundClip(light_drop,50); }
    	}
    	break;
    case MOVE_DROP:
    case MOVE_PICKB:
    case MOVE_PICK:
    	 playASoundClip(light_drop,50);
    	 break;
     default: break;
    }
	
}

 
/**
 * the preferred mouse gesture style is to let the user "pick up" objects
 * by simply clicking on them, but we also allow him to click and drag. 
 * StartDragging is called when he has done this.
 */
    public void StartDragging(HitPoint hp)
    {
        int mo = getMovingObject();
        if ((mo < 0)&&(hp.hitCode instanceof DvonnId)) // not dragging anything yet, so maybe start
        {
        
        if(hp!=null)
        {
        DvonnId hitObject = (DvonnId)hp.hitCode;
		DvonnCell cell = (DvonnCell)hp.hitObject;
		DvonnChip chip = (cell==null) ? null : cell.topChip();
		
        if(chip!=null)
		{
	    switch(hitObject)
	    {
	    case LiftRect:
        case First_Player_Rack:
        case Second_Player_Rack:
        case First_Player_Captures:
        case Second_Player_Captures:
        	PerformAndTransmit("Pick "+hitObject.shortName+" "+chip.pieceNumber());
        	break;
	    case BoardLocation:
	    	if(cell.chipIndex>=0)
	    		{
	    		PerformAndTransmit("Pickb "+cell.col+" "+cell.row+" "+chip.pieceNumber());
	    		}
	    	break;
		default:
			break;
        }

        if (getMovingObject() >= 0)
        {	// if we got something started, inform the mouse handler
            hp.dragging = true;
        } }
        }}
    }

	/** 
	 * this is called on "mouse up".  We may have been just clicking
	 * on something, or we may have just finished a click-drag-release.
	 * We're guaranteed just one mouse up, no bounces.
	 */
    public void StopDragging(HitPoint hp)
    {
        CellId id = hp.hitCode;
        if(!(id instanceof DvonnId)) {  missedOneClick = performStandardActions(hp,missedOneClick);}
    	else {
    	missedOneClick = false;
   		DvonnId hitObject = (DvonnId)hp.hitCode;
		DvonnCell cell = (DvonnCell)hp.hitObject;
		DvonnChip cup = (cell==null) ? null : cell.topChip();
		DvonnState state = b.getState();	// state without resignation
        switch (hitObject)
        {
        default:
        	throw G.Error("Hit Unknown object " + hitObject);
        case ReverseViewButton:
          	 reverseOption.setState(b.reverse_y = !b.reverse_y);
          	 generalRefresh();
          	 break;

        case LiftRect:
        case ZoomSlider: break;
        case BoardLocation:	// we hit the board 
			switch(state)
			{
			default: throw G.Error("Not expecting drop on filled board in state "+state);
			case PLACE_RING_STATE:
			case CONFIRM_PLACE_STATE:
				if(cup==null) { PerformAndTransmit("Dropb "+cell.col+" "+cell.row); }
				else { PerformAndTransmit("Pickb "+cell.col+" "+cell.row); }
				break;
			case CONFIRM_STATE:
			case PLAY_STATE:
			case PUZZLE_STATE:
				if(b.movingObjectIndex()>=0)
				{ if(cell!=null) { PerformAndTransmit("Dropb "+cell.col+" "+cell.row); }
				}
				else if(cup!=null)
				{
				PerformAndTransmit( "Pickb "+cell.col+" "+cell.row+" "+cup.pieceNumber());
				}
				break;
			}
			break;
			
        case First_Player_Captures:
        case Second_Player_Captures:
        case First_Player_Rack:
        case Second_Player_Rack:
        	{
        	int mov = b.movingObjectIndex();
            if(mov>=0) 
			{//if we're dragging a black chip around, drop it.
            	switch(state)
            	{
            	default: throw G.Error("can't drop on rack in state "+state);
                	case PLAY_STATE:
            		PerformAndTransmit(RESET);
            		break;
               	case PLACE_RING_STATE:
               	case PUZZLE_STATE:
            		PerformAndTransmit("Drop "+hitObject.shortName+" "+mov);
            		break;
            	}
			}
         	}
            break;
        }
        }
    }


    /** handle action events
     * 
     */
    public boolean handleDeferredEvent(Object target, String command)
    {
    	if(target==reverseOption)
    	{
    	b.reverse_y = reverseOption.getState();
    	generalRefresh();
    	return(true);
    	}
    	else 
    	return(super.handleDeferredEvent(target,command));
     }
    public String gameType() { return(b.gametype+" "+b.randomKey); }
    public String sgfGameType() { return(Dvonn_SGF); }
    public void performHistoryInitialization(StringTokenizer his)
    {	String token = his.nextToken();		// should be a checker init spec
	    long rk = G.LongToken(his);
	    b.doInit(token,rk);
	}


    public BoardProtocol getBoard()   {    return (b);   }
    public SimpleRobotProtocol newRobotPlayer() { return(new DvonnPlay()); }


    /** replay a move specified in SGF format.  
     * this is mostly standard stuff, but the key is to recognize
     * the elements that we generated in sgf_save
     */
    public void ReplayMove(sgf_node no)
    {
        String comments = "";
        sgf_property prop = no.properties;

        while (prop != null)
        {
            String name = prop.getName();
            String value = (String) prop.getValue();

            if (setup_property.equals(name))
            {	StringTokenizer tok = new StringTokenizer(value);
        		String gametype = tok.nextToken();
        		long rk = G.LongToken(tok);
                b.doInit(gametype,rk);
             }
            else if (name.equals(comment_property))
            {
                comments += value;
            }
            else if (name.equals(game_property))
            {
                if (!(value.equals(Dvonn_SGF)))
                {
                	throw G.Error("game type " + value + " is not this game");
                }
            }
            else if (parseVersionCommand(name,value,2)) {}
            else if (parsePlayerCommand(name,value)) {}
            else
            {
                replayStandardProps(name,value);
            }

            prop = prop.next;
        }

        if (!"".equals(comments))
        {
            setComment(comments);
        }
    }
}


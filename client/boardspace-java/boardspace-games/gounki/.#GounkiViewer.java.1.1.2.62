package gounki;

import java.awt.*;
import javax.swing.JCheckBoxMenuItem;

import online.common.*;
import online.game.*;
import online.game.sgf.*;

import java.util.*;

import lib.*;


/**
 * 
 * Change History
 *
 * Sept 2011 Initial work in progress. 
 *
*/
public class GounkiViewer extends commonCanvas 
	implements ViewerProtocol, GounkiConstants, sgf_names
{	
     /**
	 * 
	 */
	static final long serialVersionUID = 1L;
	// colors
    private Color reviewModeBackground = new Color(220,165,200);
    private Color HighlightColor = new Color(0.2f, 0.95f, 0.75f);
    private Color rackBackGroundColor = new Color(194,175,148);
    private Color boardBackgroundColor = new Color(220,165,155);
    private Color vcrButtonColor = new Color(0.7f, 0.7f, 0.75f);
    private Color chatBackGroundColor = new Color(222,194,164);

    // images
    private static Image[] textures = null;// background textures
    private static Image[] images = null;	// images
    // private undoInfo
    private GounkiBoard b = null; 	// the board from which we are displaying
    private int CELLSIZE; 			// size of the layout cell.  
    private static int SUBCELL = 4;	// number of cells in a square
    private int SQUARESIZE;			// size of a board square
    // addRect is a service provided by commonCanvas, which supports a mode
    // to visualize the layout during development.  Look for "show rectangles"
    // in the options menu.
    //public Rectangle fullRect = addRect("fullRect"); //the whole viewer area
    //public Rectangle boardRect = addRect("boardRect"); //the actual board, normally at the left edge
    //public Rectangle chatRect = addRect("chatRect"); // the chat window
    private Rectangle logRect = addRect("logRect"); //the game log, normally off the the right
    private Rectangle stateRect = addRect("stateRect");
    private Rectangle firstPlayerChipRect = addRect("firstPlayerChipRect");
    private Rectangle secondPlayerChipRect = addRect("secondPlayerChipRect");
    private Rectangle altViewRect = addRect("altView");
    private Rectangle doneRect = addRect("doneRect");
    private Rectangle editRect = addRect("editRect");
    private Rectangle goalRect = addRect("goalRect");
    private Rectangle progressRect = addRect("progressRect");
    private Rectangle reverseRect = addRect("reversetRect");
    private Rectangle firstPlayerRack = addRect("firstPlayerRack");
    private Rectangle secondPlayerRack = addRect("secondPlayerRack");
    private JCheckBoxMenuItem reverseOption = null;
    private JCheckBoxMenuItem twistOption = null;
    boolean twist = false;
    
    private Rectangle repRect = addRect("repRect");
    

    public void preloadImages()
    {	
       	GounkiChip.preloadImages(this,ImageDir);
        if (images == null)
    	{ // note that for this to work correctly, the images and masks must be the same size.  
          // Refer to http://www.andromeda.com/people/ddyer/java/imagedemo/transparent.html
        textures = load_images(ImageDir,TextureNames);
        images = load_masked_images(ImageDir,ImageNames);
    	}
    }


	/**
	 * 
	 * this is the real instance intialization, performed only once.
	 * info contains all the goodies from the environment.
	 * */
    public void init(exHashtable info)
    {	// for games with more than two players, the default players list should be 
    	// adjusted to the actual number, adjusted by the min and max
       	// int players_in_game = Math.max(3,info.getInt(exHashtable.PLAYERS_IN_GAME,4));
       	// 
    	// for games that require some random initialization, the random key should be
    	// captured at this point and passed to the the board init too.
        // randomKey = info.getInt(exHashtable.RANDOMSEED,-1);
    	//

    	super.init(info);
        int randomKey = gameInfo.getInt(exHashtable.RANDOMSEED,-1);
        
        b = new GounkiBoard(info.getString(exHashtable.GAMETYPE, Gounki_INIT),randomKey);
        doInit(false);
        reverseOption = myFrame.addOption(s.get(ReverseView),b.reverse_y,deferredEvents);
        twistOption = myFrame.addOption(s.get("Swing View"),twist,deferredEvents);

        
     }

    /** 
     *  used when starting up or replaying and also when loading a new game 
     *  */
    public void doInit(boolean preserve_history)
    {	//System.out.println(myplayer.trueName + " doinit");
        super.doInit(preserve_history);				// let commonViewer do it's things
        b.doInit(b.gametype,b.randomKey);			// initialize the board
        if(!preserve_history)
    	{ PerformAndTransmit(reviewOnly?"Edit":"Start P0", false,replayMode.Replay);
    	}
    }



	/**
     * calculate a metric for one of three layouts, "normal" "wide" or "tall",
     * which should normally correspond to the area devoted to the actual board.
     * these don't have to be different, but devices with very rectangular
     * aspect ratios make "wide" and "tall" important.  
     * @param width
     * @param height
     * @param wideMode
     * @param tallMode
     * @return a metric corresponding to board size
     */
    public int setLocalBoundsSize(int width,int height,boolean wideMode,boolean tallMode)
    {	
        int chatHeight = selectChatHeight(height);
        boolean noChat = chatHeight==0;
        int sncols = (b.boardColumns*SUBCELL+(tallMode ? 0 : (wideMode?28:16))); // more cells wide to allow for the aux displays
        int snrows = (b.boardRows-2)*SUBCELL+(tallMode ? (noChat ?-1 : -7) : wideMode ? -10 : -14);  
        int cellw = width / sncols;
        int cellh = (height-(wideMode?0:chatHeight)) / snrows;
        CELLSIZE = Math.max(1,Math.min(cellw, cellh)); //cell size appropriate for the aspect ration of the canvas
        SQUARESIZE = CELLSIZE*SUBCELL;
       
        return(SQUARESIZE);
    }

    public void setLocalBoundsWT(int x, int y, int width, int height,boolean wideMode,boolean tallMode)
    {   
    	
    	int extrarows = 4;
        int chatHeight = selectChatHeight(height);
        boolean noChat = chatHeight==0; 
        int C2 = CELLSIZE/2;
        G.SetRect(fullRect,x,y, width, height);

        // game log.  This is generally off to the right, and it's ok if it's not
        // completely visible in all configurations.
        int boardW = SQUARESIZE * b.boardColumns ;
        G.SetRect(stateRect,x+CELLSIZE,(wideMode ? y : chatHeight)+CELLSIZE/3,
        		boardW-CELLSIZE,CELLSIZE);
        G.SetRect(boardRect,x,G.Bottom(stateRect)+CELLSIZE,boardW,SQUARESIZE * (b.boardRows-3-extrarows));
        int lowest = G.Bottom(boardRect)+CELLSIZE*12;
        boolean logBottom = tallMode&(noChat | (height-lowest>CELLSIZE*6));
        int logX = tallMode ? width-CELLSIZE*(logBottom ? 16 : 8)-C2 : G.Right(boardRect)+CELLSIZE/3;
        int logY = logBottom ? lowest : y;
        int logH = logBottom ? height-lowest-C2 : wideMode|noChat? CELLSIZE*6 : chatHeight;
        G.SetRect(logRect,logX,logY,width-logX-CELLSIZE/3,logH);

        G.SetRect(firstPlayerChipRect, 
        		tallMode ? G.Left(boardRect)+CELLSIZE+C2 : G.Right(boardRect)-C2,
        		tallMode ? G.Bottom(boardRect)+CELLSIZE*4 : wideMode|noChat ? G.Bottom(logRect)+CELLSIZE : G.Top(boardRect),
        	    CELLSIZE*3, CELLSIZE*3);
 
        G.SetRect(firstPlayerRack,G.Left( firstPlayerChipRect)-CELLSIZE, G.Bottom(firstPlayerChipRect),
        		G.Width(firstPlayerChipRect)*2, 4*CELLSIZE);
        
        G.AlignXY(secondPlayerChipRect,
        		tallMode|wideMode ? G.Right(firstPlayerChipRect)+CELLSIZE*11 : G.Left( firstPlayerChipRect),
        		tallMode|wideMode ? G.Top(firstPlayerChipRect) : G.Top( firstPlayerChipRect)+8*CELLSIZE,
        		firstPlayerChipRect);

        G.AlignXY(secondPlayerRack,G.Left(secondPlayerChipRect)-CELLSIZE,G.Bottom(secondPlayerChipRect),
        		firstPlayerRack);

        G.SetRect(goalRect,G.Left( boardRect)+SQUARESIZE*2,G.Bottom(boardRect)-CELLSIZE,
        		G.Width(boardRect)-SQUARESIZE*4, CELLSIZE*2);
      
        setProgressRect(progressRect,goalRect);

        {
            commonPlayer pl0 =getPlayerOrTemp(0);
            commonPlayer pl1 = getPlayerOrTemp(1);
            Rectangle p0time = pl0.timeRect;
            Rectangle p1time = pl1.timeRect;
            Rectangle p0anim = pl0.animRect;
            Rectangle p1anim = pl1.animRect;
            Rectangle p0xtime = pl0.extraTimeRect;
            Rectangle p1xtime = pl1.extraTimeRect;
            Rectangle firstPlayerRect = pl0.nameRect;
            Rectangle secondPlayerRect = pl1.nameRect;
            Rectangle firstPlayerPicRect = pl0.picRect;
            Rectangle secondPlayerPicRect = pl1.picRect;
            
            //first player name
            G.SetRect(firstPlayerRect, G.Right(firstPlayerChipRect), G.Top(firstPlayerChipRect),
            		 CELLSIZE * 8, CELLSIZE*2);
            //second player name
            G.AlignXY(secondPlayerRect,G.Right(secondPlayerChipRect),G.Top( secondPlayerChipRect),
            		firstPlayerRect);


            // first player portrait
            G.SetRect(firstPlayerPicRect,G.Left( firstPlayerRect)+CELLSIZE*3,G.Bottom(firstPlayerRect),
            		 CELLSIZE * 5, CELLSIZE * 5);
                 
            	
            // time display for first player
            G.SetRect(p0time, G.Right(firstPlayerRect)+C2,G.Top( firstPlayerRect),CELLSIZE * 3, CELLSIZE);
            G.AlignLeft(p0xtime,G.Bottom(p0time), p0time);
            
            // first player "i'm alive" animation ball
            G.SetRect(p0anim,G.Left(p0xtime),G.Bottom( p0xtime),CELLSIZE,CELLSIZE);
            // time display for second player
            G.AlignXY(p1time, G.Right(secondPlayerRect)+C2,G.Top( secondPlayerRect),p0time);
            G.AlignXY(p1anim,G.Left(p1xtime),G.Bottom(p1xtime),p0anim);
            G.AlignLeft(p1xtime,G.Bottom(p1time),p1time);
            // player 2 portrait
            G.AlignXY(secondPlayerPicRect,
            		G.Left( secondPlayerRect)+CELLSIZE*3,
            		G.Bottom(secondPlayerRect),
            		firstPlayerPicRect);
 
            int chatX = wideMode ? G.Left(logRect) : x;
            int chatY = wideMode ? G.Bottom(secondPlayerPicRect)+CELLSIZE: y;
            int chatW = wideMode|logBottom ? width-chatX-CELLSIZE : logX-C2;
            int chatH = wideMode ? height-chatY-CELLSIZE : chatHeight;
            G.SetRect(chatRect, 
            		chatX,
            		chatY,
            		chatW,
            		chatH);
            }
            
        

        G.SetRect(repRect,G.Left( goalRect)+CELLSIZE,G.Top( goalRect)-CELLSIZE,G.Width( goalRect)-CELLSIZE,CELLSIZE);
        
		//this sets up the "vcr cluster" of forward and back controls.
        SetupVcrRects(G.Left(boardRect)+CELLSIZE,G.Bottom(boardRect)-C2,
            CELLSIZE * 8,
            4 * CELLSIZE);

        G.SetRect(altViewRect,G.Right(boardRect)-CELLSIZE*3 , G.Bottom(boardRect),CELLSIZE*2, CELLSIZE*2);
        
        G.SetRect(reverseRect, G.Left(altViewRect)-CELLSIZE*3,G.Top( altViewRect), CELLSIZE*2, CELLSIZE*3);

        // "edit" and "done" rectangle, available in reviewers to switch to puzzle mode
        int buttonW = CELLSIZE*4;
        int doneX = G.Left(reverseRect)-buttonW-CELLSIZE*2;
        G.SetRect(doneRect,doneX,G.Top(reverseRect)+CELLSIZE,buttonW,3*C2);
        G.AlignXY(editRect,doneX-buttonW-2*CELLSIZE,G.Top(doneRect),doneRect);
 
        positionTheChat(chatRect,chatBackGroundColor,chatBackGroundColor);
        generalRefresh();
    }
	// draw a box of spare . Notice if any are being pointed at.  Highlight those that are.
    private void DrawReverseMarker(Graphics gc, Rectangle r,HitPoint highlight)
    {	StockArt king = GounkiChip.getChip(b.reverse_y?1:0,0);
    	StockArt reverse = GounkiChip.getChip(b.reverse_y?0:1,0);
    	king.drawChip(gc,this,G.Width(r),G.centerX(r),G.Top(r)+G.Width(r)/2,null);
    	reverse.drawChip(gc,this,G.Width(r),G.centerX(r),G.Top(r)+G.Width(r),null);
    	if(HitPoint.setHelpText(highlight,r,s.get(ReverseViewExplanation)))
    	{	highlight.spriteRect = r;
    		highlight.spriteColor = Color.red;
    		highlight.hitCode = GounkiId.ReverseViewButton;
    	}
     }    
	// draw a box of spare . Notice if any are being pointed at.  Highlight those that are.
    private void DrawAltViewRect(Graphics gc, Rectangle r,HitPoint highlight)
    {	      // if the board is one large graphic, for which the visual target points
        // are carefully matched with the abstract grid
        G.centerImage(gc,images[!twist?BOARD_TWIST_INDEX:BOARD_INDEX], r,this);
    	//G.frameRect(gc,Color.black,r);
    	//drawBoardElements(gc,b, r, null);
    	if(G.pointInRect(highlight,r))
    	{	highlight.spriteRect = r;
			highlight.spriteColor = Color.red;
    		highlight.hitCode = GounkiId.TwistViewButton;
    	}
     }  
	// draw a box of spare gobblets. Notice if any are being pointed at.  Highlight those that are.
    private void DrawCapturedChipPool(Graphics gc, int player, Rectangle r, int forPlayer, HitPoint highlight)
    {	GounkiCell chips[]= b.rack[player];
        boolean canHit = b.LegalToHitChips(player);
        boolean moving = b.pickedObject!=null;
        int step = (int)(G.Width(r)*0.4);
        int start = step/2;
        for(int i=0;i<chips.length; i++)
        {	GounkiCell thisCell = chips[i];
            HitPoint pt = canHit? highlight : null; 
            if(thisCell.drawStack(gc,this,pt,step,G.Left(r)+start+step*i,G.Bottom(r)-start,0,0.2,null))
            {
            	highlight.arrow = moving ? StockArt.DownArrow : StockArt.UpArrow;
            	highlight.awidth = step/2;
            	highlight.spriteColor = Color.red;
            }
        }
      }
	// draw a box of spare gobblets. Notice if any are being pointed at.  Highlight those that are.
    private void DrawSampleChipPool(Graphics gc, int forPlayer, Rectangle r, int player, HitPoint highlight)
    {	
        GounkiChip thisChip = GounkiChip.getChip(forPlayer,0);
        thisChip.drawChip(gc,this,G.Width(r),G.centerX(r),G.Top(r)+G.Height(r)/4,null);
    }

    //
    // sprites are normally a game piece that is "in the air" being moved
    // around.  This is called when dragging your own pieces, and also when
    // presenting the motion of your opponent's pieces, and also during replay
    // when a piece is picked up and not yet placed.  While "obj" is nominally
    // a game piece, it is really whatever is associated with b.movingObject()
    //
    public void drawSprite(Graphics g,int obj,int xp,int yp)
    {  	// draw an object being dragged
    	GounkiChip ch = GounkiChip.getChip(obj);
    	boolean inrect = G.pointInRect(xp,yp,boardRect);
    	double startScale = inrect 
							? 1.1*yScale( G.Bottom(boardRect) - yp,G.Height(boardRect)) 
							: 0.8;
    	int sz = (int)(SQUARESIZE*startScale);
    	ch.drawChip(g,this,sz,xp,yp,null);
     }

    // also related to sprites,
    // default position to display static sprites, typically the "moving object" in replay mode
    public Point spriteDisplayPoint()
	{   return(new Point(G.Right(boardRect)-SQUARESIZE/2,G.Bottom(boardRect)-SQUARESIZE/2));
	}


    //** this is used by the game controller to supply entertainment strings to the lobby */
    // public String gameProgressString()
    // {	// this is what the standard method does
    // 	// return ((mutable_game_record ? Reviewing : ("" + viewMove)));
    // 	return(super.gameProgressString());
    // }


    /* draw the deep unchangable objects, including those that might be rather expensive
     * to draw.  This background layer is used as a backdrop to the rest of the activity.
     * in our cease, we draw the board and the chips on it. 
     * */
    public void drawFixedElements(Graphics gc)
    { boolean reviewBackground = reviewMode() && !mutable_game_record;
      // erase
      G.setColor(gc,reviewBackground ? reviewModeBackground : boardBackgroundColor);
      //G.fillRect(gc, fullRect);
      G.tileImage(gc,textures[BACKGROUND_TILE_INDEX], fullRect, this);   
      if(reviewBackground)
      {	 
        G.tileImage(gc,textures[BACKGROUND_REVIEW_INDEX],boardRect, this);   
      }
       
      // if the board is one large graphic, for which the visual target points
      // are carefully matched with the abstract grid
      G.centerImage(gc,images[twist?BOARD_TWIST_INDEX:BOARD_INDEX], boardRect,this);

      setBoardParameters(b,boardRect);
      
      b.DrawGrid(gc,boardRect,use_grid,Color.white,Color.black,Color.blue,Color.black);
    }

    private double yScale(int y,int h)
    {	return(1.0-(0.2*y/h));	// scale sizes as y moves toward the top
    }
    private void setBoardParameters(GounkiBoard gb,Rectangle r)
    {	
    	if(twist)
    	{gb.SetDisplayParameters(0.97,0.71,  		// xy scale
    		1.02,-1.25,							// xy offset
    		16.9,			// rot
    		0.185, 			// xper
    		0.16,			// yper
    		-0.0);				// skew
    	} else
    	{gb.SetDisplayParameters(1.12,0.70,  		// xy scale
	    		-0.01,-0.95,							// xy offset
	    		0.0,			// rot
	    		0.16, 			// xper
	    		0.13,			// yper
	    		0);				// skew
    	}
    gb.SetDisplayRectangle(r);
    }
   /* draw the board and the chips on it. */
    private int liftSteps=0;
    private void drawBoardElements(Graphics gc, GounkiBoard gb, Rectangle brect, HitPoint highlight)
    {
     	//
        // now draw the contents of the board and anything it is pointing at
        //
    	Hashtable<GounkiCell,GounkiMovespec>dests = gb.getDests();
    	CellStack current_cells = gb.cellsForCurrentMove;
    	CellStack prev_cells = gb.cellsForPrevMove;
    	GounkiCell current_source = current_cells.size()>0 ? current_cells.elementAt(0) : null;
    	GounkiCell prev_source = prev_cells.size()>0 ? prev_cells.elementAt(0) : null;
    	GounkiCell hitCell = null;
        // conventionally light source is to the right and shadows to the 
        // left, so we want to draw in right-left back-front order so the
        // solid parts will fall on top of existing shadows
    	for (int row = gb.topRow(),stepRow=gb.stepRow(),lastRow=gb.bottomRow()+stepRow;
    			row!=lastRow;
    			row += stepRow)	
    	{ 
    		for (int colNum = gb.leftColNum(),stepCol=gb.stepColNum(),lastCol=gb.rightColNum()+stepCol;
    		     colNum!=lastCol;
    		     colNum+=stepCol)
    		{	// back to front
    		char thiscol = (char)('A'+colNum);
        	// note that these accessors "lastRowInColumn" etc
        	// are not really needed for simple boards, but they
        	// also work for hex boards and boards with cut out corners
            GounkiCell cell = gb.getCell(thiscol,row);
            int rawy = gb.cellToY(thiscol, row);
            int ypos = G.Bottom(brect) - rawy;
            int xpos = G.Left(brect) + gb.cellToX(thiscol, row);
            boolean legal = gb.LegalToHitBoard(cell);
            double yscl = (twist?0.9:1.0)*yScale(rawy-G.Top(brect),G.Height(brect));
            //StockArt.SmallO.drawChip(gc,this,SQUARESIZE/2,xpos,ypos,null);
            if(prev_cells.contains(cell))
            {	double siz = SQUARESIZE*((cell==prev_source)?0.5:0.75)*yscl;
            	StockArt.LandingPad.drawChip(gc,this,(int)siz,xpos,ypos,null);
            }
            if(current_cells.contains(cell))
            {	double siz = SQUARESIZE*((cell==current_source)?0.5:0.75)*yscl;
            	StockArt.LandingPad.drawChip(gc,this,(int)siz,xpos,ypos,null);
            }
            if( cell.drawStack(gc,this,legal?highlight:null,(int)(SQUARESIZE*yscl),xpos,ypos,liftSteps,0.2,null)) 
            	{ hitCell = cell;
            	}
            if(dests.get(cell)!=null)
            {
            	StockArt.SmallO.drawChip(gc,this,SQUARESIZE/2,xpos,ypos,null);
        	}
        	}
    	}
    	if(hitCell!=null)
    	{
      	  highlight.awidth = SQUARESIZE/3;
      	  highlight.arrow = gb.pickedObject!=null ? StockArt.DownArrow:StockArt.UpArrow; 
      	  highlight.spriteColor = Color.red;
    	}
      }
     public void drawAuxControls(Graphics gc,HitPoint highlight)
    {  DrawReverseMarker(gc,reverseRect,highlight);
       DrawAltViewRect(gc,altViewRect,highlight);
    }
    //
    // draw the board and things on it.  If gc!=null then actually 
    // draw, otherwise just notice if the highlight should be on
    //
    public void redrawBoard(Graphics gc, HitPoint highlight)
    {  GounkiBoard gb = (GounkiBoard) disB(gc);

      boolean ourTurn = OurMove();
      boolean moving = getMovingObject()>=0;
      HitPoint ot = ourTurn ? highlight : null;	// hit if our turn
      HitPoint select = moving?null:ot;	// hit if our turn and not dragging
      HitPoint ourSelect = (moving && !reviewMode()) ? null : highlight;	// hit if not dragging
      GounkiState vstate = b.getState();
       redrawGameLog(gc, ourSelect, logRect, boardBackgroundColor);
    
        drawBoardElements(gc, gb, boardRect, ot);
        DrawSampleChipPool(gc, FIRST_PLAYER_INDEX,firstPlayerChipRect, gb.whoseTurn,ot);
        DrawSampleChipPool(gc, SECOND_PLAYER_INDEX, secondPlayerChipRect,gb.whoseTurn,ot);
        G.setFont(gc,standardBoldFont);
		if (vstate != GounkiState.PUZZLE_STATE)
        {
             if (G.handleRoundButton(gc, doneRect, 
            		(b.DoneState()? select : null), s.get(DoneAction),
                    HighlightColor, rackBackGroundColor))
            {	// always display the done button, but only make it active in
            	// the appropriate states
                select.hitCode = DefaultId.HitDoneButton;
            }
            if (allowed_to_edit)
            {
            	if (G.handleRoundButton(gc, editRect, select,
                            s.get(EditAction), HighlightColor,
                            rackBackGroundColor))
                {
                    select.hitCode = DefaultId.HitEditButton;
                }
       }}

 		drawPlayerStuff(gc,(vstate==GounkiState.PUZZLE_STATE),ourSelect,HighlightColor,rackBackGroundColor);

 		DrawCapturedChipPool(gc,0,firstPlayerRack,gb.whoseTurn,highlight);
 		DrawCapturedChipPool(gc,1,secondPlayerRack,gb.whoseTurn,highlight);


        standardGameMessage(gc,
        		vstate==GounkiState.GAMEOVER_STATE?gameOverMessage():s.get(vstate.getDescription()),
        		vstate!=GounkiState.PUZZLE_STATE,
        		gb.whoseTurn,stateRect);
        goalAndProgressMessage(gc,ourSelect,s.get("move a piece to the opposite side of the board"),progressRect, goalRect);

        DrawRepRect(gc,b.Digest(),repRect);
        drawAuxControls(gc,ourSelect);
        drawVcrGroup(ourSelect, gc, HighlightColor, vcrButtonColor);

    }

    /**
     * Execute a move by the other player, or as a result of local mouse activity,
     * or retrieved from the move history, or replayed form a stored game. 
     * @param mm the parameter is a commonMove so the superclass commonCanvas can
     * request execution of moves in a generic way.
     * @return true if all went well.  Normally G.Error would be called if anything went
     * seriously wrong.
     */
     public boolean Execute(commonMove mm,replayMode replay)
    {	
        if(b.getState()==GounkiState.PUZZLE_STATE)
    	{   mm.setSliderNumString("--");
    		switch(mm.op)
        	{
    		case MOVE_DROPB:
    			lastDropped = b.pickedObject;
    			break;
        	case MOVE_PICK: 
        	case MOVE_PICKB: 
        		break;
    		default:
    			mm.setLineBreak(true);
        	}
    	}
 
        handleExecute(b,mm,replay);
        
        if(replay!=replayMode.Replay) { playSounds(mm); }
 
        return (true);
    }
/**
 * parse a move specifier on behalf of the current player.  This is called by the 
 * "game" object when it receives a move from the other player.  Note that it may
 * be called while we are in review mode, so the current undoInfo of the board should
 * not be considered.
 */
    public commonMove ParseNewMove(String st)
    {
        return (new GounkiMovespec(st, -1));
    }
    


/**
 * prepare to add nmove to the history list, but also edit the history
 * to remove redundant elements, so that indecisiveness by the user doesn't
 * result in a messy replay.
 * This may require that move be merged with an existing history move
 * and discarded.  Return null if nothing should be added to the history
 * One should be very cautious about this, only to remove real pairs that
 * result in a null move. It is vital that the operations performed on
 * the history are idential in effect to the manipulations of the board
 * undoInfo performed by "nmove".  This is checked by verifyGameRecord().
 * 
 * in commonEditHistory()
 * 
 */
    public commonMove EditHistory(commonMove nmove)
    {
    	return(super.EditHistory(nmove));
    }
    /** 
     * this method is called from deep inside PerformAndTransmit, at the point
     * where the move has been executed and the history has been edited.  It's
     * purpose is to verify that the history accurately represents the current
     * undoInfo of the game, and that the fundamental game machinery is in a consistent
     * and reproducible undoInfo.  Basically, it works by creating a duplicate board
     * resetting it and feeding the duplicate the entire history, and then verifying 
     * that the duplicate is the same as the original board.  It's perfectly ok, during
     * debugging and development, to temporarily change this method into a no-op, but
     * be warned if you do this because it is throwing an error, there are other problems
     * that need to be fixed eventually.
     */
    public void verifyGameRecord()
    {	super.verifyGameRecord();
    }    
    // for reference, here's the standard definition
    //   public void verifyGameRecord()
    //   {	BoardProtocol ourB =  getBoard();
    //   	int ourDig = ourB.Digest();
    //   	BoardProtocol dup = dupBoard = ourB.cloneBoard();
    //   	int dupDig = dup.Digest();
    //   	G.Assert(dupDig==ourDig,"Duplicate Digest Matches");
    //   	dup.doInit();
    //   	int step = History.size();
    //   	int limit = viewStep>=0 ? viewStep : step;
    //   	for(int i=0;i<limit;i++) 
    //   		{ commonMove mv = (commonMove)History.elementAt(i);
    //   		  //G.print(".. "+mv);
    //   		  dup.Execute(mv); 
    //   		}
    //   	int dupRedig = dup.Digest();
    //   	G.Assert(dup.whoseTurn()==ourB.whoseTurn(),"Replay whose turn matches");
    //   	G.Assert(dup.moveNumber()==ourB.moveNumber(),"Replay move number matches");
    //   	if(dupRedig!=ourDig)
    //   	{
    //   	//int d0 = ourB.Digest();
    //   	//int d1 = dup.Digest();
    //   	G.Assert(false,"Replay digest matches");
    //   	}
    //   	// note: can't quite do this because the timing of "SetDrawState" is wrong.  ourB
    //   	// may be a draw where dup is not if ourB is pending a draw.
    //   	//G.Assert(dup.getState()==ourB.getState(),"Replay undoInfo matches");
    //   	dupBoard = null;
    //   }
    
private void playSounds(commonMove mm)
{
	GounkiMovespec m = (GounkiMovespec) mm;

    // add the sound effects
    switch(m.op)
    {
    case MOVE_DEPLOY:
    case MOVE_BOARD_BOARD:
      	 playASoundClip(light_drop,100);
       	 playASoundClip(heavy_drop,100);
   	break;
     case MOVE_PICK:
    	 playASoundClip(light_drop,100);
    	 break;
    case MOVE_PICKB:
    	playASoundClip(light_drop,100);
    	break;
    case MOVE_DROP:
    	break;
    case MOVE_DROPB:
      	 playASoundClip(heavy_drop,100);
      	break;
    default: break;
    }
	
}
public boolean PerformAndTransmit(String str) 
{	//G.print("P "+str);
	return(super.PerformAndTransmit(str));
}

//{	
//	return(super.handleExecute(command));
//}

/**
 * the preferred mouse gesture style is to let the user "pick up" objects
 * by simply clicking on them, but we also allow him to click and drag. 
 * StartDragging is called when he has done this.
 */
	public void StartDragging(HitPoint hp)
    {
        int mo = getMovingObject();
        if ((mo < 0) && (hp.hitCode instanceof GounkiId))// not dragging anything yet, so maybe start
        {
        GounkiId hitObject = (GounkiId)hp.hitCode;
		GounkiCell cell = (GounkiCell)hp.hitObject;
		GounkiChip chip = (cell==null) ? null : cell.topChip();
		if(chip!=null)
		{
	    switch(hitObject)
	    {
	    case ReverseViewButton:
	    	break;
 	    case Black_Chip_Pool:
	    	PerformAndTransmit("Pick B "+cell.row);
	    	break;
	    case White_Chip_Pool:
	    	PerformAndTransmit("Pick W "+cell.row);
	    	break;
	    case BoardLocation:
	    	if((b.getState()==GounkiState.PLAY_STATE)||(b.getState()==GounkiState.PUZZLE_STATE))
	    	{
	    		PerformAndTransmit("Pickb "+cell.col+ " "+(cell.row-2));
	    	}
	    	break;
		case TwistViewButton:
		default:
			break;
        }

        if (getMovingObject() >= 0)
        {	// if we got something started, inform the mouse handler
            hp.dragging = true;
        } 
        }}
    }

	/** 
	 * this is called on "mouse up".  We may have been just clicking
	 * on something, or we may have just finished a click-drag-release.
	 * We're guaranteed just one mouse up, no bounces.
	 */
    public void StopDragging( HitPoint hp)
    {
        CellId id = hp.hitCode;
        if(!(id instanceof GounkiId)) { missedOneClick = performStandardActions(hp,missedOneClick); }
    	else {
   		missedOneClick = false;
   		GounkiId hitObject =(GounkiId)hp.hitCode;
        GounkiState state = b.getState();
		GounkiCell cell = (GounkiCell)hp.hitObject;
		GounkiChip chip = (cell==null) ? null : cell.topChip();
        switch (hitObject)
        {
        default:
        	throw G.Error("Hit Unknown object " + hitObject);
        case TwistViewButton:
        	twistOption.setState(twist = !twist);
        	break;
        case ReverseViewButton:
	       	 reverseOption.setState(b.reverse_y = !b.reverse_y);
	       	 generalRefresh();
        	break;
         case BoardLocation:	// we hit the board 
			switch(state)
			{
			default: throw G.Error("Not expecting drop on filled board in state "+state);
			case DEPLOY2_STATE:
			case DEPLOY_ONLY_STATE:
			case DEPLOY_STATE:
	    		{
	    		GounkiCell dest = b.getDest();
	    		if(cell==dest) { PerformAndTransmit("Pickb "+cell.col+" "+(cell.row-2)); }
	    		else
	    		{
	    		CommonMoveStack possible = b.deployMovesContaining(dest,cell);
	    		GounkiMovespec m = (GounkiMovespec)possible.pop();
	    		GounkiCell intermediate = b.getCell(m.to_col2,m.to_row2);
	    		if(!b.isDest(intermediate) && (cell!=intermediate))
	    		{
	    			PerformAndTransmit("DSTEP "+m.to_col2+" "+(m.to_row2-2));
	    		}
	    		PerformAndTransmit("DSTEP "+cell.col+" "+(cell.row-2));
	    		
	    		}}
				break;
			case CONFIRM_STATE:
			case PLAY_STATE:
			case PUZZLE_STATE:
				if(b.movingObjectIndex()>=0)
				{ if(cell!=null) { PerformAndTransmit("Dropb "+cell.col+" "+(cell.row-2)); }
				}
				else if(chip!=null)
				{
				PerformAndTransmit( "Pickb "+cell.col+" "+(cell.row-2)+" "+chip.chipNumber());
				}
				break;
			}
			break;
			
        case White_Chip_Pool:
        case Black_Chip_Pool:
        	{
        	int mov = b.movingObjectIndex();
        	String col =  (hitObject==GounkiId.Black_Chip_Pool) ? " B " : " W ";
            if(mov>=0) 
			{//if we're dragging a black chip around, drop it.
            	switch(state)
            	{
            	default: throw G.Error("can't drop on rack in undoInfo "+state);
                	case PLAY_STATE:
            		PerformAndTransmit(RESET);
            		break;

               	case PUZZLE_STATE:
            		PerformAndTransmit("Drop"+col+cell.row+" "+mov);
            		break;
            	}
			}
         	}
            break;
        }
    	}
    }

    /**
     * this is a token or tokens that initialize the variation and
     * set immutable parameters such as the number of players
     * and the random key for the game.  It can be more than one
     * token, which ought to be parseable by {@link #performHistoryInitialization}
     * @return return what will be the init type for the game
     */
    public String gameType() 
    { 
    	return(""+b.gametype+" "+b.randomKey); 
   }
    public String sgfGameType() { return(Gounki_SGF); }

    // the format is just what is produced by FormHistoryString
    //
    // this is completely standardized
    //public void performHistoryTokens(StringTokenizer his)
    //{	String command = "";
    //    // now the rest
    //    while (his.hasMoreTokens())
    //    {
    //        String token = his.nextToken();
    //        if (",".equals(token) || ".end.".equals(token))
    //        {
    //            if (!"".equals(command))
    //            {
    //                PerformAndTransmit(command, false,false);
    //                command = "";
    //            }
    //        }
    //       else
    //        {
    //            command += (" " + token);
    //        }
    //    }	
    //}  
    //public void performPlayerInitialization(StringTokenizer his)
    //{	int fp = G.IntToken(his);
    //	BoardProtocol b = getBoard();
    //    if (fp < 0)   {  fp = 0;  }
    //    b.setWhoseTurn(fp);
    //    players[fp].ordinal = 0;
    //    players[(fp == 0) ? 1 : 0].ordinal = 1;
    //	
    //}

    
    
    /**
     * parse and perform the initialization sequence for the game, which
     * was produced by {@link #gameType}
     */
    public void performHistoryInitialization(StringTokenizer his)
    {	String token = his.nextToken();		// should be a checker init spec
    	long rk = G.LongToken(his);
    	// make the random key part of the standard initialization,
    	// even though games like checkers probably don't use it.
        b.doInit(token,rk);
    }

    
 //   public void doShowText()
 //   {
 //       if (debug)
 //       {
 //           super.doShowText();
 //       }
 //       else
 //       {
 //           theChat.postMessage(GAMECHANNEL,KEYWORD_CHAT,
 //               s.get(CensoredGameRecordString));
//        }
//    }

    /** handle action events
     * 
     */
    public boolean handleDeferredEvent(Object target, String command)
    {	if(target==twistOption)
    	{	twist = twistOption.getState();
    		generalRefresh();
    		return(true);
    	}
    	else if(target==reverseOption)
    	{
    	b.reverse_y = reverseOption.getState();
    	generalRefresh();
    	return(true);
    	}
    	else { return(super.handleDeferredEvent(target,command)); }
     }
/** handle the run loop, and any special actions we need to take.
 * The mouse handling and canvas painting will be called automatically
 *  */
    

    public BoardProtocol getBoard()   {    return (b);   }
    public SimpleRobotProtocol newRobotPlayer() { return(new GounkiPlay()); }


    /** replay a move specified in SGF format.  
     * this is mostly standard stuff, but the key is to recognize
     * the elements that we generated in sgf_save
     */
    public void ReplayMove(sgf_node no)
    {
        String comments = "";
        sgf_property prop = no.properties;

        while (prop != null)
        {
            String name = prop.getName();
            String value = (String) prop.getValue();

            if (setup_property.equals(name))
            {	StringTokenizer st = new StringTokenizer(value);
            	String typ = st.nextToken();
            	long ran = G.LongToken(st);
                b.doInit(typ,ran);
                resetBounds();
             }
            else if (name.equals(comment_property))
            {
                comments += value;
            }
            else if (name.equals(game_property))
            {
                if (! value.equals(Gounki_SGF))
                {
                	throw G.Error("game type " + value + " is not this game");
                }
            }
            else if (parseVersionCommand(name,value,2)) {}
            else if (parsePlayerCommand(name,value)) {}
            else 
            {
                replayStandardProps(name,value);
            }

            prop = prop.next;
        }

        if (!"".equals(comments))
        {
            setComment(comments);
        }
    }
    
}


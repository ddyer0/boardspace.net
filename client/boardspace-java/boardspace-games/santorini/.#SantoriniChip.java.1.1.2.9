package santorini;

import java.awt.Image;
import lib.Random;
import online.game.*;
import online.common.*;

/*
 * generic "playing piece class, provides canonical playing pieces, 
 * image artwork, scales, and digests.  For our purposes, the squares
 * on the board are pieces too, so there are four of them.
 * 
 */
public class SantoriniChip extends chip
{	
	private int colorIndex;
	
	public int chipNumber() { return(colorIndex); }

    static final int FIRST_CHIP_INDEX = 0;
    public StockArt getAltChip(int set)
    {	if((this==MainTile)&&(set>0)) { return(AltTile); }
    	return(this);
    }
	private SantoriniChip(String na,int pla,Image im,long rv,double scl[])
	{	
		colorIndex=pla;
		image = im;
		randomv = rv;
		scale = scl;
		file = na;
	}

	
	// note, do not make these private, as some optimization failure
	// tries to access them from outside.
    static private SantoriniChip CANONICAL_PIECE[] = null;	// created by preload_images
    static private double SCALES[][] =
    {	{0.538,0.456,1.5},		// square
    	{0.5,0.5,1.5},		// alternate square
    	{0.585,0.515,1.0},	// dome 
       	{0.586,0.50,1.0},	// cube-a 
       	{0.553,0.559,1.0},		// cube-b
       	{0.468,0.50,1.05},		// cylinder-a
       	{0.53,0.476,1.175}		// cylinder-b
        
    };
     
	public static SantoriniChip getChip(int color)
	{	return(CANONICAL_PIECE[FIRST_CHIP_INDEX+color]);
	}

  /* pre load images and create the canonical pieces
   * 
   */
   static public SantoriniChip MainTile = null;
   static public SantoriniChip AltTile = null;
   static public SantoriniChip Dome = null;
   static public SantoriniChip Cube_A = null;
   static public SantoriniChip Cube_B = null;
   static public SantoriniChip Cylinder_A = null;
   static public SantoriniChip Cylinder_B = null;
   static final String[] ImageNames = 
       {"square-b","square-a",  "dome","cube-a","cube-b","cylinder-a","cylinder-b"};
 
	// call from the viewer's preloadImages
	public static void preloadImages(exCanvas forcan,String ImageDir)
	{	if(CANONICAL_PIECE==null)
		{
		int nColors = ImageNames.length;
        Image IM[]=forcan.load_masked_images(ImageDir,ImageNames);
        SantoriniChip CC[] = new SantoriniChip[nColors];
        Random rv = new Random(343535);		// an arbitrary number, just change it
        for(int i=0;i<nColors;i++) 
        	{
        	CC[i]=new SantoriniChip(ImageNames[i],i-FIRST_CHIP_INDEX,IM[i],rv.nextLong(),SCALES[i]); 
        	}
        CANONICAL_PIECE = CC;
        MainTile = CC[0];
        AltTile = CC[1];
        Dome = CC[2];
        Cube_A = CC[3];
        Cube_B = CC[4];
        Cylinder_A = CC[5];
        Cylinder_B = CC[6];
        check_digests(CC);
		}
	}


}

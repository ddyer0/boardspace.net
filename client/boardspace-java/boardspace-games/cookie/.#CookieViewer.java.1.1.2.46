package cookie;

import online.common.*;

import java.awt.*;
import java.util.*;

import lib.*;
import online.game.*;
import online.game.sgf.*;

/**
 * 
 * Overall Architecture
 * 
 * The site provides the lobby, choice game and opponents, communication between the players, information 
 * for spectators,  rankings, and a host of other services.  Each game has to be concerned only with 
 * the game itself.   An individual game (say, Hex) is launched and each client independantly initializes
 * itself to a common starting state.   Thereafter each player specifies messages to be broadcast to the
 * other participants, and receives messages being broadcast by the other participants, which keep everyone
 * informed about the state of the game.  There is no common "true" state of the game - all the participants
 * keep in step by virtue of seeing the same stream of messages.    Messages are mostly simple "pick up a stone"
 * "place a stone on space x" and so on.
 * 
 * The things a game must implement are specified by the class "ViewerProtocol", and a game could just
 * start there and be implemented completely from scratch, but in practice there is another huge pile
 * of things that every game has to do; dealing with graphis, mouse events, saving and restoring the
 * game state from static records, replaying and reviewing games and so on.   These are implemented in the 
 * class "commonCanvas" and by several board-like base classes for Hex and Square geometry boards.   
 * All the existing games for boardspace use these classes to provide graphics and basic board representation.
 * 
 * For games with robot players, there is another huge pile of things that a robot has to do, generating
 * moves, evaluating and choosing the best, and implementing a lookahead several moves deep.   There's a
 * standard framework for this using the "RobotProtocol" class and the "SearchDriver" class. 
 */

/**
 * 
 * Change History
 */
public class CookieViewer extends commonCanvas 
	implements ViewerProtocol, CookieConstants, sgf_names
{	static final long serialVersionUID = 1000;
     // colors
    private Color reviewModeBackground = new Color(220,165,200);
    private Color HighlightColor = new Color(0.2f, 0.95f, 0.75f);
    private Color rackBackGroundColor = new Color(176,185,225);
    private Color boardBackgroundColor = new Color(176,185,225);
    private Color vcrButtonColor = new Color(0.7f, 0.7f, 0.75f);

   
    // private state
    private CookieBoard bb = null; //the board from which we are displaying
    private int CELLSIZE; 	//size of the layout cell
    private final double INITIAL_TILE_SCALE = 3.0;
    private double board_center_x = 0.0;
    private double board_center_y = 0.0;

    // addRect is a service provided by commonCanvas, which supports a mode
    // to visualize the layout during development.  Look for "show rectangles"
    // in the options menu.
    //public Rectangle fullRect = addRect("fullRect"); //the whole viewer area
    //public Rectangle boardRect = addRect("boardRect"); //the actual board, normally at the left edge
    //public Rectangle chatRect = addRect("chatRect");
    private Rectangle logRect = addRect("logRect"); //the game log, normally off the the right
    private Rectangle stateRect = addRect("stateRect");
    private Rectangle firstPlayerLogoRect = addRect("firstPlayerLogo");
    private Rectangle secondPlayerLogoRect = addRect("secondPlayerLogo");
    private Rectangle swapRect = addRect("swapRect");
    private Rectangle doneRect = addRect("doneRect");
    private Rectangle editRect = addRect("editRect");
    private Rectangle goalRect = addRect("goalRect");
    private Rectangle repRect = addRect("repRect");	// not needed for hex
    private Rectangle progressRect = addRect("progressRect");
    private Rectangle chipRect = addRect("firstPlayerChipRect");
    private Slider zoomRect = null;
    private Color ZoomColor = new Color(0.0f,0.0f,1.0f);

	private Image textures[] = null;

    public void preloadImages()
    {	CookieChip.preloadImages(this,ImageDir);
    	if(textures==null)
    	{
            textures = load_images(ImageDir,TextureNames);
    	}
    }

	/**
	 * 
	 * this is the real instance intialization, performed only once.
	 * info contains all the goodies from the environment.
	 * */
    public void init(exHashtable info)
    {
        super.init(info);
        int randomKey = info.getInt(exHashtable.RANDOMSEED,-1);
        zoomRect = addSlider("zoomRect",s.get("Tile Size"),CookieId.ZoomSlider);
        zoomRect.min=1.0;
        zoomRect.max=5.0;
        zoomRect.value=INITIAL_TILE_SCALE;
        zoomRect.barColor=ZoomColor;
        zoomRect.highlightColor = HighlightColor;   
        labelColor = Color.red;
        labelFont = largeBoldFont;
        
        bb = new CookieBoard(info.getString(exHashtable.GAMETYPE, "Cookie"));
        doInit(false,randomKey);
    }
    public void doInit(boolean preserve)
    {	doInit(preserve,bb.randomKey);
    }
    /** 
     *  used when starting up or replaying and also when loading a new game 
     *  */
    public void doInit(boolean preserve_history,long rand)
    {	
        //System.out.println(myplayer.trueName + " doinit");
        super.doInit(preserve_history);				// let commonViewer do it's things
        
        bb.doInit(bb.gametype,rand);						// initialize the board
      
   	 	if(!preserve_history) 
   	 		{ zoomRect.setValue(INITIAL_TILE_SCALE);
   	 		  board_center_x = board_center_y = 0.0; 
   	 		  PerformAndTransmit(reviewOnly?"Edit":"Start P0", false,replayMode.Replay);
   	 		}
 
     }

	/**
	 * this is the main method to do layout of the board and other widgets.  I don't
	 * use swing or any other standard widget kit, or any of the standard layout managers.
	 * they just don't have the flexibility to produce the results I want.  Your milage
	 * may vary, and of course you're free to use whatever layout and drawing methods you
	 * want to.  However, I do strongly encourage making a UI that is resizable within
	 * reasonable limits, and which has the main "board" object at the left.
	 * 
	 *  The basic layout technique used here is to start with a cell which is about the size
	 *  of a board square, and lay out all the other objects relative to the board or to one
	 *  another.  The rectangles don't all have to be on grid points, and don't have to
	 *  be nonoverlapping, just so long as the result generally looks good.
	 *  
	 *  When "extraactions" is available, a menu opion "show rectangles" works
	 *  with the "addRect" mechanism to help visualize the layout.
	 */ 
    public void setLocalBounds(int x, int y, int width, int height)
    {
        int ncols = 50; // more cells wide to allow for the aux displays
        int nrows = 23 ;  
        int cellw = width / ncols;
        int chatHeight = selectChatHeight(height);
        int cellh = (height-chatHeight) / nrows;
        
        CELLSIZE = Math.max(2,Math.min(cellw, cellh)); //cell size appropriate for the aspect ratio of the canvas

        G.SetRect(fullRect,0,0,width,height);

        int boardY = chatHeight+CELLSIZE*2;
        int boardW = CELLSIZE * 3*nrows/2;
        G.SetRect(boardRect, CELLSIZE,boardY, boardW,height-boardY-CELLSIZE*2);

        G.SetRect(stateRect, CELLSIZE/2, chatHeight+CELLSIZE/2,boardW-CELLSIZE*6,CELLSIZE);
         
        int logW = CELLSIZE * 14;
        G.SetRect(logRect,width-logW-CELLSIZE/2,y,logW,chatHeight);

        G.SetRect(chatRect,x,y,width-logW-CELLSIZE,chatHeight);


		// a pool of chips for the first player at the top
        G.SetRect(chipRect, G.Right(boardRect)+CELLSIZE,G.Top( boardRect)+G.Height(boardRect)/2-6*CELLSIZE-CELLSIZE/2,
        		 3*CELLSIZE,12*CELLSIZE);

		//this sets up the "vcr cluster" of forward and back controls.
        SetupVcrRects(G.Left(boardRect), G.Bottom(boardRect) - (4 * CELLSIZE), CELLSIZE * 9, 4 * CELLSIZE);
        
        G.SetRect(goalRect, G.Left(boardRect)+5*CELLSIZE,G.Bottom(boardRect),G.Width(boardRect)-10*CELLSIZE, CELLSIZE*2);
        
        G.SetRect(progressRect,G.Left( goalRect)+G.Width(goalRect)/6,G.Top(goalRect),G.Width( goalRect), CELLSIZE/2);

        
        {
            commonPlayer pl0 =getPlayerOrTemp(0);
            commonPlayer pl1 = getPlayerOrTemp(1);
            Rectangle p0time = pl0.timeRect;
            Rectangle p1time = pl1.timeRect;
            Rectangle p0xtime = pl0.extraTimeRect;
            Rectangle p1xtime = pl1.extraTimeRect;
            Rectangle p0anim = pl0.animRect;
            Rectangle p1anim = pl1.animRect;
            	
            Rectangle firstPlayerRect = pl0.nameRect;
            Rectangle secondPlayerRect = pl1.nameRect;
            Rectangle firstPlayerPicRect = pl0.picRect;
            Rectangle secondPlayerPicRect = pl1.picRect;

            //first player name
            G.SetRect(firstPlayerRect, G.Right(boardRect)+CELLSIZE*3, chatHeight+CELLSIZE/2,CELLSIZE * 6,(3 * CELLSIZE) / 2);
     
            G.SetRect(firstPlayerLogoRect, G.Left(firstPlayerRect),G.Bottom(firstPlayerRect),CELLSIZE*3, CELLSIZE*4);

            // first player portrait
            G.SetRect(firstPlayerPicRect, G.Right(firstPlayerLogoRect)+CELLSIZE,G.Top(firstPlayerLogoRect)+CELLSIZE,CELLSIZE * 5, CELLSIZE * 5);
 
            // "edit" rectangle, available in reviewers to switch to puzzle mode
            G.SetRect(editRect, G.Right(chipRect)+CELLSIZE, G.Bottom(firstPlayerPicRect)+CELLSIZE, CELLSIZE*5, 3*CELLSIZE/2);
           
            G.SetRect(swapRect,G.Left( editRect), G.Bottom(editRect)+CELLSIZE/2,G.Width( editRect),G.Height( editRect));
            
            G.SetRect(repRect,G.Left( swapRect),G.Top( swapRect), CELLSIZE*6,G.Height( swapRect));

            //second player name
            G.SetRect(secondPlayerRect,G.Left( firstPlayerRect), G.Bottom(boardRect)+CELLSIZE/2 - G.Height(firstPlayerRect),
            			G.Width( firstPlayerRect),G.Height(firstPlayerRect));

     
             
            G.SetRect(secondPlayerLogoRect,G.Left( firstPlayerRect),G.Top(secondPlayerRect)-G.Height(firstPlayerLogoRect),
            		G.Width(firstPlayerLogoRect),G.Height( firstPlayerLogoRect));           // time display for first player
            // player 2 portrait
            G.SetRect(secondPlayerPicRect, G.Right(secondPlayerLogoRect)+CELLSIZE,G.Top(secondPlayerRect) -G.Height(firstPlayerPicRect)-CELLSIZE,
            		G.Width(firstPlayerPicRect),G.Height(firstPlayerPicRect));
  
            
            // "done" rectangle, should alway be visible, but only active when a move is complete.
            G.SetRect(doneRect,G.Left( swapRect),G.Bottom(swapRect)+CELLSIZE/2,G.Width( editRect),G.Height( editRect));
           
            G.SetRect(p0time, G.Right(firstPlayerRect),G.Top( firstPlayerRect), CELLSIZE * 3,2*CELLSIZE/3);
            G.SetRect(p0xtime,G.Left( p0time), G.Bottom(p0time),G.Width(p0time),G.Height( p0time));
         
            
            // first player "i'm alive" animation ball
            G.SetRect(p0anim, G.Right(p0time),G.Top( p0time),CELLSIZE, CELLSIZE);
            // time display for second player
            G.SetRect(p1time, G.Right(secondPlayerRect),G.Top( secondPlayerRect),G.Width( p0time),G.Height(p0time));
            G.SetRect(p1xtime,G.Left(p1time),G.Bottom(p1time),G.Width( p1time),G.Height(p1time));

            G.SetRect(p1anim,G.Left( p0anim),G.Top( p1time),G.Width( p0anim),G.Height( p0anim));
         }
 
         
        G.SetRect(zoomRect,G.Right( stateRect),G.Top(stateRect), CELLSIZE*7,G.Height( stateRect));

        positionTheChat(chatRect,Color.white,Color.white);
        generalRefresh();
    }

    private void DrawLogo(Graphics gc,HitPoint highlight,Rectangle r,int player)
    {	
    	CookieCell c = bb.playerChip[player];
    	int width = G.Width(r);
    	int cx = G.Left(r)+width/2;
    	int cy = G.Top(r)+G.Height(r)/2;
    	if(c.drawStack(gc,bb.LegalToHitChips(c)?highlight:null,
    			cx,cy,
    			this,0,G.Width(r),1.0,""))
    	{
            if(highlight.hitObject!=null)
            {	highlight.arrow = (bb.pickedObject==null)?StockArt.UpArrow:StockArt.DownArrow;
            	highlight.awidth = G.Width(r);
            }
    	}
    }

	// draw a box of spare chips. For hex it's purely for effect.
    private void DrawChipPool(Graphics gc, Rectangle r, int player, HitPoint highlight,CookieBoard gb)
    {
        
        for(int i=0,ystep=G.Height(r)/3,y=G.Top(r)+ystep/2,x=G.Left(r)+G.Width(r)/2;
        	i<CookieChip.nChips;
        	i++,y+=ystep)
        {	CookieCell c = gb.chipPool[i];
        	boolean canhit = gb.LegalToHitChips(c);
        	CookieChip chip = c.topChip();
        	labelColor = Color.white;
        	if(c.drawStack(gc,canhit?highlight:null,
        			x,y,
        			this,0,G.Width(r),1.0,""+chip.value))
        	{
        	highlight.arrow = (gb.pickedObject==null)?StockArt.UpArrow:StockArt.DownArrow;
        	highlight.awidth = G.Width(r);
        	}
        }
    }
    //
    // sprites are normally a game piece that is "in the air" being moved
    // around.  This is called when dragging your own pieces, and also when
    // presenting the motion of your opponent's pieces, and also during replay
    // when a piece is picked up and not yet placed.  While "obj" is nominally
    // a game piece, it is really whatever is associated with b.movingObject()
    //
    public void drawSprite(Graphics g,int obj,int xp,int yp)
    {	boolean inboard = boardRect.contains(xp,yp);
   		int cellS = inboard? (int)(bb.CELLSIZE) : G.Width(chipRect) ;
    	// draw an object being dragged
    	// use the board cell size rather than the window cell size
   		CookieChip chip = CookieChip.getChip(obj%100);
     	if(obj>100)
     		{ CookieChip second = CookieChip.getChip(obj/100);
     		  int yp1 = G.Bottom(boardRect)-yp;
     		  CookieCell close = bb.closestCell(xp,yp1);
     		  if(close!=null && (close.topChip()!=null))
     		  {	CookieCell src = bb.getSource();
     		  	if(src!=null)
     		  	{	Point pt = bb.cellToXY(src.col,src.row,boardRect);	// calculate xy wrapped
     		  		int xp2 = G.Left(pt);
     		  		int yp2 =G.Top(pt);
     		  		chip.drawChip(g,this,cellS, xp2,yp2, null);
     		  		G.DrawAACircle(g,xp2,yp2,2,Color.green,Color.yellow,true);
     		  	}
     			 
     		  }
     		  else
     		  {
     		  	chip.drawChip(g,this,cellS, xp, yp, null);
     		  }
     	      
        	  second.drawChip(g,this,cellS, xp, yp, null);
     		}
     		else
     		{ chip.drawChip(g,this,cellS, xp, yp, null);
     		}

    }
    // also related to sprites,
    // default position to display static sprites, typically the "moving object" in replay mode
    //public Point spriteDisplayPoint()
    //{	BoardProtocol b = getBoard();
    //	int celloff = b.cellSize();
    //	return(new Point(G.Right(boardRect)-celloff,G.Bottom(boardRect)-celloff));
    //}  


    /* draw the deep unchangable objects, including those that might be rather expensive
     * to draw.  This background layer is used as a backdrop to the rest of the activity.
     * in our cease, we draw the board and the chips on it. 
     * */
    public void drawFixedElements(Graphics gc)
    { // erase
      boolean review = reviewMode() && !mutable_game_record;
      G.setColor(gc,review ? reviewModeBackground : boardBackgroundColor);
      G.tileImage(gc,textures[BACKGROUND_TILE_INDEX], fullRect, this);   
          G.tileImage(gc,textures[review ? BACKGROUND_REVIEW_INDEX:BACKGROUND_TABLE_INDEX],
          		boardRect, this); 
      G.frameRect(gc,Color.black,boardRect); 
        
    
    }
    public void ShowDirections(Graphics gc,CookieBoard gb,int xpos,int ypos,CookieCell c)
    {
    	if(gc!=null)
    	{
    		int xp0 = gb.cellToX(c.col,c.row);
    		int yp0 = gb.cellToY(c.col,c.row);
		   	for(int i =0;i<CookieBoard.CELL_FULL_TURN();i++)
		   	{
		   		CookieCell nc = c.exitTo(i);
		   		if(nc!=null)
		   		{
		   		int xp = gb.cellToX(nc.col,nc.row);
		   		int yp = gb.cellToY(nc.col,nc.row);
		   		G.Text(gc,false,xpos+xp-xp0,ypos+yp-yp0,10,10,Color.black,null,""+i);
		   		}
		   	}}
    }

   /* draw the board and the chips on it. the gc will normally draw on a background
    * array which contains the slowly changing part of the board. 
    * */

    private void drawBoardElements(Graphics gc, CookieBoard gb, Rectangle tbRect,
    		HitPoint ourTurnSelect,HitPoint anySelect)
    {	
       Rectangle oldClip = G.setClip(gc,tbRect);
   	   HitPoint mo = dragPoint;
   	   boolean canHitAny = G.pointInRect(anySelect,tbRect);
   	   boolean canHit = G.pointInRect(ourTurnSelect,tbRect);
       boolean draggingBoard = canHitAny && (mo!=null) && (mo.hitCode==CookieId.InvisibleDragBoard);
       if(draggingBoard)
    	{	double center_x = (board_center_x*G.Width(tbRect))+(G.Left(anySelect)-G.Left(mo))*12;
    	    double center_y = (board_center_y*G.Height(tbRect))-(G.Top(anySelect)-G.Top(mo))*12;
    	    board_center_x = center_x / G.Width(tbRect);
    	    board_center_y = center_y / G.Height(tbRect);
    	    G.SetTop(mo,G.Top( anySelect));
    	    G.SetLeft(mo,G.Left(anySelect));
    	    repaint(20);
    	}
    	
    	//
        // now draw the contents of the board and anything it is pointing at
        //
        Hashtable<CookieCell,CookieMovespec> dests = gb.movingObjectDests();
        CookieCell sourceCell = gb.getSource();
        CookieCell destCell = gb.getDest();
        int cellSize = (int)gb.CELLSIZE;
   	 	Point empty = gb.emptyColumn();	// get an empty col/row to start the display
      // precalculate the spanning size of the board.
        int ncols = gb.ncols;
        //System.out.println("cs "+cs/CELLSIZE+ " "+cs+" "+CELLSIZE);
        if(ourTurnSelect!=null) {  ourTurnSelect.awidth = cellSize; }
        for (int col0 = ncols-1; col0 >=0 ; col0--)
        {	int col = (col0+G.Left(empty))%ncols;
           char thiscol = (char) ('A' + col);
           int lastincol = gb.nInCol[col];
           for (int thisrow0 = lastincol-1;
             	   thisrow0 >= 0; 
             	   thisrow0--) // start at row 1 (0 is the grid) 
            { //where we draw the grid
           	int dispRow = (thisrow0+G.Top(empty))%lastincol+1 + gb.firstRowInCol[col];
            Point cp = gb.cellToXY(thiscol,dispRow,tbRect);	// calculate xy wrapped
            int xpos = G.Left(cp);
            int ypos = G.Top(cp);
              
                {
                CookieCell ccell = gb.getCell(thiscol,dispRow);
                                
                boolean isADest = dests.get(ccell)!=null;
                boolean isASource = (ccell==sourceCell)||(ccell==destCell);
                boolean canHitThis = canHit && gb.LegalToHitBoard(ccell);
                //String labl = "";//+ccell.col+ccell.row;
            //    labelColor = Color.red;
            //    String loops = " ";
            //    gb.WinForPlayerNow(0);
            //    if((ccell.loopCode&CookieChip.center_loop_code)!=0) { loops +="c"; }
            //    if((ccell.loopCode&CookieChip.incomplete_yellow_code)!=0) { loops += "y"; }
            //    if((ccell.loopCode&CookieChip.yellow_loop_code)!=0) { loops +="Y"; }
            //    if((ccell.loopCode&CookieChip.incomplete_blue_code)!=0) { loops += "b"; }
            //    if((ccell.loopCode&CookieChip.blue_loop_code)!=0) { loops +="B"; }
                if(ccell.drawStack(gc,canHitThis?ourTurnSelect:null,
            			xpos,ypos,
            			this,0,cellSize,1.0,use_grid?(""+ccell.col+ccell.row):null ))
                {	 //if(gc!=null) { gc.drawOval(xpos-cellSize/2,ypos-cellSize/2,cellSize,cellSize); }
                    ourTurnSelect.hitCode = CookieId.BoardLocation;
                    ourTurnSelect.arrow = ((gb.pickedObject!=null)||isADest)?StockArt.DownArrow:StockArt.UpArrow;
                     
                //	for(int i=0;i<6;i++) 
            	//	{ 
            	//	CookieCell c = ccell.exitTo(i);
                //   int ypos1 = gb.cellToY(c.col, c.row);
                //    int xpos1 = gb.cellToX(c.col, c.row);
                //    ypos1 = (tbRect.y + tbRect.height) - ypos1;
                //    xpos1 += tbRect.x;
                //    G.Text(gc,true,xpos1-30,ypos1-10,60,20,Color.black,null,""+c.col+c.row+"("+i+")");
            	//	}
                   canHit = canHitAny = false;
                }
                
                if(gb.cherryCell==null) {}
                else if(gb.crawlOption)
            	{
                boolean cherryDrawn = false;
            	if((ccell==gb.crawlCell) 
            			&& !gb.activeCrawlAnimations()
            			&& (gb.getSource()!=gb.crawlCell) 
            			&& (gb.pickedObject!=CookieChip.Crawl))
            	{	
            		if((ccell!=gb.cherryCell) && (ccell.topChip()==gb.cherryChip)) // single cherry on the locked color
            		{	// if the cookie under the crawl cookie is locked, draw the cherry under
                	CookieChip.Cherry.drawChip(gc,this,cellSize/2,xpos,ypos,null);
                	cherryDrawn = true;
                	}
            		CookieChip.Crawl.drawChip(gc,this,cellSize,xpos,ypos,null);
            	}
            	if((ccell==gb.cherryCell) && (ccell.activeAnimationHeight()==0))
            		{	// double cherry on the chip moved
            		CookieChip.Cherry.drawChip(gc,this,cellSize/2,xpos-CELLSIZE/2,ypos-CELLSIZE/2,null); 
      			  	CookieChip.Cherry.drawChip(gc,this,cellSize/2,xpos+CELLSIZE/2,ypos+CELLSIZE/4,null); 
            		}
            		else if(!cherryDrawn && (ccell.topChip()==gb.cherryChip) && (ccell.activeAnimationHeight()==0))
            		{
            			CookieChip.Cherry.drawChip(gc,this,cellSize/2,xpos,ypos,null);
            		}
            	}
                else if((ccell==gb.cherryCell) && (ccell.activeAnimationHeight()==0)) // single cherry on the locked color
            	{
            	CookieChip.Cherry.drawChip(gc,this,cellSize/2,xpos,ypos,null);
            	}
                
                if (gc != null)
                {
                //G.DrawAACircle(gc,xpos,ypos,1,tiled?Color.green:Color.blue,Color.yellow,true);
                //if(cell.topChip()!=null) { ShowDirections(gc,gb,xpos,ypos,cell); }
                if(isASource)
                	{G.DrawAACircle(gc,xpos,ypos,2,Color.green,Color.yellow,true);
                	} else
                if(isADest)
                	{G.DrawAACircle(gc,xpos,ypos,3,Color.red,Color.yellow,true);
                	}
                //if(ccell.topChip()==null) { G.Text(gc,true,xpos-CELLSIZE*2,ypos-CELLSIZE*2,CELLSIZE*4,CELLSIZE*4,Color.white,null,""+ccell.col+ccell.row); }
  
                }
            }}
        }
        if(gb.crawlOption && (gb.crawlCell==null))
    	{	// draw the crawl cookie in the corner of the board if not elsewhere
        	int xp = G.Right(tbRect)-cellSize;
        	int yp = G.Top(tbRect)+cellSize;
        	CookieChip.Crawl.drawChip(gc,this,cellSize,xp,yp,null);
    	}
      
 		if((canHitAny && ((mo==null) && !G.pointInRect(anySelect,vcrRect)) ||draggingBoard))
    	{ //let him drag anywhere, just don't annoy with the hand icon.
    		anySelect.hitCode=CookieId.InvisibleDragBoard;
    		anySelect.dragging = anySelect.down;
    	}
 		
         
 		G.setClip(gc,oldClip);
    }

    /*
     * draw the main window and things on it.  
     * If gc!=null then actually draw, 
     * If selectPos is not null, then as you draw (or pretend to draw) notice if
     * you are drawing under the current position of the mouse, and if so if you could
     * click there to do something.  Care must be taken to consider if a click really
     * ought to be allowed, considering spectator status, use of the scroll controls,
     * if some board token is already actively moving, and if the game is active or over.
     * 
     * This dual purpose (draw, and notice mouse sensitive areas) tends to make the
     * code a little complicated, but it is the most reliable way to make sure the
     * mouse logic is in sync with the drawing logic.
     * 
    General GUI checklist

    vcr scroll section always tracks, scroll bar drags
    lift rect always works
    zoom rect always works
    drag board always works
    pieces can be picked or dragged
    moving pieces always track
    stray buttons are insensitive when dragging a piece
    stray buttons and pick/drop are inactive when not on turn
*/
    public void redrawBoard(Graphics gc, HitPoint selectPos)
    {  CookieBoard gb = (CookieBoard)disB(gc);
       CookieState state = gb.getState();
       boolean moving = (getMovingObject()>=0);
       // 
       // if it is not our move, we can't click on the board or related supplies.
       // we accomplish this by supressing the highlight pointer.
       //
       HitPoint ourTurnSelect = OurMove() ? selectPos : null;
       //
       // even if we can normally select things, if we have already got a piece
       // moving, we don't want to hit some things, such as the vcr group
       //
       HitPoint buttonSelect = moving ? null : ourTurnSelect;
       // hit anytime nothing is being moved, even if not our turn or we are a spectator
       HitPoint nonDragSelect = (moving && !reviewMode()) ? null : selectPos;
       
       redrawGameLog(gc, nonDragSelect, logRect, boardBackgroundColor);
       drawBoardElements(gc, gb, boardRect, ourTurnSelect,nonDragSelect);
       DrawChipPool(gc, chipRect, FIRST_PLAYER_INDEX, ourTurnSelect,gb);
       DrawLogo(gc,ourTurnSelect,firstPlayerLogoRect,0);
       DrawLogo(gc,ourTurnSelect,secondPlayerLogoRect,1);
       zoomRect.draw(gc,nonDragSelect);
       
       G.setFont(gc,standardBoldFont);
     
       drawPlayerStuff(gc,(state==CookieState.PUZZLE_STATE),moving?null:selectPos,
	   			HighlightColor, rackBackGroundColor);

		if (state != CookieState.PUZZLE_STATE)
        {	// if in any normal "playing" state, there should be a done button
			// we let the board be the ultimate arbiter of if the "done" button
			// is currently active.
            if (G.handleRoundButton(gc, doneRect, 
            		(gb.DoneState() ? buttonSelect : null), s.get(DoneAction),
                    HighlightColor, rackBackGroundColor))
            {	// always display the done button, but only make it active in
            	// the appropriate states
                buttonSelect.hitCode = DefaultId.HitDoneButton;
            }
            if((state==CookieState.CONFIRM_SWAP_STATE)||(state==CookieState.PLACE_OR_SWAP_STATE))
            {	if (G.handleRoundButton(gc, swapRect, 
            		buttonSelect, s.get(SWAP),
                    HighlightColor, rackBackGroundColor))
            	{	// always display the done button, but only make it active in
            	// the appropriate states
            	buttonSelect.hitCode = DefaultId.HitSwapButton;
            	}
            }
            if (allowed_to_edit)
            {	// reviewer is active if there was a game here, and we were a player, 
            	// or all the time in review rooms.
                {	// we're allowed to edit the board, so we need an edit button
                    if (G.handleRoundButton(gc, editRect, buttonSelect, s.get(EditAction),
                                HighlightColor, rackBackGroundColor))
                    {
                        buttonSelect.hitCode = DefaultId.HitEditButton;
                    }
     
            }
          }}


        // draw the avatars
            standardGameMessage(gc,
            		state==CookieState.GAMEOVER_STATE?gameOverMessage():s.get(state.getDescription()),
            				state!=CookieState.PUZZLE_STATE,
            				gb.whoseTurn,
            				stateRect);
            goalAndProgressMessage(gc,selectPos,s.get("Split the cookies and get most of them"),progressRect, goalRect);
            DrawRepRect(gc,gb.Digest(),repRect);	// Not needed for hex
        
        // draw the vcr controls
        drawVcrGroup(nonDragSelect, gc, HighlightColor, vcrButtonColor);

    }

    /**
     * Execute a move by the other player, or as a result of local mouse activity,
     * or retrieved from the move history, or replayed form a stored game. 
     * @param mm the parameter is a commonMove so the superclass commonCanvas can
     * request execution of moves in a generic way.
     * @return true if all went well.  Normally G.Error would be called if anything went
     * seriously wrong.
     */
     public boolean Execute(commonMove mm,replayMode replay)
    {	
    	 // record some state so the game log will look pretty
        if(bb.getState()==CookieState.PUZZLE_STATE)
    	{   mm.setSliderNumString("--");
    		switch(mm.op)
        	{
        	case MOVE_PICK: 
        	case MOVE_PICKB: 
        		break;
    		default:
    			mm.setLineBreak(true);
        	}
    	}
        bb.animationStack.clear();
        
        handleExecute(bb,mm,replay);
        
        startBoardAnimations(replay);
      
		lastDropped = bb.lastDroppedDest;	// this is for the image adjustment logic
		if(replay!=replayMode.Replay) { playSounds((CookieMovespec)mm); }
       return (true);
    }
     
    void startBoardAnimations(replayMode replay)
     {
        if(replay!=replayMode.Replay)
     	{	CellStack animationStack = bb.animationStack;
     		int lim = animationStack.size();
      		if(lim>0)
     		{
    		CookieCell target = animationStack.top();
       		boolean movingCrawlCookie = (bb.crawlCell==target);
     		CookieChip chip = target.topChip();
     		if(chip!=null)
     		{
     		double speed = masterAnimationSpeed*1.0/lim;
     		double start = 0.0;
     		for(int i = 0; i<lim; i+=2)
     		{
     		CookieCell src = animationStack.elementAt(i);
     		CookieCell dest = animationStack.elementAt(i+1);
     		if(movingCrawlCookie) 
     			{
     			// start the crawl animation first, which will be displayed last.
     			startAnimation(src,dest,CookieChip.Crawl,(int)bb.CELLSIZE,start,speed);
     			}
     		startAnimation(src,dest,chip,(int)bb.CELLSIZE,start,speed);
     		start += speed;
     		}}}
   		 animationStack.clear();
     	}
       
     } 
 
 void playSounds(CookieMovespec mm)
 {
	 switch(mm.op)
	 {
	 case MOVE_DROPB:
	 case MOVE_PICKB:
	 case MOVE_PICK:
	 case MOVE_DROP:
		 playASoundClip(light_drop,100);
		 break;
	 default: break;
	 }
 }
/**
 * parse a move specifier on behalf of the current player.  This is called by the 
 * "game" object when it receives a move from the other player.  Note that it may
 * be called while we are in review mode, so the current state of the board should
 * not be considered.
 */
    public commonMove ParseNewMove(String st)
    {
        return (new CookieMovespec(st, -1));
    }
/**
 * prepare to add nmove to the history list, but also edit the history
 * to remove redundant elements, so that indecisiveness by the user doesn't
 * result in a messy game log.
 * This may require that move be merged with an existing history move
 * and discarded.  Return null if nothing should be added to the history
 * One should be very cautious about this, only to remove real pairs that
 * result in a null move.
 * 
 */
    public commonMove EditHistory(commonMove nmove)
    {	return(super.EditHistory(nmove,false));
    }
  

/**
 * the preferred mouse gesture style is to let the user "pick up" objects
 * by simply clicking on them, but we also allow him to click and drag. 
 * StartDragging is called when he has done this.
 */
    public void StartDragging(HitPoint hp)
    {
        int mo = bb.movingObjectIndex();
        if ((mo<0) && (hp.hitCode instanceof CookieId)) // not dragging anything yet, so maybe start
        {

        CookieId hitObject =  (CookieId)hp.hitCode;
        CookieCell c = (CookieCell)hp.hitObject;
 	    switch(hitObject)
	    {
	    default: break;
	    
        case InvisibleDragBoard:
        	if(bb.moveNumber>=1)
        	{   hp.dragging=true;
          	}
	    
			break;
		case ChipPool:
	    	if(c!=null)
	    		{ CookieChip top = c.topChip();
	    		  if(top!=null) { PerformAndTransmit("Pick "+CookieMovespec.D.findUnique(CHIP_OFFSET+top.index)); }
	    		}
	    	break;
	    case BoardLocation:
	    	if((c!=null) && c.topChip()!=null)
	    	{
	    		if((c==bb.crawlCell) && !bb.hasLegalMoves(c,bb.whoseTurn,false))
	    		{	// can only move the crawl cookie
	    			PerformAndTransmit("Pick Crawl");
	    		}
	    		else
	    		{
	    		PerformAndTransmit("Pickb "+c.col+" "+c.row);
	    		}
    		}
	    	break;
        }

        if (bb.movingObjectIndex() >= 0)
	        {	// if we got something started, inform the mouse handler
	            hp.dragging = true;
	        } 
         }
    }
	private void doDropChip(char col,int row,CookieChip ch)
	{	
		PerformAndTransmit("dropb "+col+" "+row+" "+ch.index);
	}
	private void doDropChip(char col,int row)
	{
		CookieChip mo = bb.pickedObject;
		if(mo!=null) { doDropChip(col,row,mo); }
	}
	/** 
	 * this is called on "mouse up".  We may have been just clicking
	 * on something, or we may have just finished a click-drag-release.
	 * We're guaranteed just one mouse up, no bounces.
	 */
    public void StopDragging(HitPoint hp)
    {
        CellId id = hp.hitCode;
        if(!(id instanceof CookieId)) {  missedOneClick = performStandardActions(hp,missedOneClick);}
    	else {
    	missedOneClick = false;
    	CookieId hitCode = (CookieId)hp.hitCode;
        CookieCell hitObject = (CookieCell)hp.hitObject;
        CookieState state = bb.getState();
        switch (hitCode)
        {
        default:
        	throw G.Error("Hit Unknown object " + id);
        case InvisibleDragBoard:
        case ZoomSlider:
        	break;

        case BoardLocation:	// we hit an occupied part of the board 
			switch(state)
			{
			default: throw G.Error("Not expecting drop on board in state "+state);
			case CONFIRM_STATE:
			case PLAY_STATE:
			case PLACE_COOKIE_STATE:
			case PLACE_OR_SWAP_STATE:
			case PUZZLE_STATE:
				if(bb.pickedObject!=null)
					{
					// note that according to the general theory, this shouldn't
					// ever occur because inappropriate spaces won't be mouse sensitve.
					// this is just defense in depth.
					doDropChip(hitObject.col,hitObject.row);
					break;
					}
				// fall through and pick up the previously dropped piece
				PerformAndTransmit("Pickb "+hitObject.col+" "+hitObject.row);
				break;
			}
			break;
			
        case ChipPool:
           if(bb.pickedObject!=null) 
			{//if we're dragging a black chip around, drop it.
            	PerformAndTransmit("Drop "+CookieMovespec.D.findUnique(hitObject.row));
			}
           break;
 
         }
    	}
         repaint(20);
    }

    /** this is the place where the canvas is actually repainted.  We get here
     * from the event loop, not from the normal canvas repaint request.
     * 
     * if complete is true, we definitely want to start from scratch, otherwise
     * only the known changed elements need to be painted.  Exactly what this means
     * is game specific, but for hex the underlying empty board is cached as a deep
     * background, but the chips are painted fresh every time.
     * 
     * this used to be very important to optimize, but with faster machines it's
     * less important now.  The main strategy we employ is to paint EVERYTHING
     * into a background bitmap, then display that bitmap to the real screen
     * in one swell foop at the end.
     */
    public void drawCanvas(Graphics offGC, boolean complete,HitPoint hp)
    {	
      	bb.SetDisplayParameters(zoomRect.value,1.0,board_center_x,board_center_y,30.0); // shrink a little and rotate 30 degrees
       	bb.SetDisplayRectangle(boardRect);
     	drawFixedElements(offGC,complete);	// draw the board into the deep background
   	
    	// draw the board contents and changing elements.
        redrawBoard(offGC,hp);
        //      draw clocks, sprites, and other ephemera
        drawClocksAndMice(offGC, null);
        DrawTileSprite(offGC,hp); //draw the floating tile we are dragging, if present
        
        DrawArrow(offGC,hp);
        
        drawSprites(offGC);
   }
    
    // return what will be the init type for the game
    public String gameType() { return(bb.gametype+" "+bb.randomKey+" "+bb.startingPattern); }	// this is the subgame "setup" within the master type.
    public String sgfGameType() { return(Cookie_SGF); }	// this is the official SGF number assigned to the game

    // the format is just what is produced by FormHistoryString
    //
    // this is completely standardized
    //public void performHistoryTokens(StringTokenizer his)
    //{	String command = "";
    //    // now the rest
    //    while (his.hasMoreTokens())
    //    {
    //        String token = his.nextToken();
    //        if (",".equals(token) || ".end.".equals(token))
    //        {
    //            if (!"".equals(command))
    //            {
    //                PerformAndTransmit(command, false,false);
    //                command = "";
    //            }
    //        }
    //       else
    //        {
    //            command += (" " + token);
    //        }
    //    }	
    //} 
    //public void performPlayerInitialization(StringTokenizer his)
    //{	int fp = G.IntToken(his);
    //	BoardProtocol b = getBoard();
    //    if (fp < 0)   {  fp = 0;  }
    //    b.setWhoseTurn(fp);
    //    players[fp].ordinal = 0;
    //    players[(fp == 0) ? 1 : 0].ordinal = 1;
    //	
    //}
    
    
    // interact with the board to initialize a game
    public void performHistoryInitialization(StringTokenizer his)
    {   //the initialization sequence
    	String token = his.nextToken();
    	int rand = G.IntToken(his);
    	int pat = G.IntToken(his);
        bb.doInit(token,rand,pat);
    }


    /** handle action events from menus.  Don't do any real work, just note
     * state changes and if necessary set flags for the run loop to pick up.
     * 
     */
    public boolean handleDeferredEvent(Object target)
    {
        boolean handled = super.handleDeferredEvent(target);
 
        return (handled);
    }

/** handle the run loop, and any special actions we need to take.
 * The mouse handling and canvas painting will be called automatically.
 * 
 * This is a good place to make notes about threads.  Threads in Java are
 * very dangerous and tend to lead to all kinds of undesirable and/or flakey
 * behavior.  The fundamental problem is that there are three or four sources
 * of events from different system-provided threads, and unless you are very
 * careful, these threads will all try to use and modify the same data
 * structures at the same time.   Java "synchronized" declarations are
 * hard to get right, resulting in synchronization locks, or lack of
 * synchronization where it is really needed.
 * 
 * This toolkit addresses this problem by adopting the "one thread" model,
 * and this is where it is.  Any other threads should do as little as possible,
 * mainly leave breadcrumbs that will be picked up by this thread.
 * 
 * In particular:
 * GUI events do not respond in the native thread.  Mouse movement and button
 * events are noted for later.  Requests to repaint the canvas are recorded but
 * not acted upon.
 * Network I/O events, merely queue the data for delivery later.
 *  */
    
    //   public void ViewerRun(boolean wait)
    //   {
    //       super.ViewerRun(wait);
    //   }
    /**
     * returns true if the game is over "right now", but also maintains 
     * the gameOverSeen instance variable and turns on the reviewer variable
     * for non-spectators.
     */
    //public boolean GameOver()
    //{	// the standard method calls b.GameOver() and maintains
    	// two variables.  
    	// "reviewer=true" means we were a player and the end of game has been reached.
    	// "gameOverSeen=true" means we have seen a game over state 
    //	return(super.GameOver());
    //}
    
    /** this is used by the stock parts of the canvas machinery to get 
     * access to the default board object.
     */
    public BoardProtocol getBoard()   {    return (bb);   }

    //** this is used by the game controller to supply entertainment strings to the lobby */
    // public String gameProgressString()
    // {	// this is what the standard method does
    // 	// return ((mutable_game_record ? Reviewing : ("" + viewMove)));
    // 	return(super.gameProgressString());
    // }


/** this is used by the scorekeeper to determine who won. Draws are indicated
 * by both players returning false.  Be careful not to let both players return true!
 */
    public boolean WinForPlayer(commonPlayer p)
    { // this is what the standard method does
      // return(getBoard().WinForPlayer(p.index));
      return (super.WinForPlayer(p));
    }


    /** factory method to create a robot */
    public SimpleRobotProtocol newRobotPlayer() 
    {  
    	return(new CookiePlay());
     }

    /** replay a move specified in SGF format.  
     * this is mostly standard stuff, but the key is to recognise
     * the elements that we generated in sgf_save
     */
    public void ReplayMove(sgf_node no)
    {
        String comments = "";
        sgf_property prop = no.properties;

        while (prop != null)
        {
            String name = prop.getName();
            String value = (String) prop.getValue();
            
            if (setup_property.equals(name))
            {	StringTokenizer tok = new StringTokenizer(value);
            	String init = tok.nextToken();
            	int rv = G.IntToken(tok);
            	int pat = G.IntToken(tok);
                bb.doInit(init,rv,pat);
             }
            else if (name.equals(comment_property))
            {
                comments += value;
            }
            else if (name.equals(game_property))
            {
                if (!(value.equals( Cookie_SGF)))
                {
                	throw G.Error("game type " + value + " is not this game");
                }
            }
           else if (parseVersionCommand(name,value,2)) {}
           else if (parsePlayerCommand(name,value)) {}
            else
            {	// handle standard game properties, and also publish any
            	// unexpected names in the chat area
            	replayStandardProps(name,value);
            }

            prop = prop.next;
        }

        if (!"".equals(comments))
        {
            setComment(comments);
        }
    }
}

package hive;

import hive.HiveConstants.HiveId;
import hive.HiveConstants.PieceType;
import hive.HiveConstants.variation;
import lib.DStack;
import online.game.BoardProtocol;
import online.search.DefaultEvaluator;
import online.search.Evaluator;

class ThirdEvaluator extends DefaultEvaluator implements Evaluator
{	
	// constructor
	static final String Weights_PLM =
// after play against dumbot
"-0.018584958894430178 -0.5748030282855511 -0.2506482226885917 0.322338127929888 -0.04094558464007641 2.0569016721205644 0.2197711849400764 -0.008366265672940706 0.3114095915495381 1.7570341346438416 0.01144641947770602 0.010856043600981061 0.015974031630836813 0.5268886085173732 0.008952046707466802 9.940744397750683 -0.25293361972763884 -0.03747519264128676 0.008999759657762512 -7.760199074257204 0.21787601720525882 -0.20045405778756936 -0.15271948207321864 0.6848687900559763 -0.8246942090759956 -1.1734520073701027 -0.09016964369114074 -0.0032924556980133 -0.15487626313113764 0.20565526029500958 0.21493712686717187 0.0336298338772119 0.044205856068081154 0.19082301961985249 0.4418913786387829 -0.09827971462307483 -0.014764680042827352 -0.7048416663590092 0.4649280534404685 -1.7227166926113493 0.11396005495748351 0.08543285575447969 -0.049943957257051204 0.06811966704568598 0.14995567146949385 -0.19480258869489753 -0.892392720970456 -0.5892910703560355 -0.08759478790573728 -0.07847606104015555 -0.0021906658965499355 0.0304416971703978 0.31577105528357496 -0.16567536003738684 0.48757720217126327 0.8221936678493638 1.1300373493747142 0.14950445117360503 -0.5748030282855511";
// after selfplay
	//"-1335.992884943874 -349.370074628522 -16.071049266960276 267.2623401554154 199.8704152216773 1120.9378502813424 454.50179427743933 -47.82559125472814 114.41966569812793 910.6571299162953 5.495270426007971 -22.897323266939207 233.83585189018083 1245.039194527057 -17.334800767035244 42385.055357131976 -65.21336258663966 -88.68823788775906 -147.89528766149505 -77882.68309113357 101.29221258400501 -10101.515354736484 -202849.8417745857 139.0613246675812 -2191.2441650501823 -43.45341483389004 -59.20490791212647 -80.4493397991524 -201.95103126318594 129.50382145098797 4.312859819493901 148.32236024257602 7.940453914559048 5.979766656473108 1827.978201314127 -236.7805953259633 -29255.31805063422 -485.5565531044866 14823.230256420926 -318.8413245424129 1.6492361472850374 798.4431213727323 -33.02168294147962 80.34530934997305 132.75796497723158 -3602.801903094264 -1537.9508997834696 -57.747130275696136 -3.1441922834790033 -21.812601417693717 17.490829172183055 155.59520810105923 36.82318104190145 -41.59224996698877 177.935397311542 1.7249109950257349 2.4619682761911297 3.3426164219814596";
	public ThirdEvaluator() 
	{
		setWeights(Weights_PLM);
	};
	public ThirdEvaluator(variation var)
	{
		String weights = Weights_PLM; 
			switch(var)
		{
		case hive_plm:
			weights = Weights_PLM;
			break;
		case hive:
			weights = 
			 //"-0.018584958894430178 -0.5748030282855511 -0.2506482226885917 0.322338127929888 -0.04094558464007641 2.0569016721205644 0.48405480966101255 -0.024907416204832538 6.884763486277406 4.052738267711048 -0.06854814055684029 0.010856043600981061 0.015974031630836813 0.5517037229932801 0.008952046707466802 14.003202272199315 -0.25293361972763884 -0.03747519264128676 0.008999759657762512 -20.699328910356044 0.5956730699784664 -0.20045405778756936 -0.15271948207321864 1.1554081779605478 -1.6897370663934592 -1.1734520073701027 -0.09016964369114074 -0.6374382676222392 -0.30493459929381916 0.6504959238463166 1.1697224129812303 0.20547154069477322 0.07001549431398825 0.8366760034617677 0.4418913786387829 -0.17875427700779692 -0.014764680042827352 -0.7048416663590092 0.7614986193709418 -4.247794906643744 0.11396005495748351 0.06617934379467645 -0.07973997597330404 0.10937277181102939 0.3859739940729456 -0.19480258869489753 -1.9478833323262428 -0.5892910703560355 -0.12356298553141858 -0.2871372274803395 0.1501006099062271 -0.07598976371133011 0.3364431176756162 -0.4339641978808248 0.840043536975341 0.8221936678493638 1.1300373493747142 0.46723357114208186 -0.5873436942462048"
			"-0.018584958894430178 -5.9607722893773 -0.2506482226885917 0.322338127929888 -0.04094558464007641 5.185950995467738 2.333897838280516 -0.0014423365882161511 2.5646978216471292 5.375333032031982 -0.06854814055684029 0.010856043600981061 0.015974031630836813 1.1136272225315211 0.048346930153368536 9.940744397750683 -0.25293361972763884 -0.6435088779522982 0.07463528011830942 -39.153749047643615 0.5956730699784664 -0.20045405778756936 -0.15271948207321864 1.9722672929904126 -2.123574712341893 -1.1734520073701027 -0.09280593971005305 -0.10566128167985545 -0.23598951833615445 0.384072269910032 0.7287486789833081 0.20547154069477322 0.08504467890607145 3.017705807511966 0.4418913786387829 -0.45575530604530423 -0.014764680042827352 -0.7048416663590092 0.7614986193709418 -4.247794906643744 0.41268792115415065 0.11606221375605938 -0.06862544748292548 0.1193442607927773 0.48496149964005947 -0.23245000223075016 -1.3236555321406864 -0.5892910703560355 -0.12356298553141858 -0.2871372274803395 0.0740011283838306 0.04192305816200461 4.410412355901778 -0.7636457214392119 0.48757720217126327 0.8221936678493638 1.1300373493747142 0.46723357114208186 -0.5873436942462048"
			;
			break;
			//weights = //getWeightsString();
			//mutant 182 gen 8
			//"0.17900113441648735 0.055297718879163626 -0.07645268385949511 -0.17282143237274306 0.2278260886436073 0.321694493621787 0.048042832192662595 0.08105060831681686 0.024175359991138734 0.17627229054942045 -0.09592337967601543 -0.1386489936571774 0.0441563790410625 -0.006683232588973111 0.07870949681826947 0.021315446821387217 0.16623895105644534 0.32717137457660217 -0.2486640819568461 0.11191258318661973 -0.14290161560956063 0.24228362689163233 -0.01942561567676082 0.03179937950736765 0.04537723963095002 0.03564512180485568 -0.053589953510119546 0.009341491365874302 -0.11577514889828093 -0.018496338804435436 0.18154122025404043 0.0018899204321458363 -0.12562141266341437 -0.1694401886804415 -0.21685579179937417 0.14454586263310198 0.036212553417172 -0.02273824288468449 0.20854139640221442 -0.1062912080644455 0.26282977589566253 -0.24923407326142852 0.0862186626288166 0.2775642661047784 0.038809229198577086 -0.0196000602989407 -0.03301807676308451 -0.004942210223464662 8.930262488667795E-4 0.06437612767938122 0.05043699150390461 0.029929438339860788 -0.04343344052816026 0.355151642986606 -0.19520616087264836"
			//"0.2582563090298185 0.047067896538956294 -0.15082162649051975 -0.17508520764152746 0.07924919809197624 0.48773008960596353 0.10960225495765696 0.011829883894106483 -0.031708198894149824 0.15616779367357958 0.021388025101500306 -0.08659540438788216 0.13592407753335273 0.27877674924045875 0.11376527518912785 0.0842993068024906 0.10987440153492153 0.1330416616028235 -0.32027782392801407 -0.00912600922973856 -0.10512638415715339 0.19602084360826555 0.07694602492579816 0.12542159871655156 0.14877342751525263 0.0035836977181467194 -0.02736899533567897 -0.012682405745646967 -0.07830309043337749 -0.04819282410615704 -0.20515874371606185 7.432361102802066E-4 -0.21552630735583828 -0.10673405299391711 -0.24218158550505625 0.03872725009601458 0.05766035725072108 -0.014882725147609858 0.2210197722102817 -0.06589936230626738 0.3207942526037398 -0.2830825876570222 0.19191512891859278 0.2697876719575884 0.07407903509826189 -0.076430139308526 0.044045864433082046 0.04130031147573349 -0.11468704958293702 0.044213313733995736 0.10295233147177527 0.1424209407389682 0.01304573822375386 0.40583081157138323 -0.2734258999013285"
			//"0.1212550840617727 0.06490082944332495 -0.1026021038072408 -0.2505696846156344 0.1466940073316159 0.43911476972041785 0.11118576816646551 0.10526545752540531 0.04309724036679178 -0.11258924097159068 0.033789182447878735 -0.30428787958453063 0.09491325975596779 0.14103851531046124 0.20545447235423975 0.0824546191928527 0.09728289745723898 0.31421844968381335 -0.49801099785249814 -0.03831915946270789 -0.07430533461642246 0.2164546579645192 0.01950956283322242 0.1600496875561459 -0.03125190496768922 0.09629767829673327 -0.11180341016369996 -0.05342277221993866 -0.14976774651638752 0.06454043730470425 0.17573434717035366 -0.0025714889555113994 -0.13524420885478344 -0.08209173078137569 -0.25934418897376477 -0.028934049064976035 0.11224446060578684 0.06306212884832833 0.2525983280211143 0.0488646210062773 0.46614104772838905 0.04126236246599645 0.14027816287393544 0.10099995989649085 -0.03887258393492982 -0.03197704054299007 0.013902615998123029 0.07115248858133957 -0.03168978311826887 -0.014381794636607083 0.15981004682836197 0.1518284559665577 0.1346295953968477 0.2849289103055227 -0.19511958214635827"
			//"0.2185759540056038 0.011662293329196521 -0.06655217544940625 -0.22999022718020068 0.21286705506200948 0.39223260763134427 0.009187728823929035 -0.07114875983327704 -0.024612375037051236 -0.21920189246045585 0.051617916628028185 -0.36261746868025263 0.12888142863541974 0.16589593610215356 0.02458918769468419 0.07279916488002655 0.0501821281284488 0.3084597605901543 -0.4919095163417164 0.0022348850402476653 -0.09282231557622853 0.24452842937788039 -0.10809105019205095 0.052025382777431746 -0.07282483571333695 0.09036637161254452 -0.09779440166728547 -0.06405341709088334 0.027814200642518404 -0.02847639423534796 0.3953494342503369 -0.0772991411713064 -0.265678127452965 -0.18401259353662752 -0.015725444365594584 -0.0986134010354538 0.07684883366986786 0.03350260386518267 0.13549187830689927 0.1396532384336904 0.24147303864127828 -0.32521158138209155 0.23665969417840127 0.3233922308438847 0.04405781318813669 0.28433290278406864 -0.07832121712142132 0.10136157462068016 -0.1413074005953206 0.0768171652823349 0.1543887805353687 0.06774480188807436 0.08339201773857301 0.478219554442034 0.04692097622353407"
			//.20746415316376385 0.26625402710028384 -0.14519015055362197 -0.08353930613574354 0.10038001176687314 0.39888226058047227 0.11317855246813206 0.04714012915538316 0.043482536408350855 -0.0983669450983039 -0.10297717161112148 -0.2501092296427966 -0.03868097730606888 0.36247476403163464 0.10529869608296247 -0.01584591723949654 0.03142633649374248 0.2464709536332389 -0.4925646491659517 -0.007743165924372013 -0.11690235967836 0.2611288601380812 -0.06914923130346806 0.05232275757944742 0.012818075597870002 0.13375836527470752 -0.03999685003466175 -0.014499922811014802 -0.021554979974326212 0.0654586796187826 0.368984694696633 0.029311585195064212 -0.22740342268222338 -0.10477169919651365 0.045823149626571844 -0.08888606430701865 0.09328331033381376 0.013657740865405993 0.047163771420877146 0.1556587458091243 0.18565411061156015 -0.43062854216949303 0.23839737043683668 0.36270813081021985 -0.042880665369544824 0.004174367217590576 -8.304276766519306E-4 0.20655281750736557 -0.06531092152936911 0.04112138577385752 0.2390629924737542 0.20226835412396119 -0.03806465495895622 0.4191172311387943 -0.08495779024698713"
			//"0.19093024016233923 0.46556531994153655 -0.10693201746284335 -0.08172511313928435 0.23280757314291545 0.4228878998294806 0.11041744184600996 0.051415380563270933 0.15715610118519796 -0.10575305456601206 -0.09499088366421457 -0.17660852693153273 0.23489310018884133 0.583473516606795 0.11140421043285119 0.018887383673984 0.07330439240008263 0.2751575298478014 -0.42174545189504764 -0.014206993401976432 -0.15627786371656718 0.2876282237682244 -0.038828772566738404 0.05961001468973637 0.1287123571944208 0.09174151628734312 -0.12321977756645064 -0.053971397669444476 0.004881964527960095 0.12697744435020747 0.21923965577999166 -0.15018070664434685 -0.2697115719126588 -0.1863523655481388 0.12364506588327817 0.06540922852746987 0.08740029529604257 -0.03606281616836669 0.219289220842123 0.23895712476954362 0.22195443668002707 -0.2549475094926939 0.2517924392404432 0.5809166264332501 -0.09740949932715125 -0.15494434834321866 -0.0034393282063604515 0.20048393242689322 -0.3418380855273711 0.09944829523390575 0.10329768863909884 0.04890087120500368 0.17230023607463124 0.2646900325883757 -0.11031457160682073"
			//" 0.1639490774177338 0.4851027811623465 -0.13849261112404102 0.07429383838603529 0.1757834532475513 0.7071644951265557 0.04070885557244366 0.011501489981939854 0.004002319030938401 -0.1977361515076376 -0.1372838022292012 -0.13624265774122435 0.2799695367221899 0.7032894413611728 0.0933448260322953 -0.1976385172165782 -0.03344032316421186 0.18417338243319553 -0.5289265570636427 -0.13345208324489088 -0.23235978151294415 0.5237066534147772 -0.17819386566558304 0.2266073553129239 0.12153090163618552 -0.017061110676142466 -0.24447186061523787 -0.005253316705204077 -0.020587489229501366 -0.022048779318144633 0.6247845814619633 -0.1490956939194479 -0.37006180018190377 -0.1532612621279572 0.03048344915216787 -0.05453834608728331 -0.0020980430215402773 -0.04106181655937094 0.03372808656462792 0.0891736170784027 0.347393346546955 -0.4641291957769992 0.37218893683407805 0.5984514646169053 -0.04578353200693435 -0.193690859581989 0.09183481758713352 0.013137923753136375 -0.19804407503979551 0.03754800796431507 0.19377992877106923 0.1144966838926825 0.010988568981723942 0.024224628548655883 -0.1491849839828441";
		default:
			break;
		
		}
	setWeights(weights);
	}
	// simple evaluation based on piece mobility and importance
	double beetle_fear_weight = -0.20;		// hand set
	double queen_afinity_weight = -0.13;	// penalty for distance from q
	double queen_pinned_weight = -0.32;		// penalty for queen with beetle on top
	double QueenCrowdingWeight = 0.30;		// bonus for mobile, friendly adj to q
	double beetleOnTopWeight = 0.018;	// bonus for beetle on top
	double pillbugEmptyWeight =  -0.23310259958359636;	// crowding the pillbug
	double siblingWeight = 0.333;		// scale factor for mobile pairs where only one can move
	double siblingDistanceWeight = 3.0;	// scale distance factor when only one can move
	double noSlitherWeight = 0.0;		// penalty for other guy having no way t slither to the Q
	double protectedWeight = 0;			// penalty for the other guy having protected spaces next to his Q
	 


	double piece_mobility_weight[] = // bonus based on number of dests a piece can reach
		{
		0.1954878410521335,			// queen
		0.14401175010970335,		// ant (maxed at 5 dests)
		0.1822731141156575,			// grasshopper
		0.2101057366540612,			// beetle
		-0.04247326391985723,		// spider
		0.148733511022795,			// mosquito
		0.06445810103379561,		// ladybug
		0.0,						// original pillbug
		0.011184947154578255,		// pillbug
		0.0};						// blank
	 
	 
	double piece_immobility_weight[] = 	// penalty when piece is immobile
		{ 
			-0.24416538988838943,			// queen
			-0.051212597856382616,			// ant	
			0.042116388811914665,			// grasshopper
			-0.17441644008535184,			// beetle
			-0.3314519763919989,			// spider
			9.039590091999943E-4,			// mosquito
			-0.15102742957091922,			// ladybug
			0.0,							// original pillbug
			-0.016324953763798646,			// pillbug
			0.0};							// blank
 
	double queen_safety[] = 	// index by number of pieces adjacent to queen
		{
		0.3312311766081359,		//
		0.6968242263743153,		// 1
		0.3889573809198819,		// 2
		-0.015551427470404448,	// 3
		-0.3619181413055389,		// 4
		-0.9773396660947903,		// 5
		-10.0 ,					// 6
		-10.0					// 7
		-10.0,					// 8
		-10.0};					// 9

	double queen_distance_multiplier[] =
			{ 
			0.0028344360651988074,		// queen
			-0.08375581425872755,		// ant
			-0.07272794223613122,		// grasshopper
			-0.27700381709426597,		// beetle
			-0.06729291363335439,		// spider
			0.001163567023074361,		// mosquito
			-0.04632807178571668,		// ladybug
			-0.0,						// original pillbug
			-0.09893828632751857,		// pillbug
			-0.0 };						// blank

	double reserve_value[] = {
			-0.12249580505971708,		// queen
			-0.43750473100167814,		// ant
			-0.3087575906340444,		// grasshopper
			0.09572218224162143,		// beetle
			-0.04152310077623027,		// spider
			-0.3642632349479147,		// mosquito
			-0.19858628254368976,		// ladybug
			0.0,						// original pillbug
			0.06887526356957187,		// pillbug
			0.0							// blank
	};

	public double[] getWeights_beetle()
	{	DStack v = new DStack();
		int ind = PieceType.BEETLE.ordinal();
		v.push(beetle_fear_weight);
		v.push(beetleOnTopWeight);
		v.push(reserve_value[ind]);
		v.push(piece_mobility_weight[ind]);
		v.push(piece_immobility_weight[ind]);
		v.push(queen_distance_multiplier[ind]);
		return(v.toArray());
	}
	public void setWeights_beetle(double v[])
	{	int i = 0;
		int ind = PieceType.BEETLE.ordinal();
		beetle_fear_weight = v[i++];
		beetleOnTopWeight = v[i++];
		reserve_value[ind] = v[i++];
		piece_mobility_weight[ind] = v[i++];
		piece_immobility_weight[ind] = v[i++];
		queen_distance_multiplier[ind] = v[i++];
		// check
		//double rv[] = getWeights();
		//G.Assert(G.sameArrayContents(v, rv),"check setWeights failed");
	}
	
	public double[] getWeights_all()
	{	DStack v = new DStack();
	v.push(beetle_fear_weight);
	v.push(queen_afinity_weight);
	v.push(queen_pinned_weight);
	v.push(QueenCrowdingWeight);
	for(double d : piece_mobility_weight) { v.push(d); }
	for(double d : queen_safety) { v.push(d); }
	for(double d : queen_distance_multiplier)  { v.push(d); }
	v.push(beetleOnTopWeight);
	v.push(pillbugEmptyWeight);
	for(double d : reserve_value)  { v.push(d); }
	for(double d : piece_immobility_weight)  { v.push(d); }
	v.push(siblingWeight);
	v.push(siblingDistanceWeight);
	v.push(noSlitherWeight);
	v.push(protectedWeight);
	return(v.toArray());
}
	public double[] getWeights()
	{	return getWeights_all();
	}	

	public void setWeights_all(double v[])
	{	int idx = 0;
		beetle_fear_weight = v[idx++];
		queen_afinity_weight = v[idx++];
		queen_pinned_weight = v[idx++];
		QueenCrowdingWeight = v[idx++];
		for(int i=0;i<piece_mobility_weight.length;i++) {  piece_mobility_weight[i] = v[idx++]; }
		for(int i=0;i<queen_safety.length;i++) { queen_safety[i] = v[idx++]; }
		for(int i=0;i<queen_distance_multiplier.length;i++)  { queen_distance_multiplier[i]=v[idx++]; }
		beetleOnTopWeight = v[idx++];
		pillbugEmptyWeight =  v[idx++]; 
		for(int i=0;i<reserve_value.length;i++) 
			{ if(idx<v.length) { reserve_value[i]=v[idx++]; }}
		for(int i=0;i<piece_immobility_weight.length;i++) 
		{ if(idx<v.length) { piece_immobility_weight[i]=v[idx++]; }}
		
		if(idx<v.length) { siblingWeight = v[idx++]; }
		if(idx<v.length) { siblingDistanceWeight = v[idx++]; }
		if(idx<v.length) { noSlitherWeight = v[idx++]; }
		if(idx<v.length)  { protectedWeight = v[idx++]; }
		// check
		//double rv[] = getWeights();
		//G.Assert(G.sameArrayContents(v, rv),"check setWeights failed");
	}

	public void setWeights(double v[])
	{	setWeights_all(v);
	}
	

	public double evaluate(BoardProtocol boardp,int pl,boolean print)
	{ 	HiveGameBoard board = (HiveGameBoard)boardp;
		HiveCell oql = board.pieceLocation.get(board.playerQueen(pl^1));
		HiveCell myQueenLoc = board.pieceLocation.get(board.playerQueen(pl));
		double val = 0.0;
		String msg = "";
		boolean distance = false;
		int overland_base_gradient = 0;
		int slither_base_gradient =0;
		boolean hasSlither = false;
		int myQueenAdjacent = 0;
		HiveCell rack[] = board.rackForPlayer(pl);
		for(int lim=rack.length-1; lim>=0; lim--)
			{ HiveCell rackCell = rack[lim];
			  int h = rackCell.height();
			  if(h>0)
				  { double lval = h*reserve_value[lim];
				    val += lval;
				  }
			}
		if(print && val>0) { msg+= "Reserve "+val; }
		// calculate queen distance overland_gradient
		if((oql!=null) && oql.onBoard)
		{ 	distance=true;
			overland_base_gradient = ++board.sweep_counter;
			board.sweepAndCountBoard(oql,0);
		  	slither_base_gradient = ++board.sweep_counter;
		  	int nProtected = board.slitherAndCountBoard(oql,oql,null,0,0);
		  	if(print && nProtected>0) { msg += "prot "+nProtected+"="+(nProtected*protectedWeight); }
		  	val += nProtected*protectedWeight;
		}

		// note, a subtle bug in this evaluator resulted because the order
		// of cells in occupiedcells is unstable.  Floating point values
		// are still slightly unstable!		
		HiveId targetColor = board.playerColor(pl);
		for(int i=0,lim=board.occupiedCells.size(); i<lim; i++)
			{	
				HiveCell loc = board.occupiedCells.elementAt(i);
				HivePiece bug = loc.topChip();
				if(bug.color==targetColor)
				{
				PieceType bugtype = bug.type;
				int pieceordinal = bugtype.ordinal();
				{	double weight = 0.6*piece_mobility_weight[pieceordinal];
					double distanceweight = queen_distance_multiplier[pieceordinal];
					HiveCell tempDests[] = board.getTempDest();
					int ndests = board.legalDests(loc,false,bug,tempDests,null,pl,false);
					if(ndests>0 || distance)
					{
					double nd = Math.min(ndests, 5);
					// 
					// look for sibling mobility enable, where a pair of pieces are both
					// mobile, but only one can actually move
					//
					if(print) 
					{ msg += " "+bug.exactBugName()+"[";
					}
					if(nd>0)
					{	boolean sibmo = board.sibMobile(loc);
						if(sibmo)
							{weight=weight*siblingWeight;			// factor of 3 actively penalizes pairing ants
							 distanceweight = distanceweight*siblingDistanceWeight;
							if(print) { msg+="sibmobile "; }
							}
						val += nd*weight;
						if(!sibmo
								&&(loc.height()==1)
								&&loc.isAdjacentTo(myQueenLoc))
							{ myQueenAdjacent++; 	// count the number of our pieces adjacent to the our q which are mobile
							}
						 msg+=""+ndests+"="+(nd*weight); 
					}
					else {
						double w = piece_immobility_weight[pieceordinal];
						if(print) { msg+= " imm "+w; }
						val += w;
					}
					if(distance && nd>0)
					{	// score distance from queen, but only for mobile pieces
						PieceType ebugType = bugtype;
						int slither_distance = loc.slither_gradient-slither_base_gradient;
						int queen_distance = (loc.overland_gradient-overland_base_gradient);
						if(slither_distance>0) { hasSlither = true; }
						if((bugtype==PieceType.MOSQUITO) 
								&& loc.isAdjacentToAnt()
								&& slither_distance>=0)
							{
							ebugType = PieceType.ANT;
							}
						switch(ebugType)
						{
						case GRASSHOPPER:	// grasshopper, the number of places isn't very relevant
							slither_distance = -1;
							queen_distance = 1;
							//$FALL-THROUGH$
						case ANT:
							slither_distance = Math.min(1, slither_distance);	// ants are always adjacent
							//$FALL-THROUGH$
						default:
							if(slither_distance>=0)
							{	// penalty for distance from opponent queen
								double mul = slither_distance*distanceweight;
								val += mul;
								if(print) { msg += " sd="+slither_distance+"="+mul; }
								break;
							}
							//$FALL-THROUGH$
						case BEETLE:
						case LADYBUG:
						case PILLBUG:
							{
							
							double mul = queen_distance*distanceweight;
							val += mul;
							if(print) { msg += " od="+queen_distance+"="+mul; }
							}
							break;
						}
					}
					if(loc.height()>1) 
					{ // mobile and on top 
					  msg += " Top="+beetleOnTopWeight;
					  val += beetleOnTopWeight;
					}
					}
					
					if(bug.isPillbug())
						{	if(loc.isAdjacentToDanger(bug.color))
							{
							if(print) { msg += " Beetle fear="+beetle_fear_weight; }
							val += beetle_fear_weight;
							}
							if(board.isAdjacentToQueen(loc,oql,myQueenLoc))
							{
							if(print) { msg += " Qadj="+queen_afinity_weight; }
							val += queen_afinity_weight;
							}
							int nadj = loc.nOccupiedAdjacent();
							if(print) { msg += " adj="+nadj+"="+(nadj*pillbugEmptyWeight); }
							val += nadj*pillbugEmptyWeight;							
						}
					if(print) { msg +="]"; }

		        board.returnTempDest(tempDests);
				}
			}}
		if(!hasSlither) 
		{
			msg += "noslither "+noSlitherWeight;
			val += noSlitherWeight;
		}
		if(myQueenLoc.onBoard)
		{	// evaluate queen safety, number adjacent-number mobile adjacent
			int na = myQueenLoc.nOccupiedAdjacent()-myQueenAdjacent/2;
			if(myQueenAdjacent>1)
			{	double qw = (myQueenAdjacent-1)*QueenCrowdingWeight;
				val += qw;
				if(print) { msg += "Qcrowd="+qw;}
			}
			if(na>0)
			{
			boolean isOnTop = (myQueenLoc.topChip().type==PieceType.QUEEN);
			double topval = isOnTop?0.0:queen_pinned_weight;
			if(print) { msg += " qsaf "+na+"="+(queen_safety[na]+topval); }
			val += queen_safety[na]+topval;
			}
		}

		if(print) { System.out.println(msg); }
		return(val);
	}
}
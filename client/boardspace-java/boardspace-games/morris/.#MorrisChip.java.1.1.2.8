package morris;

import lib.OStack;
import lib.Random;
import online.game.chip;

class ChipStack extends OStack<MorrisChip>
{
	public MorrisChip[] newComponentArray(int n) { return(new MorrisChip[n]); }
}
/*
 * generic "playing piece class, provides canonical playing pieces, 
 * image artwork, scales, and digests.  For our purposes, the squares
 * on the board are pieces too.
 * 
 */
public class MorrisChip extends chip implements MorrisConstants
{	
	private static Random r = new Random(343535);	// this gives each chip a unique random value for Digest()
	private static ChipStack allChips = new ChipStack();
	private static boolean imagesLoaded = false;


	private int chipIndex;
	public int chipNumber() { return(chipIndex); }
	public static MorrisChip getChipNumber(int id)
	{	return(allChips.elementAt(id));
	}

	public MorrisId id = null;		// chips/images that are expected to be visible to the user interface should have an ID

	// constructor for chips not expected to be part of the UI
	private MorrisChip(String na,double scl[])
	{	file = na;
		chipIndex=allChips.size();
		randomv = r.nextLong();
		scale = scl;
		allChips.push(this);
	}
	// constructor for chips expected to be part of the UI
	private MorrisChip(String na,double scl[],MorrisId uid)
	{	this(na,scl);
		id = uid;
	}
	
	public String toString()
	{	return("<"+ id+" #"+chipIndex+">");
	}
	public String contentsString() 
	{ return(id==null?"":id.shortName); 
	}


	public static MorrisChip white = new MorrisChip("white-pawn",new double[]{0.572,0.724,0.993},MorrisId.White_Chip_Pool);
	public static MorrisChip black = new MorrisChip("black-pawn",new double[]{0.572,0.724,0.993},MorrisId.Black_Chip_Pool); 
	public static MorrisChip board_9 = new MorrisChip("board-9",new double[]{0.5,0.5,1.0},null); 

	public int playerIndex() 
		{ if(this==white) { return(FIRST_PLAYER_INDEX); }
		  if(this==black) { return(SECOND_PLAYER_INDEX); }
		  return(-1);
		}
	static private MorrisChip chips[] = 
		{
		white,
    	black,
		};
	

	public static MorrisChip getChip(int color)
	{	return(chips[color]);
	}

	
	public static MorrisChip backgroundTile = new MorrisChip( "background-tile-nomask",null);
	public static MorrisChip backgroundReviewTile = new MorrisChip( "background-review-tile-nomask",null);
	
	public static MorrisChip american = new MorrisChip("american",null);
 
	// call from the viewer's preloadImages
	public static void preloadImages(MorrisViewer forcan,String ImageDir)
	{	if(!imagesLoaded)
		{
		imagesLoaded = forcan.load_masked_images(ImageDir,allChips);
		}
	}


}

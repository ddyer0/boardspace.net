package knockabout;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Rectangle;

import online.common.*;
import online.game.*;
import online.game.sgf.sgf_names;
import online.game.sgf.sgf_node;
import online.game.sgf.sgf_property;

import java.util.*;
import lib.G;
/**
 * 
 * Change History
 *
 * Feb 2008 initial work. 
 *
 * todo: add the ReverseView feature
 * 
 * This code is derived from the "HexGameViewer" and other viewer classes.  Refer to the
 * documentation there for overall structure notes.
 * 
*/
public class KnockaboutViewer extends commonCanvas 
	implements ViewerProtocol, KnockaboutConstants, sgf_names
{	// colors
    /**
	 * 
	 */
	static final long serialVersionUID = 1L;
	private Color reviewModeBackground = new Color(220,165,200);
    private Color HighlightColor = new Color(0.2f, 0.95f, 0.75f);
    private Color rackBackGroundColor = new Color(164,184,180);
    private Color boardBackgroundColor = new Color(202,215,212);
    private Color vcrButtonColor = new Color(0.7f, 0.7f, 0.75f);
    // images
    private static StockArt[] images = null; // images of black and white gobblets and board
    private static Image[] textures = null;// background textures
    // private state
    private KnockaboutBoard b = null; 	// the board from which we are displaying
    private int CELLSIZE; 			// size of the layout cell.  
    private static int SUBCELL = 4;	// number of cells in a square
    private int SQUARESIZE;			// size of a board square
    // addRect is a service provided by commonCanvas, which supports a mode
    // to visualize the layout during development.  Look for "show rectangles"
    // in the options menu.
    //private Rectangle fullRect = addRect("fullRect"); //the whole viewer area
    //private Rectangle boardRect = addRect("boardRect"); //the actual board, normally at the left edge
    private Rectangle logRect = addRect("logRect"); //the game log, normally off the the right
    private Rectangle stateRect = addRect("stateRect");
    private Rectangle firstPlayerScoreRect = addRect("firstPlayerScore");
    private Rectangle secondPlayerScoreRect = addRect("secondPlayerScore");
    private Rectangle doneRect = addRect("doneRect");
    private Rectangle repRect = addRect("reprect");
    private Rectangle editRect = addRect("editRect");
    private Rectangle goalRect = addRect("goalRect");
    private Rectangle progressRect = addRect("progressRect");
    private KnockaboutCell roll_anim_cell = null;
    private long roll_anim_stop = 0;

    public void preloadImages()
    {	
    	if (textures == null)
    	{ // note that for this to work correctly, the images and masks must be the same size.  
      // Refer to http://www.andromeda.com/people/ddyer/java/imagedemo/transparent.html
        KnockaboutChip.preloadImages(this,ImageDir);
        images = StockArt.preLoadArt(this,ImageDir, ImageFileNames,SCALES); // load the main images
        textures = load_images(ImageDir,TextureNames);
    	}
    }


	/**
	 * 
	 * this is the real instance intialization, performed only once.
	 * info contains all the goodies from the environment.
	 * */
    public void init(exHashtable info)
    {
        super.init(info);
        int randomKey = gameInfo.getInt(exHashtable.RANDOMSEED,-1);
        b = new KnockaboutBoard(randomKey,info.getString(exHashtable.GAMETYPE, Knockabout_Standard_Init));
        doInit(false);
        
     }

    /** 
     *  used when starting up or replaying and also when loading a new game 
     *  */
    public void doInit(boolean preserve_history)
    {
        //System.out.println(myplayer.trueName + " doinit");
        super.doInit(preserve_history);				// let commonViewer do it's things
        b.doInit(b.gametype,b.randomKey);			// initialize the board
        if(!preserve_history)
    	{ PerformAndTransmit(reviewOnly?"Edit":"Start P0", false,replayMode.Replay);
    	}
   }

    /**
     * calculate a metric for one of three layouts, "normal" "wide" or "tall",
     * which should normally correspond to the area devoted to the actual board.
     * these don't have to be different, but devices with very rectangular
     * aspect ratios make "wide" and "tall" important.  
     * @param width
     * @param height
     * @param wideMode
     * @param tallMode
     * @return a metric corresponding to board size
     */
    public int setLocalBoundsSize(int width,int height,boolean wideMode,boolean tallMode)
    {	
    	int chatHeight = selectChatHeight(height);
    	int ncols = b.lastColumn()-'@';
        double sncols = (ncols*SUBCELL)+(tallMode ? 9 : wideMode ? 40 : 15); // more cells wide to allow for the aux displays
        double snrows = ncols*SUBCELL+(tallMode ? 18 : 0);  
        double cellw = width / sncols;
        double cellh = (height-(wideMode ? 0 : chatHeight)) / snrows;
        double cs = Math.max(1,Math.min(cellw, cellh)); //cell size appropriate for the aspect ration of the canvas
        CELLSIZE = (int)cs;
        SQUARESIZE = (int)(cs*SUBCELL);
        return(SQUARESIZE);
    }

    public void setLocalBoundsWT(int x, int y, int width, int height,boolean wideMode,boolean tallMode)
    {   
    	
        int chatHeight = selectChatHeight(height);
        int ideal_logwidth = CELLSIZE * 16;
        int ncols = b.lastColumn()-'@';
        boolean noChat = (chatHeight==0);
        int logH = noChat ? CELLSIZE*15 : chatHeight ;
        G.SetRect(fullRect,x,y,width,height);
 
        // game log.  This is generally off to the right, and it's ok if it's not
        // completely visible in all configurations.
        
        G.SetRect(boardRect,
        		x, 
        		wideMode ? CELLSIZE/2 : chatHeight, 
        		SQUARESIZE * ncols+4, SQUARESIZE * ncols);

        G.SetRect(stateRect,G.Left(boardRect) + CELLSIZE, 
        		G.Top(boardRect),G.Width( boardRect) - CELLSIZE, CELLSIZE);
 
        G.SetRect(firstPlayerScoreRect,
        		tallMode ? CELLSIZE : G.Right(boardRect)-CELLSIZE,
        		tallMode 
        			? G.Bottom(boardRect)+CELLSIZE 
        			: !wideMode||noChat ? logH+CELLSIZE : CELLSIZE, 
        		CELLSIZE*5,CELLSIZE*5);
 
        int chatX = wideMode ? G.Right(boardRect)+SQUARESIZE*2+CELLSIZE : x;
        int chatY = wideMode ? SQUARESIZE*4+CELLSIZE*2 : y;
        G.SetRect(chatRect,
        		chatX,
        		chatY,
        		wideMode 
        			? width-chatX-CELLSIZE
        			: width-(tallMode ? 0 : ideal_logwidth)-CELLSIZE,
        		wideMode ? CELLSIZE*16 : chatHeight);

        int logX = noChat&!tallMode 
        		? G.Right(boardRect)
        		: wideMode|tallMode ? width-ideal_logwidth-CELLSIZE : G.Right( chatRect)+CELLSIZE/3;
        int logY = tallMode ? G.Top(secondPlayerScoreRect) : y;
        G.SetRect(logRect,logX,logY,Math.min(ideal_logwidth,width-logX),
        		noChat ? logH : G.Height(chatRect));



        // "edit" rectangle, available in reviewers to switch to puzzle mode
        G.SetRect(editRect,
        		G.Right(boardRect)-CELLSIZE*7,
        		G.Bottom(boardRect)-4*CELLSIZE,
        		CELLSIZE*7, 4*CELLSIZE);


        G.SetRect(goalRect,G.Left( boardRect)+3*SQUARESIZE, G.Bottom(boardRect)-2*CELLSIZE,
        		G.Width(boardRect)-5*SQUARESIZE, CELLSIZE*2);
        
        G.SetRect(repRect,G.Left( goalRect),G.Top( goalRect)-CELLSIZE,G.Width(goalRect),G.Height( goalRect)+CELLSIZE);
        
        setProgressRect(progressRect,goalRect);

        {
            commonPlayer pl0 =getPlayerOrTemp(0);
            commonPlayer pl1 = getPlayerOrTemp(1);
            Rectangle p0time = pl0.timeRect;
            Rectangle p1time = pl1.timeRect;
            Rectangle p0anim = pl0.animRect;
            Rectangle p1anim = pl1.animRect;
            Rectangle p0aux = pl0.extraTimeRect;
            Rectangle p1aux = pl1.extraTimeRect;
            
            Rectangle firstPlayerRect = pl0.nameRect;
            Rectangle secondPlayerRect = pl1.nameRect;
            Rectangle firstPlayerPicRect = pl0.picRect;
            Rectangle secondPlayerPicRect = pl1.picRect;

            //first player name
            G.SetRect(firstPlayerRect, G.Right(firstPlayerScoreRect)+CELLSIZE,G.Top( firstPlayerScoreRect),
            		CELLSIZE * 10, CELLSIZE*2);
           
            
            G.AlignXY(secondPlayerScoreRect,
            		G.Left( firstPlayerScoreRect)+(tallMode ? 23*CELLSIZE : 0),
            		tallMode ? G.Top(firstPlayerScoreRect) : G.Top(secondPlayerPicRect)-CELLSIZE*2,
            		firstPlayerScoreRect);
            //second player name
            G.AlignXY(secondPlayerRect,
            		tallMode ? G.Right(secondPlayerScoreRect) : G.Left( firstPlayerRect),
            		tallMode ? G.Top(firstPlayerScoreRect) : G.Bottom(boardRect) - G.Height(firstPlayerRect)-2*CELLSIZE,
            		firstPlayerRect);
           
            // time display for first player
            G.SetRect(p0time,G.Left( firstPlayerRect),G.Bottom(firstPlayerRect), CELLSIZE * 5, CELLSIZE*2);
            G.AlignLeft(p0aux, G.Bottom(p0time), p0time);
            // first player "i'm alive" animation ball
            G.SetRect(p0anim, G.Right(p0time),G.Top( p0time),G.Height( p0time),G.Height( p0time));
            // first player portrait
            G.SetRect(firstPlayerPicRect,G.Left( firstPlayerRect),G.Bottom(p0aux), CELLSIZE * 10, CELLSIZE * 10);
                       

             // time display for second player
            G.AlignXY(p1time,
            		G.Left( secondPlayerRect),
            		tallMode 
            			? G.Bottom(secondPlayerRect)
            			: G.Top( secondPlayerRect)-G.Height(p0time)*2,
            		p0time);
            G.AlignLeft(p1aux, G.Bottom(p1time), p1time);
            G.AlignXY(p1anim, G.Right(p1time),G.Top( p1time),p0anim);
           // player 2 portrait
            G.AlignXY(secondPlayerPicRect,
            		G.Left( secondPlayerRect),
            		tallMode
            			? G.Top(firstPlayerPicRect) 
            			: G.Top(secondPlayerRect) - G.Height(firstPlayerPicRect)-G.Height(p1time)*2,
            		firstPlayerPicRect);         
          
          } 

         // "done" rectangle, should always be visible, but only active when a move is complete.
        G.AlignLeft(doneRect,G.Top(editRect)-5*CELLSIZE,editRect);
 
		//this sets up the "vcr cluster" of forward and back controls.
        SetupVcrRects(G.Left(boardRect)+CELLSIZE/2,G.Bottom(boardRect)-7*CELLSIZE,
            CELLSIZE * 14,
            7 * CELLSIZE);
        positionTheChat(chatRect,Color.white,Color.white);
        generalRefresh();
    }

    public int scaleCell(int cellsize,int x,int y,Rectangle r)
    {
    	if(G.pointInRect(x,y,r))
    	{
    		double scl = ((0.2*(y-G.Top(r)))/G.Height(r))+0.9;
    		return((int)(scl*cellsize));
    	}
    	return(cellsize);
    }
    public void drawSprite(Graphics g,int idx,int xp,int yp)
    {	KnockaboutChip ic = KnockaboutChip.getChip(idx);
    	ic.drawChip(g,this,scaleCell(SQUARESIZE,xp,yp,boardRect),xp,yp,null);
    }


    /** this is used by the game controller to supply entertainment strings to the lobby */
    public String gameProgressString()
    {	// this is what the standard method does
    	// return ((reviewer ? s.get(Reviewing) : ("" + viewMove)));
    	return(super.gameProgressString()
    			+" "+(5-b.chipsInGutter[0])
    			+" "+(5-b.chipsInGutter[1]));
    }


    /* draw the deep unchangable objects, including those that might be rather expensive
     * to draw.  This background layer is used as a backdrop to the rest of the activity.
     * in our cease, we draw the board and the chips on it. 
     * */
    public void drawFixedElements(Graphics gc)
    { boolean reviewBackground = reviewMode() && !mutable_game_record;
      // erase
      G.setColor(gc,reviewBackground ? reviewModeBackground : boardBackgroundColor);
      //G.fillRect(gc, fullRect);
      G.tileImage(gc,textures[BACKGROUND_TILE_INDEX], fullRect, this);   
      if(reviewBackground)
      {	 
        G.tileImage(gc,textures[BACKGROUND_REVIEW_INDEX],boardRect, this);   
      }
       
      // for us, the board is one large graphic, for which the target points
      // are carefully matched with the abstract grid
      G.centerImage(gc,images[BOARD_INDEX].getImage(this), boardRect,this);
      b.SetDisplayParameters(
   		 1.022, //0.93,	// scale 
   		 0.874,	// yscale
   		 0.0,	// xoff
   		 -0.3,//-0.1,	// yoff
   		 0.9,	// rot
   		 0.14,	// xperspective
   		 0.11,	// yperspective
   		 0.0	// skew
   		 );
      	b.SetDisplayRectangle(boardRect);
         
        b.DrawGrid(gc,boardRect,use_grid,Color.white,Color.black,Color.blue,Color.black);
    }
    private void DrawScore(Graphics gc,Rectangle r,int player)
    {	if(gc!=null)
    	{
    	int idx = 5-b.chipsInGutter[player];
    	KnockaboutChip cc = (idx>0) ? KnockaboutChip.getChip(player,6,idx) : null;
    	if(cc!=null) { cc.drawChip(gc,this,SQUARESIZE,G.centerX(r),G.centerY(r),null); }
    	}
    }
    

   /* draw the board and the chips on it. */
    private void drawBoardElements(Graphics gc, KnockaboutBoard rb, Rectangle brect, HitPoint highlight)
    {	Hashtable<KnockaboutCell,KnockaboutCell> dests = rb.getMoveDests();
    	KnockaboutState state = rb.getState();
     	int dotsize = Math.max(2,SQUARESIZE/15);
     	int mov = rb.movingObjectIndex();
     	long now = G.Date();
     	if(roll_anim_cell!=null) 
     		{ 
     		if(now > roll_anim_stop) { roll_anim_cell=null; } else { repaint(20); }
     		} 
     	//
        // now draw the contents of the board and anything it is pointing at
        //
     	
       	for (char thiscol = rb.lastColumn(),first=rb.firstColumn(); 
       			thiscol>=first; 
       			thiscol--)
         { //where we draw the grid
  	        for (int last=rb.lastRowInColumn(thiscol),row = last,frow=rb.firstRowInColumn(thiscol);
  	        	row>=frow; 
  	        	row--)	// back to front
        	{
            KnockaboutCell cell = rb.getCell(thiscol,row);
            //if(cell!=rb.center)
            {
            boolean isADest = dests.get(cell)!=null;
            boolean isSource = rb.isSource(cell);
            boolean canHit = rb.LegalToHitBoard(cell);
            int ypos = G.Bottom(brect) - rb.cellToY(thiscol, row);
            int xpos = G.Left(brect) + rb.cellToX(thiscol, row);
       		int scl = scaleCell(SQUARESIZE,xpos,ypos,boardRect);
            if(cell==roll_anim_cell)
            {	KnockaboutChip chip = cell.topChip();
            	if(chip!=null)
            	{	int show = (int)(now%chip.numSides)+1;
             		KnockaboutChip alt = KnockaboutChip.getChip(chip.playerIndex,chip.numSides,show);
            		alt.drawChip(gc,this,scl,xpos,ypos,null);
            		
            	}
            }
            else
            	{ cell.drawStack(gc,canHit?highlight:null,xpos,ypos,this,0,scl,1.0,null);
            	}
            if((cell.topChip()!=null) 
            		&& (state==KnockaboutState.PUZZLE_STATE)
            		&& (mov<0)
            		&&(highlight!=null)
            		&&(highlight.hitCode==DefaultId.HitNoWhere)
            		)
            {	// mouse adjacent to a chip in puzzle mode
            	if((Math.abs(G.Top(highlight)-ypos)<SQUARESIZE/2)
            		&& G.pointInside(highlight, xpos, ypos, 3*SQUARESIZE/5))
            	{	boolean left = (xpos<G.Left(highlight));
            		highlight.hitCode = left?KnockId.HitPlusCode:KnockId.HitMinusCode;
            		highlight.arrow = images[left? PLUS1_INDEX :MINUS1_INDEX];
            		highlight.awidth = SQUARESIZE;
            		highlight.hitObject = cell;
            		highlight.hit_x = G.Left(highlight);
            		highlight.hit_y = G.Top(highlight);
            	}
            }
         	// temp for grid setup
        	//G.DrawAACircle(gc,xpos+dotsize,ypos,dotsize,Color.red,Color.gray,true);
        	if(isSource)
        	{	G.DrawAACircle(gc,xpos+dotsize,ypos,dotsize,Color.blue,Color.gray,true);
        	}
        	if(isADest)
        	{
        		G.DrawAACircle(gc,xpos+dotsize,ypos,dotsize,Color.red,Color.gray,true);
        	}
         	if(cell==rb.rollCell)
         	{	StockArt.Rotate_CW.drawChip(gc,this,3*SQUARESIZE/2,xpos,ypos,null);
         	}
        }}}
       	
        if((highlight!=null)&& (highlight.hitObject!=null) && (highlight.hitCode instanceof KnockId))
        {	KnockId hit = (KnockId)highlight.hitCode;
        		switch(hit)
        		{
        		case HitPlusCode:
        		case HitMinusCode:
        			break;
        		default:
       			highlight.arrow = (getMovingObject()>=0) ? StockArt.DownArrow : StockArt.UpArrow;
        		highlight.awidth = SQUARESIZE/2;
        		highlight.spriteColor = Color.red;
         		}
        }
    }
    
    //
    // draw the board and things on it.  If gc!=null then actually 
    // draw, otherwise just notice if the highlight should be on
    //
    public void redrawBoard(Graphics gc, HitPoint highlight)
    {  KnockaboutBoard gb = (KnockaboutBoard) disB(gc);
      boolean ourTurn = OurMove();
      boolean moving = getMovingObject()>=0;
      HitPoint ot = ourTurn ? highlight : null;	// hit if our turn
      HitPoint select = moving?null:ot;	// hit if our turn and not dragging
      HitPoint ourSelect = (moving && !reviewMode()) ? null : highlight;	// hit if not dragging
      KnockaboutState vstate = b.getState();
       redrawGameLog(gc, ourSelect, logRect, boardBackgroundColor);
   	   DrawScore(gc,firstPlayerScoreRect,FIRST_PLAYER_INDEX);
   	   DrawScore(gc,secondPlayerScoreRect,SECOND_PLAYER_INDEX);

       drawBoardElements(gc, gb, boardRect, ot);
       G.setFont(gc,standardBoldFont);
  	   drawPlayerStuff(gc,(vstate==KnockaboutState.PUZZLE_STATE),ourSelect,
  	   			HighlightColor, rackBackGroundColor);
  	 
       if (vstate != KnockaboutState.PUZZLE_STATE)
        {
            if (G.handleRoundButton(gc, doneRect, 
            		(b.DoneState()? select : null), s.get(DoneAction),
                    HighlightColor, rackBackGroundColor))
            {	// always display the done button, but only make it active in
            	// the appropriate states
                select.hitCode = DefaultId.HitDoneButton;
            }
            if (allowed_to_edit)
            {
             if (G.handleRoundButton(gc, editRect, select, s.get(EditAction),
                             HighlightColor, rackBackGroundColor))
               {
               select.hitCode = DefaultId.HitEditButton;
               }
            }
        }
 

        standardGameMessage(gc,
        		vstate==KnockaboutState.GAMEOVER_STATE?gameOverMessage():s.get(vstate.getDescription()),
        				vstate!=KnockaboutState.PUZZLE_STATE,
        				gb.whoseTurn,
        				stateRect);
        goalAndProgressMessage(gc,ourSelect,s.get("Knock 5 of your opponent's dice into the gutter"),progressRect, goalRect);

        DrawRepRect(gc,b.Digest(),repRect);
        drawVcrGroup(ourSelect, gc, HighlightColor, vcrButtonColor);

    }

    /**
     * Execute a move by the other player, or as a result of local mouse activity,
     * or retrieved from the move history, or replayed form a stored game. 
     * @param mm the parameter is a commonMove so the superclass commonCanvas can
     * request execution of moves in a generic way.
     * @return true if all went well.  Normally G.Error would be called if anything went
     * seriously wrong.
     */
     public boolean Execute(commonMove mm,replayMode replay)
    {	KnockaboutState state = b.getState();
    	KnockaboutMovespec m = (KnockaboutMovespec)mm;
        if(state==KnockaboutState.PUZZLE_STATE)
    	{   mm.setSliderNumString("--");
    		switch(mm.op)
        	{
    		case MOVE_DROPB:
    			lastDropped = b.pickedObject;
    			break;
         	case MOVE_PICKB: 
        		break;
    		default:
    			mm.setLineBreak(true);
        	}
    	}
        if((m.op==MOVE_DONE) && (b.rollCell!=null))
        {	roll_anim_stop = G.Date()+600;
        	roll_anim_cell = b.rollCell;
        }
        else { roll_anim_cell = null; }
        
        handleExecute(b,mm,replay);
  		switch(mm.op)
    	{
		case MOVE_ROLL:
			lastDropped = b.getCell(m.from_col,m.from_row).topChip();
			break;
		default:
			break;
    	}

        
        if(replay!=replayMode.Replay) { playSounds((KnockaboutMovespec)mm); }
 
        return (true);
    }
/**
 * parse a move specifier on behalf of the current player.  This is called by the 
 * "game" object when it receives a move from the other player.  Note that it may
 * be called while we are in review mode, so the current state of the board should
 * not be considered.
 */
    public commonMove ParseNewMove(String st)
    {
        return (new KnockaboutMovespec(st, -1));
    }
         

private void playSounds(KnockaboutMovespec m)
{
    // add the sound effects
    switch(m.op)
    {
    case MOVE_DONE:
    	if(roll_anim_cell!=null)
    	{	playASoundClip(diceSoundName,50);
    	}
    	break;
    case MOVE_DROPB:
    case MOVE_ROLL:
    case MOVE_BOARD_BOARD:
    	{ playASoundClip(light_drop,50);
    	}
    	break;
    case MOVE_PICKB:
    	 playASoundClip(light_drop,50);
    	 break;
     default: break;
    }
	
}

 
/**
 * the preferred mouse gesture style is to let the user "pick up" objects
 * by simply clicking on them, but we also allow him to click and drag. 
 * StartDragging is called when he has done this.
 */
    public void StartDragging(HitPoint hp)
    {
        int mo = getMovingObject();
        if ((mo < 0) &&(hp.hitCode instanceof KnockId)) // not dragging anything yet, so maybe start
        {

        KnockId hitObject = (KnockId)hp.hitCode;
		KnockaboutCell cell = (KnockaboutCell)hp.hitObject;
		KnockaboutChip chip = (cell==null) ? null : cell.topChip();
		
        if(chip!=null)
		{
	    switch(hitObject)
	    {
	    case HitPlusCode:	
        	  PerformAndTransmit("roll "+cell.col+" "+cell.row+" "+chip.add(1));
        	  break;
        case HitMinusCode:
      	  	  PerformAndTransmit("roll "+cell.col+" "+cell.row+" "+chip.add(-1));
      	  	  break;              
	    case BoardLocation:
	    	if(cell.chip!=null)
	    		{
	    		PerformAndTransmit("Pickb "+cell.col+" "+cell.row+" "+chip.pieceNumber());
	    		}
	    	break;
		default:
			break;
        }

        if (getMovingObject() >= 0)
        {	// if we got something started, inform the mouse handler
            hp.dragging = true;
        } 
        }}
    }

	/** 
	 * this is called on "mouse up".  We may have been just clicking
	 * on something, or we may have just finished a click-drag-release.
	 * We're guaranteed just one mouse up, no bounces.
	 */
    public void StopDragging(HitPoint hp)
    {
        CellId id = hp.hitCode;
        if(!(id instanceof KnockId)) {  missedOneClick = performStandardActions(hp,missedOneClick); }
    	else {
   		missedOneClick = false;
    	KnockId hitObject = (KnockId)hp.hitCode;
		KnockaboutCell cell = (KnockaboutCell)hp.hitObject;
		KnockaboutChip cup = (cell==null) ? null : cell.topChip();
		KnockaboutState state = b.getState();	// state without resignation
        switch (hitObject)
        {
        default:
        	if (performStandardButtons(hitObject)) {}
        	else if (performVcrButton(hitObject, hp)) {}	// handle anything in the vcr group
            else
            {
            	throw G.Error("Hit Unknown object " + hitObject);
            }
        	break;
        case HitPlusCode:
        case HitMinusCode:
        	break;
        case BoardLocation:	// we hit the board 
			switch(state)
			{
			default: throw G.Error("Not expecting drop on filled board in state "+state);
			case CONFIRM_STATE:
			case PLAY_STATE:
			case PUZZLE_STATE:
				if(b.movingObjectIndex()>=0)
				{ if(cell!=null) 
					{ 
					  PerformAndTransmit("dropb "+cell.col+" "+cell.row + " "+b.nextRandom()); 
					}
				}
				else if(cup!=null)
				{
				PerformAndTransmit( "Pickb "+cell.col+" "+cell.row+" "+cup.pieceNumber());
				}
				break;
			}
			break;
			
        }
         }
    }

    public String gameType() { return(b.gametype+" "+b.randomKey); }
    public String sgfGameType() { return(Knockabout_SGF); }
    public void performHistoryInitialization(StringTokenizer his)
    {	String token = his.nextToken();		// should be a checker init spec
    	long ran = G.LongToken(his);
	    b.doInit(token,ran);
	}


    public BoardProtocol getBoard()   {    return (b);   }
    public SimpleRobotProtocol newRobotPlayer() { return(new KnockaboutPlay()); }


    /** replay a move specified in SGF format.  
     * this is mostly standard stuff, but the key is to recognize
     * the elements that we generated in sgf_save
     */
    public void ReplayMove(sgf_node no)
    {
        String comments = "";
        sgf_property prop = no.properties;

        while (prop != null)
        {
            String name = prop.getName();
            String value = (String) prop.getValue();

            if (setup_property.equals(name))
            {	StringTokenizer tok = new StringTokenizer(value);
        		String gametype = tok.nextToken();
        		long ran = G.LongToken(tok);
                b.doInit(gametype,ran);
             }
            else if (name.equals(comment_property))
            {
                comments += value;
            }
            else if (name.equals(game_property))
            {
                if (!value.equals(Knockabout_SGF))
                {
                	throw G.Error("game type " + value + " is not Tzaar");
                }
            }
            else if (parseVersionCommand(name,value,2)) {}
            else if (parsePlayerCommand(name,value)) {}
            else
            {
                replayStandardProps(name,value);
            }

            prop = prop.next;
        }

        if (!"".equals(comments))
        {
            setComment(comments);
        }
    }
}


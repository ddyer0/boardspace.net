package breakingaway;

import java.util.*;

import lib.G;
import lib.IStack;
import lib.exHashtable;
import online.game.*;

public class BreakingAwayMovespec extends commonMPMove implements BreakingAwayConstants
{
    static exHashtable D = new exHashtable(true);

    static
    {
        // these int values must be unique in the dictionary
    	addStandardMoves(D);

        D.putInt("Pickb", MOVE_PICKB);
        D.putInt("Dropb", MOVE_DROPB);
        D.putInt("Move",MOVE_MOVE);
        D.putInt("Adjust",MOVE_ADJUST);
        D.putInt("Ready",MOVE_READY);
        D.putInt("Drop",MOVE_DROP_RIDER);
       
   }

    int playerNumber; // where from/to
    int cycleIndex;	// 
    char to_col; // for from-to moves, the destination column
    int to_row; // for from-to moves, the destination row
    char from_col;
    int from_row;
    int moveData[]=null;
    int saveMovements[]=null;
    
    
    public BreakingAwayMovespec()
    {
    } // default constructor

    /* constructor */
    public BreakingAwayMovespec(String str, int p)
    {
        parse(new StringTokenizer(str), p);
    }

    /* contructor */
    public BreakingAwayMovespec(StringTokenizer ss, int p)
    {
        parse(ss, p);
    }
    
    // constructor for MOVE_MOVE
    public BreakingAwayMovespec(int who,int opcode,
    		int froms,int fromi,char fromc,int fromr,
    		char destcol,int destrow)
    {	player = who;
    	op = opcode;
    	to_col = destcol;
    	to_row = destrow;
    	from_col = fromc;
    	from_row = fromr;
        playerNumber = froms;
        cycleIndex = fromi;
     }   

    public BreakingAwayMovespec(int who,int opcode)
    {	player = who;
    	op = opcode;
    }
    public boolean Same_Move_P(commonMove oth)
    {
        BreakingAwayMovespec other = (BreakingAwayMovespec) oth;

        return ((op == other.op) 
				&& (playerNumber == other.playerNumber)
				&& (cycleIndex == other.cycleIndex)
				&& (from_col==other.from_col)
				&& (from_row==other.from_row)
				&& (to_row == other.to_row) 
				&& (to_col == other.to_col)
				&& (moveData == other.moveData)
				&& (player == other.player));
    }

    public void Copy_Slots(BreakingAwayMovespec to)
    {	super.Copy_Slots(to);
		to.from_row = from_row;
		to.from_col = from_col;
        to.to_col = to_col;
        to.to_row = to_row;
        to.playerNumber = playerNumber;
        to.cycleIndex = cycleIndex;
        to.saveMovements=saveMovements;
        to.moveData = moveData;
    }

    public commonMove Copy(commonMove to)
    {
        BreakingAwayMovespec yto = (to == null) ? new BreakingAwayMovespec() : (BreakingAwayMovespec) to;

        // we need yto to be a BreakingAwayMovespec at compile time so it will trigger call to the 
        // local version of Copy_Slots
        Copy_Slots(yto);

        return (yto);
    }

    /* parse a string into the state of this move.  Remember that we're just parsing, we can't
     * refer to the state of the board or the game.
     * */
    private void parse(StringTokenizer msg, int p)
    {
        String cmd = msg.nextToken();
        player = p;

        if (Character.isDigit(cmd.charAt(0)))
        { // if the move starts with a digit, assume it is a sequence number
            index = G.IntToken(cmd);
            cmd = msg.nextToken();
        }

        int opcode = D.getInt(cmd, MOVE_UNKNOWN);
        op = opcode;
        
        switch (opcode)
        {
        default:
            throw G.Error("Cant parse " + cmd);
        case MOVE_READY:
        	{
        	IStack o = new IStack();
        	while(msg.hasMoreTokens()) { o.push(G.IntToken(msg)); }
        	int lim = o.size();
        	moveData = new int[lim];
        	for(int i=0; i<lim;i++) { moveData[i] = o.elementAt(i); }
        	}
        	break;
        case MOVE_DROP_RIDER:
        	playerNumber = G.IntToken(msg);
        	cycleIndex = G.IntToken(msg);
        	break;
        case MOVE_MOVE:
        	{
        	playerNumber = G.IntToken(msg);
        	cycleIndex = G.IntToken(msg);
        	from_col = G.CharToken(msg);
        	from_row = G.IntToken(msg);
        	to_col = G.CharToken(msg);
        	to_row = G.IntToken(msg);
        	}
        	break;
        case MOVE_DROPB:
	        to_col = G.CharToken(msg);
	        to_row = G.IntToken(msg);
	        playerNumber = G.IntToken(msg);
	        cycleIndex = G.IntToken(msg);
	            break;

		case MOVE_PICKB:
            from_col = G.CharToken(msg);
            from_row = G.IntToken(msg);
            playerNumber = G.IntToken(msg);
            cycleIndex = G.IntToken(msg);
            break;

		
	   case MOVE_START:
            player = playerNumber = player = D.getInt(msg.nextToken());

            break;

        case MOVE_RESET:
        case MOVE_EDIT:
        case MOVE_DONE:
        case MOVE_RESIGN:
        case MOVE_ADJUST:

            break;
        }
    }

    /* construct a move string for this move.  These are the inverse of what are accepted
    by the constructors, and are also human readable */
    public String shortMoveString()
    {
        switch (op)
        {
        case MOVE_DROP_RIDER:
        	return("Drop "+cycleIndex);
        case MOVE_PICKB:
            return  ("#"+(cycleIndex+1)+" "+from_row);
 		case MOVE_DROPB:
            return ("-"+to_row);
		case MOVE_READY:
			return("Ready");
        case MOVE_MOVE:
        	return("#"+(cycleIndex+1)+" "+from_row+"-"+to_row);
        
        case MOVE_DONE:
        case MOVE_RESET:
            return ("");

        case MOVE_EDIT:
        case MOVE_START:
        case MOVE_RESIGN:
        case MOVE_ADJUST:
            return (D.findUnique(op));
        default:
            throw G.Error("shortMoveString Not implemented: " + op);
       }
    }

    /* construct a move string for this move.  These are the inverse of what are accepted
    by the constructors, and are also human readable */
    public String moveString()
    {
        String ind = "";

        if (index >= 0)
        {
            ind += (index + " ");
        }
        // adding the move index as a prefix provides numnbers
        // for the game record and also helps navigate in joint
        // review mode
        switch (op)
        {
        default:
            throw G.Error("moveString Not implemented: " + op);
        case MOVE_READY:
        	{
        	String data = ind+D.findUnique(op);
       		for(int j=0,lim=moveData.length; j<lim; j++)
        		{	data += " " + moveData[j];
        		}
        	return(data);
        	}
        case MOVE_DROP_RIDER:
        	return(ind+D.findUnique(op)+" "+playerNumber+" "+cycleIndex);
        case MOVE_PICKB:
	        return (ind+D.findUnique(op) +" " + from_col + " " + from_row+" "+playerNumber+" "+cycleIndex);

        case MOVE_DROPB:
	        return (ind+D.findUnique(op) + " "+ to_col + " " + to_row+" "+playerNumber+" "+cycleIndex);

        case MOVE_START:
            return (ind+"Start P" + player);
        case MOVE_MOVE:
        	return(ind+D.findUnique(op)+" "+playerNumber+" "+cycleIndex+" "+from_col+" "+from_row+" "+to_col+" " +to_row);
        case MOVE_EDIT:
        case MOVE_RESIGN:
        case MOVE_DONE:
        case MOVE_RESET:
        case MOVE_ADJUST:
            return (ind+D.findUnique(op));
        }
    }

    /* standard java method, so we can read moves easily while debugging */
    public String toString()
    {
        return ("P" + player + "[" + moveString() + "]");
    }
}

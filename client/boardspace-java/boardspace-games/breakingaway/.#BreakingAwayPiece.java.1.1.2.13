package breakingaway;

import java.awt.Image;
import lib.Random;

import online.common.*;
import online.game.*;

public class BreakingAwayPiece extends chip implements BreakingAwayConstants
{	  static final int NCOLORS = 6;
	  int pieceNumber = 0;		// unique id for this piece
	  public int player=-1;		// owning player
	  public int chipIndex() { return(pieceNumber); }
	  
	  static final String[] ImageFileNames = {"blue","aqua","purple","yellow","white","green"};
	  static final String[] PrefixNames = { "r-0-","r-120-","r-180-","r-220-","r-300-","r-60-"};
	  static final String[] MaskNames = { "mask" };

	  static final double SCALES[][] = 
	    {
		 {0.5,0.5, 1.0},	// R0
		 {0.5,0.6, 0.8},	// R120
		 {0.5,0.5, 1.0},	// R180
		 {0.5,0.5, 1.0},	// R220
		 {0.5,0.5, 0.85}, 	// R300
		 {0.5,0.5, 1.0}		// R60
	    };
	  

	  static BreakingAwayPiece CYCLES[][] = new BreakingAwayPiece[PrefixNames.length][ImageFileNames.length];
	  static StockArt DISCS[][] = new StockArt[PrefixNames.length][4];
	  
	  static BreakingAwayPiece[]CANONICAL_PIECE = null;
	  static BreakingAwayPiece getChip(int i) { return(CANONICAL_PIECE[i]); }
	
	BreakingAwayPiece(int idx,Image im,double []scales,String nam,long rv)
	{	pieceNumber = idx;
		image = im;
		player = idx%NCOLORS;
		scale = scales;
		file = nam;
		randomv = rv;
	}
	public static Image[] loadCycleGroup(exCanvas forcan,String Dir,int preindex)
	{	int len = ImageFileNames.length;
		String prefix = PrefixNames[preindex];
		String ar[] = new String[len];
		String ma[] = new String[1];
		for(int i=0;i<len;i++) { ar[i]= prefix+ImageFileNames[i]; }
		ma[0] = prefix + MaskNames[0];
		Image M[] = forcan.load_images(Dir,ma);
		Image IM[]=forcan.load_images(Dir,ar,M[0]);
		return(IM);
	}

	public BreakingAwayPiece getAltAngle(int set)
	{	return(CYCLES[set][pieceNumber]);
	}
	public synchronized static void preloadImages(exCanvas forcan,String Dir)
		{	if(CANONICAL_PIECE==null)
			{
			Random rv = new Random(6723324);
			int nChips = ImageFileNames.length;
			// load the main images, their masks, and composite the mains with the masks
			// to make transparent images that are actually used.
			for(int i=0,lim=PrefixNames.length; i<lim; i++)
			{
				//DISCS[i] = loadDotGroup(forcan,Dir,i);
				Image cycleImages[] = loadCycleGroup(forcan,Dir,i);
				for(int j=0;j<nChips;j++)
		        {
		        CYCLES[i][j] = new BreakingAwayPiece(j,cycleImages[j],SCALES[i],ImageFileNames[j],rv.nextLong());
		        }
			}
	        CANONICAL_PIECE = CYCLES[0];
	        check_digests(CANONICAL_PIECE);	// verify that the chips have different digests
			}
		}  
}
package gipf;

import java.awt.Image;
import lib.Random;
import online.common.exCanvas;
import online.game.chip;

/*
 * generic "playing piece class, provides canonical playing pieces, 
 * image artwork, scales, and digests.  For our purposes, the squares
 * on the board are pieces too, so there are four of them.
 * 
 */
public class GipfChip extends chip
{	
	public int drawingIndex;		// index for drawing
	public int playerIndex;			// index for owning player
    static final int FIRST_CHIP_INDEX = 0;
    static final int WHITE_CHIP_INDEX = FIRST_CHIP_INDEX;
    static final int BLACK_CHIP_INDEX = WHITE_CHIP_INDEX+3;
	public int pieceNumber() { return(drawingIndex); }
	static final char WhiteChipName = 'W';
	static final char BlackChipName = 'B';

	private GipfChip(int pla,String na,Image im,double []sc,long ran)
	{	playerIndex = drawingIndex=pla;
		file = na;
		image = im;
		randomv = ran;
		scale = sc;
	}
    private static GipfChip CANONICAL_PIECE[] = null;	// created by preload_images
     
    private static double SCALES[][] =
    {	{0.57,0.41,1.63},
    	{0.54,0.43,1.65}   	
    };
	
	public static GipfChip getChip(int color)
	{	return(CANONICAL_PIECE[color]);
	}

  /* pre load images and create the canonical pieces
   * 
   */
 
	   private static final String ImageNames[] =
	   	{"white","black"};
	    
	// call from the viewer's preloadImages
	public static void preloadImages(exCanvas forcan,String ImageDir)
	{	if(CANONICAL_PIECE==null)
		{
		int nColors = ImageNames.length;
        Image IM[]=forcan.load_masked_images(ImageDir,ImageNames);
        GipfChip CC[] = new GipfChip[nColors];
        Random rv = new Random(4953);
        for(int i=0;i<nColors;i++)
        	{ CC[i] = new GipfChip(i,ImageNames[i],IM[i],SCALES[i],rv.nextLong());;
        	}
        CANONICAL_PIECE = CC;
        check_digests(CC);
		}
	}


}
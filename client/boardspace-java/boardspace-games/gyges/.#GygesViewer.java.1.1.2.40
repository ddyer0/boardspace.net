package gyges;

import online.common.*;
import online.game.*;
import online.game.sgf.*;
import online.search.CommonDriver;

import java.awt.*;
import java.util.*;

import lib.*;
import static java.lang.Math.*;

/**
 * 
 * Change History
 *
 * Dec 2012 Inital work in progress. 
 *
 * This code is derived from the "HexGameViewer" class.  Refer to the
 * documentation there for overall structure notes.
*/
public class GygesViewer extends commonCanvas 
	implements ViewerProtocol, GygesConstants, sgf_names
{
     /**
	 * 
	 */
	static final long serialVersionUID = 1L;
	// colors
    private Color reviewModeBackground = new Color(220,165,200);
    private Color HighlightColor = new Color(0.2f, 0.95f, 0.75f);
    private Color rackBackGroundColor = new Color(194,175,148);
    private Color boardBackgroundColor = new Color(220,165,155);
    private Color vcrButtonColor = new Color(0.7f, 0.7f, 0.75f);
 
    // images
    private static Image[] textures = null;// background textures
    private static Image[] images = null;
    private static StockArt[] stockArt = null;
    // private undoInfo
    private GygesBoard b = null; 	// the board from which we are displaying
    private int CELLSIZE; 			// size of the layout cell.  
    private static int SUBCELL = 4;	// number of cells in a square
    private int SQUARESIZE;			// size of a board square
    
    // addRect is a service provided by commonCanvas, which supports a mode
    // to visualize the layout during development.  Look for "show rectangles"
    // in the options menu.
    //public Rectangle fullRect = addRect("fullRect"); //the whole viewer area
    //public Rectangle boardRect = addRect("boardRect"); //the actual board, normally at the left edge
    //public Rectangle chatRect = addRect("chatRect"); // the chat window
    private Rectangle logRect = addRect("logRect"); //the game log, normally off the the right
    private Rectangle stateRect = addRect("stateRect");
    private Rectangle firstPlayerRackRect = addRect("firstPlayerChipRect");
    private Rectangle secondPlayerRackRect = addRect("secondPlayerChipRect");
    
    private Rectangle doneRect = addRect("doneRect");
    private Rectangle editRect = addRect("editRect");
    private Rectangle goalRect = addRect("goalRect");
    private Rectangle progressRect = addRect("progressRect");
    private Rectangle repRect = addRect("repRect");
    
    static final double ArrowScales[][] = {{0.6,0.5,1.0},{0.6,0.5,1.0},{0.6,0.5,1.0},{0.6,0.5,1.0}};
    static final String ArrowNames[] = { "arrow-left","arrow-up","arrow-right","arrow-down" };
    static final int ArrowOffsets[] = new int[4];
    static {
    	ArrowOffsets[GygesBoard.CELL_LEFT()] = 0;
    	ArrowOffsets[GygesBoard.CELL_UP()] = 1;
    	ArrowOffsets[GygesBoard.CELL_RIGHT()] = 2;
    	ArrowOffsets[GygesBoard.CELL_DOWN()] = 3;
    }
    public void preloadImages()
    {	
       	GygesChip.preloadImages(this,ImageDir);
        if (textures == null)
    	{ // note that for this to work correctly, the images and masks must be the same size.  
          // Refer to http://www.andromeda.com/people/ddyer/java/imagedemo/transparent.html
        textures = load_images(ImageDir,TextureNames);
        images = load_masked_images(ImageDir,ImageNames);
        stockArt = StockArt.preLoadArt(this,ImageDir,ArrowNames,true,ArrowScales);
    	}
    }


	/**
	 * 
	 * this is the real instance intialization, performed only once.
	 * info contains all the goodies from the environment.
	 * */
    public void init(exHashtable info)
    {	// for games with more than two players, the default players list should be 
    	// adjusted to the actual number, adjusted by the min and max
       	// int players_in_game = Math.max(3,info.getInt(exHashtable.PLAYERS_IN_GAME,4));
    	super.init(info);
       	// 
    	// for games that require some random initialization, the random key should be
    	// captured at this point and passed to the the board init too.
        // randomKey = info.getInt(exHashtable.RANDOMSEED,-1);
    	//

        int randomKey = info.getInt(exHashtable.RANDOMSEED,-1);
       
        b = new GygesBoard(info.getString(exHashtable.GAMETYPE, Gyges_INIT_beginner),randomKey);
        doInit(false);
        
     }

    /** 
     *  used when starting up or replaying and also when loading a new game 
     *  */
    public void doInit(boolean preserve_history)
    {	//System.out.println(myplayer.trueName + " doinit");
        super.doInit(preserve_history);				// let commonViewer do it's things
        b.doInit(b.gametype,b.randomKey);			// initialize the board
        if(!preserve_history)
    	{ PerformAndTransmit(reviewOnly?"Edit":"Start P0", false,replayMode.Replay);
    	}

    }
    /** this is called by the game controller when all players have connected
     * and the first player is about to be allowed to make his first move. This
     * may be a new game, or a game being restored, or a player rejoining a game.
     * You can override or encapsulate this method.
     */
    public void startPlaying()
    {	super.startPlaying();
    }

    /**
     * translate the mouse coordinate x,y into a size-independent representation
     * presumably based on the cell grid.  This is used to transmit our mouse
     * position to the other players and spectators, so it will be displayed
     * at approximately the same visual spot on their screen.  
     * The results of this function only have to be interpreted by {@link #decodeScreenZone}
     * Some trickier logic may be needed if the board has several orientations,
     * or if some mouse activity should be censored.
     */
    public String encodeScreenZone(int x, int y,Point p)
    {
    	return(super.encodeScreenZone(x,y,p));
    }
    /**
     * invert the transformation done by {@link #encodeScreenZone}, returning 
     * an x,y pixel address on the main window.
     * @param z
     * @param x
     * @param y
     * @return a point representing the decoded position
     */
    public Point decodeScreenZone(String z,int x,int y)
    {
    	return(super.decodeScreenZone(z,x,y));
    }
	/**
	 * 
	 * this is a debugging hack to give you an event based on clicking in the player name
	 * You can take whatever action you like, or no action.
	 */
    public boolean inPlayRect(int eventX, int eventY)
    {	return(super.inPlayRect(eventX,eventY));
     }

    /**
     * update the players clocks.  The normal thing is to tick the clocks
     * only for the player whose turn it is.  Games with a simtaneous action
     * phase need to do something more complicated.
     * @param inc the increment (in milliseconds) to add
     * @param p the current player, normally the player to update.
     */
    public void updatePlayerTime(long inc,commonPlayer p)
    {
    	super.updatePlayerTime(inc,p);
    }
	/**
	 * this is the main method to do layout of the board and other widgets.  I don't
	 * use swing or any other standard widget kit, or any of the standard layout managers.
	 * they just don't have the flexibility to produce the results I want.  Your milage
	 * may vary, and of course you're free to use whatever layout and drawing methods you
	 * want to.  However, I do strongly encourage making a UI that is resizable within
	 * reasonable limits, and which has the main "board" object at the left.
	 * 
	 *  The basic layout technique used here is to start with a cell which is about the size
	 *  of a board square, and lay out all the other object relative to the board or to one
	 *  another.  The rectangles don't all have to be on grid points, and don't have to
	 *  be nonoverlapping, just so long as the result generally looks good.
	 *  
	 *  When "extraactions" is available, a menu opion "show rectangles" works
	 *  with the "addRect" mechanism to help visualize the layout.
	 */ 
    public void setLocalBounds(int x, int y, int width, int height)
    {   boolean wideMode = width>height*1.5;
    	int separation=1;
        int sncols = (b.boardColumns*SUBCELL+20); // more cells wide to allow for the aux displays
        int snrows = (b.boardRows)*SUBCELL+2;  
        int cellw = width / sncols;
        int chatHeight = selectChatHeight(height);
        int cellh = (height-(wideMode ? 0 : chatHeight)) / snrows;
        int ideal_logwidth = CELLSIZE * 14;
        CELLSIZE = Math.max(1,Math.min(cellw, cellh)); //cell size appropriate for the aspect ration of the canvas
        SQUARESIZE = CELLSIZE*SUBCELL;
        G.SetRect(fullRect,x,y,width, height);

        G.SetRect(boardRect,x, wideMode ? 0 : chatHeight+CELLSIZE,
        		SQUARESIZE * b.boardColumns , SQUARESIZE * b.boardRows);
       
        G.SetRect(stateRect,x + CELLSIZE, (wideMode ? 0 : chatHeight) +CELLSIZE/3,
        		G.Width(boardRect) - CELLSIZE, CELLSIZE);

        G.SetRect(firstPlayerRackRect, G.Left(boardRect),G.Top( boardRect)+CELLSIZE/2,
        		SQUARESIZE, SQUARESIZE);
 
        G.SetRect(secondPlayerRackRect,G.Left( firstPlayerRackRect), G.Bottom(boardRect)-SQUARESIZE-CELLSIZE,
        		 SQUARESIZE, SQUARESIZE);

        int goalX = G.Left( boardRect)+CELLSIZE*7;
        G.SetRect(goalRect,goalX, G.Bottom(boardRect)-CELLSIZE,
        		G.Width(boardRect)-goalX-CELLSIZE,3*CELLSIZE/2);
        
        
        G.SetRect(progressRect,G.Left(goalRect)+G.Width(goalRect)/6,G.Top(goalRect),G.Width( goalRect)/2,CELLSIZE/2);

        {
            commonPlayer pl0 =getPlayerOrTemp(0);
            commonPlayer pl1 = getPlayerOrTemp(1);
            Rectangle p0time = pl0.timeRect;
            Rectangle p1time = pl1.timeRect;
            Rectangle p0alt = pl0.extraTimeRect;
            Rectangle p1alt = pl1.extraTimeRect;
            Rectangle p0anim = pl0.animRect;
            Rectangle p1anim = pl1.animRect;
            
            Rectangle firstPlayerRect = pl0.nameRect;
            Rectangle secondPlayerRect = pl1.nameRect;
            Rectangle firstPlayerPicRect = pl0.picRect;
            Rectangle secondPlayerPicRect = pl1.picRect;
            
            //first player name
            G.SetRect(firstPlayerRect, G.Right(boardRect)+CELLSIZE,G.Top( firstPlayerRackRect),CELLSIZE * 4,CELLSIZE);
            //second player name
            G.SetRect(secondPlayerRect,G.Left(firstPlayerRect), G.Bottom(boardRect) - G.Height(firstPlayerRect),
            		G.Width(firstPlayerRect),G.Height(firstPlayerRect));


            // first player portrait
            G.SetRect(firstPlayerPicRect,G.Left( firstPlayerRect), G.Bottom(firstPlayerRect)+CELLSIZE,
            		CELLSIZE * 6, CELLSIZE * 6);
     
            // player 2 portrait
            G.SetRect(secondPlayerPicRect,G.Left( firstPlayerPicRect),G.Top(secondPlayerRect) - G.Height(firstPlayerPicRect)-CELLSIZE,G.Width(firstPlayerPicRect),G.Height(firstPlayerPicRect));
            	
            // time dispay for first player
            G.SetRect(p0time, G.Right(firstPlayerRect),G.Top(firstPlayerRect), CELLSIZE * 2, CELLSIZE);
            G.SetRect(p0alt,G.Left(p0time), G.Bottom(p0time),G.Width(p0time),G.Height( p0time));
            
            // tfirst player "i'm alive" anumation ball
            G.SetRect(p0anim, G.Right(p0time),G.Top( p0time),G.Height( p0time),G.Height( p0time));
            // time dispay for second player
            G.SetRect(p1time, G.Right(secondPlayerRect),G.Top( secondPlayerRect),G.Width( p0time),G.Height( p0time));
            G.SetRect(p1alt,G.Left(p1time), G.Bottom(p1time),G.Width( p1time),G.Height( p1time));

            G.SetRect(p1anim,G.Right( p1time),G.Top( p1time),G.Height(p1time),G.Height( p1time));

            int logx = G.Right(p0anim)+CELLSIZE/2;
            int chatY = wideMode ? G.Bottom(logRect)+CELLSIZE: y;
            int chatH = wideMode ? Math.min(chatHeight,height-chatY) : chatHeight;
            G.SetRect(logRect,logx,y, Math.min(ideal_logwidth,width-logx), wideMode ? CELLSIZE*4 : chatH);

            G.SetRect(chatRect, wideMode ? G.Right(firstPlayerPicRect)+CELLSIZE/2 : 0,chatY,
            		wideMode ? width-G.Right(firstPlayerPicRect)-CELLSIZE : logx-CELLSIZE/2,
            		chatH);
      
            // "edit" rectangle, available in reviewers to switch to puzzle mode
            G.SetRect(editRect,G.Right(boardRect)+CELLSIZE*separation, G.Bottom(firstPlayerPicRect)+CELLSIZE,
            		CELLSIZE*4, 3*CELLSIZE/2);

                  } 
        
        // "done" rectangle, should always be visible, but only active when a move is complete.
        G.SetRect(doneRect,G.Left( editRect),G.Bottom(editRect)+CELLSIZE*2,G.Width( editRect),G.Height(editRect));

        G.SetRect(repRect,G.Left(goalRect)+CELLSIZE,G.Top( goalRect)-CELLSIZE,G.Width(goalRect)-CELLSIZE, CELLSIZE);

        //this sets up the "vcr cluster" of forward and back controls.
        SetupVcrRects(G.Left(boardRect)+CELLSIZE/2,G.Bottom(boardRect)-CELLSIZE*2,
            CELLSIZE * 6,
            3 * CELLSIZE);
 
        positionTheChat(chatRect,Color.white,Color.white);
        generalRefresh();
    }
    
 

	// draw the rack of unplaced pieces.
    private void DrawCommonChipPool(Graphics gc, int forPlayer, Rectangle r, int player, HitPoint highlight)
    {	GygesCell chips[]= b.rack[forPlayer];
        boolean canHit = b.LegalToHitChips(forPlayer);
        int thisx = G.Left(r)+SQUARESIZE/2;
        int thisy = G.Top(r)+SQUARESIZE/2;
        boolean picked = (b.pickedObject!=null);
        for(GygesCell thisCell : chips)
        {
        GygesChip thisChip = thisCell.topChip();
        boolean canPick = !picked && (thisChip!=null);
        boolean canDrop = picked && (thisChip==null);
        HitPoint pt = (canHit && (canPick||canDrop))? highlight : null; 
        if(thisCell.drawStack(gc,this,pt,SQUARESIZE,thisx,thisy,0,0,null))
        	{	highlight.arrow = canDrop ? StockArt.DownArrow : StockArt.UpArrow;
        		highlight.awidth = G.Width(r)/2;
        	}
        thisx += SQUARESIZE;
        }
     }

    //
    // sprites are normally a game piece that is "in the air" being moved
    // around.  This is called when dragging your own pieces, and also when
    // presenting the motion of your opponent's pieces, and also during replay
    // when a piece is picked up and not yet placed.  While "obj" is nominally
    // a game piece, it is really whatever is associated with b.movingObject()
    //
    public void drawSprite(Graphics g,int obj,int xp,int yp)
    {  	// draw an object being dragged
    	GygesChip ch = GygesChip.getChip(obj);// Tiles have zero offset
    	ch.drawChip(g,this,SQUARESIZE,xp,yp,null);
     }

    // also related to sprites,
    // default position to display static sprites, typically the "moving object" in replay mode
    public Point spriteDisplayPoint()
	{   return(new Point(G.Right(boardRect)-SQUARESIZE/2,G.Bottom(boardRect)-SQUARESIZE/2));
	}


    //** this is used by the game controller to supply entertainment strings to the lobby */
    // public String gameProgressString()
    // {	// this is what the standard method does
    // 	// return ((mutable_game_record ? Reviewing : ("" + viewMove)));
    // 	return(super.gameProgressString());
    // }



    /* draw the deep unchangable objects, including those that might be rather expensive
     * to draw.  This background layer is used as a backdrop to the rest of the activity.
     * in our cease, we draw the board and the chips on it. 
     * */
    public void drawFixedElements(Graphics gc)
    { boolean reviewBackground = reviewMode() && !mutable_game_record;
      // erase
      G.setColor(gc,reviewBackground ? reviewModeBackground : boardBackgroundColor);
      //G.fillRect(gc, fullRect);
      G.tileImage(gc,textures[BACKGROUND_TILE_INDEX], fullRect, this);   
      if(reviewBackground)
      {	 
        G.tileImage(gc,textures[BACKGROUND_REVIEW_INDEX],boardRect, this);   
      }
       
      // if the board is one large graphic, for which the visual target points
      // are carefully matched with the abstract grid
      G.centerImage(gc,images[BOARD_INDEX], boardRect,this);
	    b.SetDisplayParameters(0.58,0.78,  0.11,1.16,  0, 0.13,0.01,0);
	    b.SetDisplayRectangle(boardRect);

      b.DrawGrid(gc,boardRect,use_grid,Color.white,Color.white,Color.blue,Color.yellow);
    }

    private void handleCell(Graphics gc,GygesBoard gb,Rectangle brect,HitPoint highlight,
    		GygesCell cell,Hashtable<GygesCell,GygesCell> dests ,Hashtable<GygesCell,GygesCell> sources,GygesCell src)
    {
        HitPoint hit = gb.legalToHitBoard(cell,sources,dests) ? highlight : null;
        int ydistance =  gb.cellToY(cell);
        int ypos = G.Bottom(brect) - ydistance;
        int xpos = G.Left(brect) + gb.cellToX(cell);
        int adjustedSize = adjustedSquareSize(SQUARESIZE,ydistance,G.Height(brect));
        //StockArt.SmallO.drawChip(gc,this,adjustedSize,xpos,ypos,null);
        if(cell==src) { StockArt.SmallO.drawChip(gc,this,adjustedSize/2,xpos,ypos,null); }
        if( cell.drawStack(gc,this,hit,adjustedSize,xpos,ypos,0,0.1,null))
        	{ 
        	highlight.arrow =(getMovingObject()>=0) 
  			? StockArt.DownArrow 
  			: cell.height()>0?StockArt.UpArrow:null;
  				highlight.awidth = SQUARESIZE/2;
        	}
        if(sources.get(cell)!=null)
        {
        	StockArt.SmallO.drawChip(gc,this,SQUARESIZE/2,xpos,ypos,null);
    	}
        if(dests.get(cell)!=null)
        {
        	StockArt.SmallO.drawChip(gc,this,SQUARESIZE/2,xpos,ypos,null);
    	}
    }
    void decoratePathStep(Graphics gc,GygesBoard gb,Rectangle brect,GygesCell from,GygesCell to,CellStack bounces,GygesChip top,GygesCell empty,int who)
	{	if(from!=null && top!=null)
		{
		CellStack steps = gb.getMovePath(from,to,top,bounces,empty,who);
		if(steps!=null)
		{	GygesCell terminal = (to!=null) || (bounces==null) ? to : bounces.top();
			GygesCell prev = from;
			for(int idx = 0; idx<steps.size(); idx++)
			{
				GygesCell current = steps.elementAt(idx);
				if(current!=prev)
				{
			        if(current.col=='G')
			        {
			        	decorateDropStep(gc,gb,brect,prev,current);
			        }
			        else
			        {
			        int ypos0 = G.Bottom(brect) - gb.cellToY(prev);
			        int xpos0 = G.Left(brect) + gb.cellToX(prev);
			        int ypos1 = G.Bottom(brect) - gb.cellToY(current);
			        int xpos1 = G.Left(brect) + gb.cellToX(current);
			        int direction = b.findDirection(prev.col,prev.row,current.col,current.row);
			        stockArt[direction].drawChip(gc,this,5*CELLSIZE/4,(xpos0+xpos1)/2,(ypos1+ypos0)/2,null);
			        }
				}
				prev  = current;
				if((prev!=empty) && (prev==terminal))
					{ break; }
			}
		}}

	}
    private void decorateDropStep(Graphics gc,GygesBoard gb,Rectangle brect,GygesCell from,GygesCell to)
    {
    	int x1 = G.Left(brect) + gb.cellToX(from);
		 int y1 = G.Bottom(brect) - gb.cellToY(from);
		 int x2 = G.Left(brect) + gb.cellToX(to);
		 int y2 = G.Bottom(brect) - gb.cellToY(to);
		 double dis = G.distance(x1,y1,x2,y2);
		 int steps = Math.max(2,(int)(dis/CELLSIZE));
		 for(int idx=1; idx<=steps;idx++)
		 {	double frac = idx/(double)(steps+1);
			 int xp = G.interpolate(frac, x1,x2);
			 int yp = G.interpolate(frac, y1,y2);
			 StockArt.SmallO.drawChip(gc,this,CELLSIZE*2,xp,yp,null);
		 }
    }
    private void decorateMovePath(Graphics gc,GygesBoard gb,Rectangle brect)
    {	
    	switch(gb.getState())
    	{
    	case Gameover:
    	case PlayTop:
    	case PlayBottom:
    		// decorate a completed move based on the move history.
    		{
    			int idx = viewStep>=0 ? viewStep-1 : History.size()-1;
    			boolean first = true;
    			while(idx>=0)
    			{
    				GygesMovespec m = (GygesMovespec)History.elementAt(idx);
    				idx--;
    				switch(m.op)
    				{
    				case MOVE_DONE:	if(!first) { idx = -1;  }
    					break;
    				case MOVE_BOARD_BOARD:
    	    			GygesCell from = gb.getCell(m.from_col,m.from_row);
    	    			GygesCell to = gb.getCell(m.to_col,m.to_row);
    	    			GygesChip top = to.topChip();
    	    			if(top==null) { top=from.topChip(); }
    	    			decoratePathStep(gc,gb,brect,from,to,null,top,to,m.player);
    	    			idx = -1;
    					break;
    				case MOVE_DROPB:
    				case MOVE_DROPB_R:
    					idx = -1;
    					break;
					default:
						break;
    				}
    				first = false;
    			}
    			
    		}
    		break;
    	case Puzzle:
    		break;
    	default:
    	case Confirm:
    	case Continue:
    	case DropTop:
    	case DropBottom:
    		{
    		// decorate based on a move in progress, using the state of the board.
    		int dd = gb.droppedDestStack.size();
    		int ss = gb.pickedSourceStack.size();
    		int sz = min(ss,dd);
   			boolean dropping = gb.dropping;
    		if(sz>0)
    		{
   			
    			{GygesCell from = gb.pickedSourceStack.elementAt(0);
	   			GygesCell to = (gb.pickedObject!=null) ? gb.pickedSourceStack.top() : gb.droppedDestStack.top();
	   			GygesChip top = gb.pickedObject;
	   			GygesCell empty = to;
	   			CellStack localPath = gb.pickedSourceStack;
	   			if(dropping)
	   			{
	   				localPath = new CellStack();
	   				localPath.copyFrom(gb.pickedSourceStack);
	   				localPath.pop();
	   				to = gb.dropSource;
	   				top = to.topChip(); 
	   				empty = null;
	   			}
		   		if(top==null) 
		   			{ top = to.topChip(); 
		   			}
	    		decoratePathStep(gc,gb,brect,from,(dropping || (gb.pickedObject==null))?to:null,localPath,top,empty,gb.whoseTurn);
    			}

     		if(gb.dropping && (gb.getState()==GygesState.Confirm)) 
 			{int dsz = gb.droppedDestStack.size();
 			 GygesCell from = gb.droppedDestStack.elementAt(dsz-2);
 			 GygesCell to = gb.droppedDestStack.elementAt(dsz-1);
 			 decorateDropStep(gc,gb,brect,from,to);
 			}}}
    	}
 		
       }
    
    int adjustedSquareSize(int startingSize,int ydistance,int height)
    {
    	return(startingSize-(int)(startingSize*ydistance*0.05/height));
    }
    
   /* draw the board and the chips on it. */
    private void drawBoardElements(Graphics gc, GygesBoard gb, Rectangle brect, HitPoint highlight)
    {	
     	//
        // now draw the contents of the board and anything it is pointing at
        //
     	Hashtable<GygesCell,GygesCell> dests = gb.getDests();
     	Hashtable<GygesCell,GygesCell> sources = gb.getSources();
     	GygesCell src = gb.getSource();
        // conventionally light source is to the right and shadows to the 
        // left, so we want to draw in right-left top-bottom order so the
        // solid parts will fall on top of existing shadows. 
        // when the rotate view is in effect, top and bottom, left and right switch
        // but this iterator still draws everything in the correct order for occlusion
        // and shadows to work correctly.
    	for (int row = gb.topRow(),stepRow=gb.stepRow(),lastRow=gb.bottomRow()+stepRow;
		row!=lastRow;
		row += stepRow)	
    	{ 
		for (int colNum = gb.leftColNum(),stepCol=gb.stepColNum(),lastCol=gb.rightColNum()+stepCol;
		     colNum!=lastCol;
		     colNum+=stepCol)
        	{ 
			char thiscol = (char)('A'+colNum);
        	// note that these accessors "lastRowInColumn" etc
        	// are not really needed for simple boards, but they
        	// also work for hex boards and boards with cut out corners
            GygesCell cell = gb.getCell(thiscol,row);
            handleCell(gc,gb,brect,highlight,cell,dests,sources,src);
        	}
    	}
    	for(int i=FIRST_PLAYER_INDEX; i<=SECOND_PLAYER_INDEX; i++)
    	{
    		handleCell(gc,gb,brect,highlight,gb.goalCell[i],dests,sources,src);
    	}
    	decorateMovePath(gc,gb,brect);
    }
     public void drawAuxControls(Graphics gc,HitPoint highlight)
    {  
    }
    //
    // draw the board and things on it.  If gc!=null then actually 
    // draw, otherwise just notice if the highlight should be on
    //
    public void redrawBoard(Graphics gc, HitPoint highlight)
    {  GygesBoard gb = (GygesBoard) disB(gc);
       boolean ourTurn = OurMove();
      boolean moving = getMovingObject()>=0;
      HitPoint ot = ourTurn ? highlight : null;	// hit if our turn
      HitPoint select = moving?null:ot;	// hit if our turn and not dragging
      HitPoint ourSelect = (moving && !reviewMode()) ? null : highlight;	// hit if not dragging
      GygesState vstate = b.getState();
       redrawGameLog(gc, ourSelect, logRect, boardBackgroundColor);
    
        drawBoardElements(gc, gb, boardRect, ot);
        DrawCommonChipPool(gc, FIRST_PLAYER_INDEX,firstPlayerRackRect, gb.whoseTurn,ot);
        DrawCommonChipPool(gc, SECOND_PLAYER_INDEX, secondPlayerRackRect,gb.whoseTurn,ot);
        G.setFont(gc,standardBoldFont);
		if (vstate != GygesState.Puzzle)
        {
             if (G.handleRoundButton(gc, doneRect, 
            		(b.DoneState()? select : null), s.get(DoneAction),
                    HighlightColor, rackBackGroundColor))
            {	// always display the done button, but only make it active in
            	// the appropriate states
                select.hitCode = DefaultId.HitDoneButton;
            }
            if (allowed_to_edit)
            {
            	if (G.handleRoundButton(gc, editRect, select,
                            s.get(EditAction), HighlightColor,
                            rackBackGroundColor))
                {
                    select.hitCode = DefaultId.HitEditButton;
                }
       }}

 		drawPlayerStuff(gc,(vstate==GygesState.Puzzle),moving?null:highlight,HighlightColor,rackBackGroundColor);


        standardGameMessage(gc,
            		vstate==GygesState.Gameover?gameOverMessage():s.get(vstate.getDescription()),
            				vstate!=GygesState.Puzzle,
            				gb.whoseTurn,
            				stateRect);
        goalAndProgressMessage(gc,highlight,s.get(VictoryCondition),progressRect, goalRect);

        DrawRepRect(gc,b.Digest(),repRect);
        drawVcrGroup(ourSelect, gc, HighlightColor, vcrButtonColor);
        drawAuxControls(gc,ourSelect);

    }

    /**
     * Execute a move by the other player, or as a result of local mouse activity,
     * or retrieved from the move history, or replayed form a stored game. 
     * @param mm the parameter is a commonMove so the superclass commonCanvas can
     * request execution of moves in a generic way.
     * @return true if all went well.  Normally G.Error would be called if anything went
     * seriously wrong.
     */
     public boolean Execute(commonMove mm,replayMode replay)
    {	
        if(b.getState()==GygesState.Puzzle)
    	{   mm.setSliderNumString("--");
    		switch(mm.op)
        	{
    		case MOVE_DROPB:
    		case MOVE_DROPB_R:
    			lastDropped = b.pickedObject;
    			break;
        	case MOVE_PICK: 
        	case MOVE_PICKB: 
        		break;
    		default:
    			mm.setLineBreak(true);
        	}
    	}
 
        handleExecute(b,mm,replay);
        startBoardAnimations(replay);
        
        if(replay!=replayMode.Replay) { playSounds(mm); }
 
        return (true);
    }
     
     void startBoardAnimations(replayMode replay)
     {	
     	double start = 0.0;
        if(replay!=replayMode.Replay)
     	{	GygesCell endpoint = b.animationStack.top();
     		if(endpoint!=null)
     		{
     		GygesChip top = b.pickedObject;
     		if(top==null) { top = endpoint.topChip(); }
     		if(top!=null)
     		{
     		for(int i=0,lim=b.animationStack.size(); i<lim; i+=2)
     		{
     		GygesCell src = b.animationStack.elementAt(i);
     		GygesCell dest = b.animationStack.elementAt(i+1);
  			double speed = masterAnimationSpeed*((src.onBoard && (lim<=2)) ? 1.0 : 0.5);
      		startAnimation(src,dest,top,start,speed,((i+2)<lim) || (b.getState()==GygesState.Continue));
     		start += speed;
     		}}
     		if(b.dropping && (b.dropSource!=null)&&(b.pickedObject!=null))
     			{
     			startAnimation(b.dropSource,b.dropSource,b.pickedObject,0,start,false);
     			}
     		}
     	}
        	b.animationStack.clear();
     } 

     void startAnimation(GygesCell from,GygesCell to,GygesChip top,double start,double speed,boolean overlap)
     {	SimpleSprite newSprite = super.startAnimation(from,to,top,SQUARESIZE,start,speed);
     	if(newSprite!=null)
     	{	
     		newSprite.overlapped = overlap;
   		}
     }
/**
 * parse a move specifier on behalf of the current player.  This is called by the 
 * "game" object when it receives a move from the other player.  Note that it may
 * be called while we are in review mode, so the current undoInfo of the board should
 * not be considered.
 */
    public commonMove ParseNewMove(String st)
    {
        return (new GygesMovespec(st, -1));
    }
    


    /**
     * prepare to add nmove to the history list, but also edit the history
     * to remove redundant elements, so that indecisiveness by the user doesn't
     * result in a messy game log.  
     * 
     * For all ordinary cases, this is now handled by the standard implementation
     * in commonCanvas, which uses the board's Digest() method to distinguish new
     * states and reversions to past states.
     * 
     * For reference, the commented out method below does the same thing for "Hex". 
     * You could resort to similar techniques to replace or augment what super.EditHistory
     * does, but your efforts would probably be better spent improving your Digest() method
     * so the commonCanvas method gives the desired result.
     * 
     * Note that it should always be correct to simply return nmove and accept the messy
     * game record.
     * 
     * This may require that move be merged with an existing history move
     * and discarded.  Return null if nothing should be added to the history
     * One should be very cautious about this, only to remove real pairs that
     * result in a null move.  It is vital that the operations performed on
     * the history are identical in effect to the manipulations of the board
     * undoInfo performed by "nmove".  This is checked by verifyGameRecord().
     * 
     * in commonEditHistory()
     * 
     */

//    public commonMove EditHistory(commonMove nmove)
//    {
//    	GygesMovespec newmove = (GygesMovespec) nmove;
//    	GygesMovespec rval = newmove;			// default returned value
//        int size = History.size() - 1;
//        int idx = size;
//        int undoInfo = b.board_state;
// 
//        while (idx >= 0)
//            {	int start_idx = idx;
//            GygesMovespec m = (GygesMovespec) History.elementAt(idx);
//                if(m.next!=null) { idx = -1; }
//                else 
//               {
//                switch (newmove.op)
//                {
//                case MOVE_RESET:
//                	rval = null;	// reset never appears in the record
//                 case MOVE_RESIGN:
//                	// resign unwind any preliminary motions
//                	switch(m.op)
//                	{
//                  	default:	
//                 		if(undoInfo==PUZZLE_STATE) { idx = -1; break; }
//                 	case MOVE_PICK:
//                 	case MOVE_PICKB:
//               		UndoHistoryElement(idx);	// undo back to last done
//                		idx--;
//                		break;
//                	case MOVE_DONE:
//                	case MOVE_START:
//                	case MOVE_EDIT:
//                		idx = -1;	// stop the scan
//                	}
//                	break;
//                	
//             case MOVE_DONE:
//             default:
//            		idx = -1;
//            		break;
//               case MOVE_DROPB:
//                	if(m.op==MOVE_PICKB)
//                	{	if((newmove.to_col==m.from_col)
//                			&&(newmove.to_row==m.from_row))
//                		{ UndoHistoryElement(idx);	// pick/drop back to the same spot
//                		  idx--;
//                		  rval=null;
//                		}
//                	else if(idx>0)
//                	{ GygesMovespec m2 = (GygesMovespec)History.elementAt(idx-1);
//                	  if((m2.op==MOVE_DROPB)
//                			  && (m2.to_col==m.from_col)
//                			  && (m2.to_row==m.from_row))
//                	  {	// sequence is pick/drop/pick/drop, edit out the middle pick/drop
//                		UndoHistoryElement(idx);
//                	  	UndoHistoryElement(idx-1);
//                	  	idx = idx-2;
//                	  }
//                	  else { idx = -1; }
//                		
//                	}
//                	else { idx = -1; }
//                	}
//                	else { idx = -1; }
//                	break;
//                	
//            	}
//               }
//            G.Assert(idx!=start_idx,"progress editing history");
//            }
//         return (rval);
//    }
//
   /** 
     * this method is called from deep inside PerformAndTransmit, at the point
     * where the move has been executed and the history has been edited.  It's
     * purpose is to veryfy that the history accurately represents the current
     * undoInfo of the game, and that the fundamental game machinery is in a consistent
     * and reproducable undoInfo.  Basically, it works by creating a duplicate board
     * resetting it and feeding the duplicate the entire history, and then verifying 
     * that the duplcate is the same as the original board.  It's perfectly ok, during
     * debugging and development, to temporarily change this method into a no-op, but
     * be warned if you do this because it is throwing an error, there are other problems
     * that need to be fixed eventually.
     */
    public void verifyGameRecord()
    {	super.verifyGameRecord();
    }    
    // for reference, here's the standard definition
    //   public void verifyGameRecord()
    //   {	BoardProtocol ourB =  getBoard();
    //   	int ourDig = ourB.Digest();
    //   	BoardProtocol dup = dupBoard = ourB.cloneBoard();
    //   	int dupDig = dup.Digest();
    //   	G.Assert(dupDig==ourDig,"Duplicate Digest Matches");
    //   	dup.doInit();
    //   	int step = History.size();
    //   	int limit = viewStep>=0 ? viewStep : step;
    //   	for(int i=0;i<limit;i++) 
    //   		{ commonMove mv = (commonMove)History.elementAt(i);
    //   		  //G.print(".. "+mv);
    //   		  dup.Execute(mv); 
    //   		}
    //   	int dupRedig = dup.Digest();
    //   	G.Assert(dup.whoseTurn()==ourB.whoseTurn(),"Replay whose turn matches");
    //   	G.Assert(dup.moveNumber()==ourB.moveNumber(),"Replay move number matches");
    //   	if(dupRedig!=ourDig)
    //   	{
    //   	//int d0 = ourB.Digest();
    //   	//int d1 = dup.Digest();
    //   	G.Assert(false,"Replay digest matches");
    //   	}
    //   	// note: can't quite do this because the timing of "SetDrawState" is wrong.  ourB
    //   	// may be a draw where dup is not if ourB is pending a draw.
    //   	//G.Assert(dup.getState()==ourB.getState(),"Replay undoInfo matches");
    //   	dupBoard = null;
    //   }
    
private void playSounds(commonMove mm)
{
	GygesMovespec m = (GygesMovespec) mm;

    // add the sound effects
    switch(m.op)
    {
    case MOVE_RACK_BOARD:
    case MOVE_BOARD_BOARD:
      	 playASoundClip(light_drop,100);
       	 playASoundClip(heavy_drop,100);
   	break;
     case MOVE_PICK:
    	 playASoundClip(light_drop,100);
    	 break;
    case MOVE_PICKB:
    	playASoundClip(light_drop,100);
    	break;
    case MOVE_DROP:
    	break;
    case MOVE_DROPB:
    case MOVE_DROPB_R:
      	 playASoundClip(heavy_drop,100);
      	break;
    default: break;
    }
	
}

 
/**
 * the preferred mouse gesture style is to let the user "pick up" objects
 * by simply clicking on them, but we also allow him to click and drag. 
 * StartDragging is called when he has done this.
 */
    public void StartDragging(HitPoint hp)
    {
        int mo = getMovingObject();
        if ((mo < 0) &&(hp.hitCode instanceof GygesId))// not dragging anything yet, so maybe start
        {

        GygesId hitObject = (GygesId)hp.hitCode;
		GygesCell cell = (GygesCell)hp.hitObject;
		GygesChip chip = (cell==null) ? null : cell.topChip();
		if(chip!=null)
		{
	    switch(hitObject)
	    {
	    case First_Player_Pool:
	    	PerformAndTransmit("Pick F "+cell.row);
	    	break;
	    case Second_Player_Pool:
	    	PerformAndTransmit("Pick S "+cell.row);
	    	break;
	    case First_Player_Goal:
	    	PerformAndTransmit("Pick FG "+cell.row);
	    	break;
	    case Second_Player_Goal:
	    	PerformAndTransmit("Pick SG "+cell.row);
	    	break;

	    case BoardLocation:
	    	// note, in this implementation the board squares are themselves pieces on the board
	    	// if the board becomes a graphic, then this > should be >= to enable click-and-drag 
	    	// behavior as well as click-to-pick
	    	if(cell.height()>0)
	    		{
	    		PerformAndTransmit("Pickb "+cell.col+" "+cell.row);
	    		}
	    	break;
		default:
			break;
        }

        if (getMovingObject() >= 0)
        {	// if we got something started, inform the mouse handler
            hp.dragging = true;
        } }
        }
    }

 	/** 
	 * this is called on "mouse up".  We may have been just clicking
	 * on something, or we may have just finished a click-drag-release.
	 * We're guaranteed just one mouse up, no bounces.
	 */
    public void StopDragging( HitPoint hp)
    {
        CellId id = hp.hitCode;
        if(!(id instanceof GygesId)) {  missedOneClick = performStandardActions(hp,missedOneClick); }
    	else {
    	missedOneClick =false;
    	GygesId hitObject = (GygesId)hp.hitCode;
		GygesState state = b.getState();
		GygesCell cell = (GygesCell)hp.hitObject;
		GygesChip chip = (cell==null) ? null : cell.topChip();
        switch (hitObject)
        {
        default:
        	throw G.Error("Hit Unknown object " + hitObject);
 
         case BoardLocation:	// we hit the board 

				if(b.movingObjectIndex()>=0)
				{ if(cell!=null) { PerformAndTransmit("Dropb "+cell.col+" "+cell.row); }
				}
				else if(chip!=null)
				{
				PerformAndTransmit( "Pickb "+cell.col+" "+cell.row+" "+chip.chipNumber());
				}
				break;

         case First_Player_Pool:
         case Second_Player_Pool:
        	{
        	int mov = b.movingObjectIndex();
        	String col =  hitObject.shortName;
            if(mov>=0) 
			{//if we're dragging a black chip around, drop it.
            	switch(state)
            	{
            	default: throw G.Error("can't drop on rack in undoInfo "+state);
            	case PlaceTop:
        		case PlaceBottom:
               	case Puzzle:
            		PerformAndTransmit("Drop "+col+" "+cell.row);
            		break;
            	}
			}
         	}
            break;
        }
         }
        repaint(20);
    }


    /** this is the place where the canvas is actually repainted.  We get here
     * from the event loop, not from the normal canvas repaint request.
     */
    public void drawCanvas(Graphics offGC, boolean complete,HitPoint hp)
    {
     	drawFixedElements(offGC,complete);
   	
    	// draw the board contents and changing elements.
        redrawBoard(offGC,hp);
        //      draw clocks, sprites, and other ephemera
        drawClocksAndMice(offGC, null);

        DrawTileSprite(offGC,hp); //draw the floating tile, if present
        DrawArrow(offGC,hp);
        drawSprites(offGC);
    }
    /**
     * this is a token or tokens that initialize the variation and
     * set immutable parameters such as the number of players
     * and the random key for the game.  It can be more than one
     * token, which ought to be parseable by {@link #performHistoryInitialization}
     * @return return what will be the init type for the game
     */
    public String gameType() 
    { 
    	return(""+b.gametype+" "+b.randomKey); 
   }
    public String sgfGameType() { return(Gyges_SGF); }

    // the format is just what is produced by FormHistoryString
    //
    // this is completely standardized
    //public void performHistoryTokens(StringTokenizer his)
    //{	String command = "";
    //    // now the rest
    //    while (his.hasMoreTokens())
    //    {
    //        String token = his.nextToken();
    //        if (",".equals(token) || ".end.".equals(token))
    //        {
    //            if (!"".equals(command))
    //            {
    //                PerformAndTransmit(command, false,false);
    //                command = "";
    //            }
    //        }
    //       else
    //        {
    //            command += (" " + token);
    //        }
    //    }	
    //}  
    //public void performPlayerInitialization(StringTokenizer his)
    //{	int fp = G.IntToken(his);
    //	BoardProtocol b = getBoard();
    //    if (fp < 0)   {  fp = 0;  }
    //    b.setWhoseTurn(fp);
    //    players[fp].ordinal = 0;
    //    players[(fp == 0) ? 1 : 0].ordinal = 1;
    //	
    //}

    
    
    /**
     * parse and perform the initialization sequence for the game, which
     * was produced by {@link online.game.commonCanvas#gameType}
     */
    public void performHistoryInitialization(StringTokenizer his)
    {	String token = his.nextToken();		// should be a checker init spec
    	long rk = G.LongToken(his);
    	// make the random key part of the standard initialization,
    	// even though games like checkers probably don't use it.
        b.doInit(token,rk);
    }

    
 //   public void doShowText()
 //   {
 //       if (debug)
 //       {
 //           super.doShowText();
 //       }
 //       else
 //       {
 //           theChat.postMessage(GAMECHANNEL,KEYWORD_CHAT,
 //               s.get(CensoredGameRecordString));
//        }
//    }

    /** handle action events
     * 
     */
    public boolean handleDeferredEvent(Object target)
    {
    	return(super.handleDeferredEvent(target));
     }
/** handle the run loop, and any special actions we need to take.
 * The mouse handling and canvas painting will be called automatically
 *  */
    //   public void ViewerRun(boolean wait)
    //   {
    //       super.ViewerRun(wait);
    //   }



    public BoardProtocol getBoard()   {    return (b);   }
    public SimpleRobotProtocol newRobotPlayer() { return(new GygesPlay(this)); }


    /** replay a move specified in SGF format.  
     * this is mostly standard stuff, but the key is to recognise
     * the elements that we generated in sgf_save
     */
    public void ReplayMove(sgf_node no)
    {
        String comments = "";
        sgf_property prop = no.properties;

        while (prop != null)
        {
            String name = prop.getName();
            String value = (String) prop.getValue();

            if (setup_property.equals(name))
            {	StringTokenizer st = new StringTokenizer(value);
            	String typ = st.nextToken();
            	long ran = G.LongToken(st);
                b.doInit(typ,ran);
             }
            else if (name.equals(comment_property))
            {
                comments += value;
            }
            else if (name.equals(game_property))
            {
                if (!value.equals(Gyges_SGF))
                {
                	throw G.Error("game type " + value + " is not this game");
                }
            }
            else if (parseVersionCommand(name,value,2)) {}
            else if (parsePlayerCommand(name,value)) {}
            else 
            {
                replayStandardProps(name,value);
            }

            prop = prop.next;
        }

        if (!"".equals(comments))
        {
            setComment(comments);
        }
    }



int max_legal_moves = 100;

//
// record this solution if it appears to be unique.
//
public void recordSolution(CommonDriver search_state,int complexity)
{		if(complexity>max_legal_moves)
	{	max_legal_moves = complexity;
		commonMove var = search_state.getCurrentVariation();
		//var.showPV("Solution "+number_of_solutions+" ");
		CommonMoveStack hist = new CommonMoveStack();
		
		{
			CommonMoveStack vhist = History;
			for(int i=0,lim=vhist.size();i<lim;i++)
			{	// copy the game before starting
				commonMove elem = vhist.elementAt(i);
				hist.push(elem.Copy(null));
			}
		}
		commonMove prev = null;
		while(var!=null)
		{	// add the moves in this solution
			hist.push(var);
			//UniverseMovespec svar = (UniverseMovespec)var;
			//if(svar.declined!=null) 
			//{ exclude += " "+svar.declined; }
			prev = var;
			var = var.best_move;
			if((var==null) || (var.player!=prev.player))
			{
				hist.push(new GygesMovespec(MOVE_DONE,prev.player)); 
			}
		}
		addGame(hist,"Solution #"+complexity);
	}
}

}

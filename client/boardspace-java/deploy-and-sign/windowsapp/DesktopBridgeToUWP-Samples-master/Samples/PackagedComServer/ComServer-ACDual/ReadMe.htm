<!--TO READ THIS HELP FILE, RIGHT-CLICK ON THE FILE NAME IN THE
    SOLUTION EXPLORER PANE AND SELECT "VIEW IN BROWSER"-->

<html><head><title>ACDUAL Sample: Adds Dual Interfaces to an Automation Application</title></head>
    <body><h1>ACDUAL Sample: Adds Dual Interfaces to an Automation Application</h1>
        <div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()"></div><p />
            <p>ACDual demonstrates how to add dual-interface support to an MFC-based Automation (formerly OLE Automation) application. The solution consists of the following projects:  </p><ul><li><p>ACDualDriv, containing a version of the automation client AUTODRIV project that lets you select whether to control the server application using the dispatch interface or using vtable binding.</p></li><li><p>ACDual, containing an actual version of the automation server AUTOCLIK project with dual-interface support.</p></li></ul><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left">Security Note </th></tr><tr><td><p>This sample code is provided to illustrate a concept and should not be used in applications or Web sites, as it may not illustrate the safest coding practices.</p></td></tr></table></div><h1 class="heading">Building the Sample</h1><div id="sectionSection0" class="seeAlsoNoToggleSection"><h4 class="subHeading">To build the ACDual sample</h4><div class="subSection"><ol><li><p>Open the solution acdual.sln, located in the acdual directory.</p></li><li><p>On the <b>Build</b> menu, click <b>Build</b>.</p></li><li><p>Run ACDual once as a stand-alone application so it can register itself with the system.</p></li></ol></div></div><h1 class="heading">Running the Sample</h1><div id="sectionSection1" class="seeAlsoNoToggleSection"><p>After registering the ACDual application, you are ready to run the ACDualDriv application. Building the solution from the IDE will perform the ACDualDriv registration automatically before ACDualDriv is run. ACDualDriv launches the ACDual application and creates a Document object, which you can then manipulate using Automation via the ACDualDriv user interface. It also contains an additional check box that lets you select whether to use VTBL binding to communicate with the ACDual Document object.</p><p>The ACDual server uses AUTOCLIK as a starting point. New globally unique identifiers (GUID) were generated to prevent confusion with the original AUTOCLIK sample, and some resources strings were changed to clarify whether the ACDual server is running. All other changes to the sources are marked with comment blocks like this:</p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><td colspan="2"><pre>      // DUAL_SUPPORT_START
      ... modified code goes here
      // DUAL_SUPPORT_END</pre></td></tr></table></span></div>
    <p>For more information about dual interfaces, object description language (ODL) scripts, and Automation error interfaces, see <MSHelp:link keywords="B5C8ED09-2F7F-483C-80FC-2A47AD896063" tabindex="0" >Technical Note 65</MSHelp:link>.</p></div><h1 class="heading">Dual Interfaces</h1><div id="sectionSection2" class="seeAlsoNoToggleSection"><p>A dual interface allows you to implement an <b>IDispatch</b> interface or a VTBL interface. A dual interface is strongly recommended for all exposed Automation objects. Issues to consider when implementing a dual interface are discussed in <MSHelp:link keywords="B5C8ED09-2F7F-483C-80FC-2A47AD896063" tabindex="0" >Technical Note 65</MSHelp:link> and include:  </p><ul><li><p>Implementing dual-interface support for <b>CCmdTarget</b>-based classes</p></li><li><p>Passing dual-interface pointers</p></li><li><p>Enabling typesafe binding, including: </p><ul><li><p>Registering the application's library type</p></li><li><p>Modifying project build settings to accommodate type library changes</p></li><li><p>Specifying the correct object class name in a type library</p></li></ul></li><li><p>Handling exceptions and the automation error interface</p></li></ul><p>For more information, see the ActiveX topics <MSHelp:link keywords="_oa96_Overview_of_Automation" tabindex="0" >Overview of Automation</MSHelp:link>, <MSHelp:link keywords="_com_Dual_Interfaces" tabindex="0" >Dual Interfaces</MSHelp:link>, <MSHelp:link keywords="_oa96_Type_Description_Interfaces" tabindex="0" >Type Description Interfaces</MSHelp:link>, and the ODL reference entry on the <MSHelp:link keywords="_oa96_dual" tabindex="0" >dual</MSHelp:link> attribute. </p><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left">Note </th></tr><tr><td><p>Some samples, such as this one, have not been modified to reflect the changes in the Visual C++ wizards, libraries, and compiler, but still demonstrate how to complete your desired task. </p></td></tr></table></div></div><h1 class="heading">Keywords</h1><div id="sectionSection3" class="seeAlsoNoToggleSection"><p>The ACDual sample demonstrates the following keywords:</p><p>AfxMessageBox; AfxOleInit; AfxOleLockApp; AfxOleUnlockApp; CCmdTarget::EnableAutomation; CCmdTarget::FromIDispatch; CCmdTarget::GetIDispatch; CCmdTarget::OnFinalRelease; CControlBar::EnableDocking; CControlBar::GetBarStyle; CControlBar::SetBarStyle; CDialog::DoModal; CDocument::GetFirstViewPosition; CDocument::GetNextView; CDocument::OnNewDocument; CDocument::SetModifiedFlag; CDocument::UpdateAllViews; CFrameWnd::ActivateFrame; CFrameWnd::DockControlBar; CFrameWnd::EnableDocking; CFrameWnd::LoadFrame; CObject::AssertValid; CObject::Dump; CObject::IsKindOf; CObject::Serialize; COleTemplateServer::ConnectTemplate; COleTemplateServer::UpdateRegistry; CStatusBar::Create; CStatusBar::SetIndicators; CToolBar::Create; CView::DoPreparePrinting; CView::GetDocument; CView::OnBeginPrinting; CView::OnDraw; CView::OnEndPrinting; CView::OnPreparePrinting; CWinApp::AddDocTemplate; CWinApp::EnableShellOpen; CWinApp::InitInstance; CWinApp::LoadStdProfileSettings; CWinApp::RegisterShellFileTypes; CWnd::DoDataExchange; CWnd::GetParentFrame; CWnd::OnCreate; CWnd::OnLButtonDown; CWnd::PreCreateWindow; CWnd::ShowWindow; CWnd::UpdateWindow; DragAcceptFiles; ShowWindow; TextOut</p><p>The ACDualDriv demonstrates the following keywords:</p><p>AfxGetApp; AfxMessageBox; AfxOleInit; CDC::DrawIcon; CDC::GetSafeHdc; CDialog::DoModal; CDialog::EndDialog; COleDispatchDriver::AttachDispatch; COleDispatchDriver::GetProperty; COleDispatchDriver::InvokeHelper; COleDispatchDriver::SetProperty; CRect::Height; CRect::Width; CWinApp::InitInstance; CWinApp::LoadStdProfileSettings; CWnd::DoDataExchange; CWnd::GetClientRect; CWnd::IsIconic; CWnd::OnClose; CWnd::OnCreate; CWnd::OnPaint; CWnd::OnQueryDragIcon; CWnd::SendMessage; CWnd::ShowWindow; CWnd::UpdateData; GetSystemMetrics; LoadIcon; ShowWindow</p>
    </div></div><div id="footer"><div class="footerLine"></div>
          © Microsoft Corporation. All rights reserved.  
      </div></div></body></html>

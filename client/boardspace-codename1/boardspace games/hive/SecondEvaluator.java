/*
	Copyright 2006-2023 by Dave Dyer

    This file is part of the Boardspace project.

    Boardspace is free software: you can redistribute it and/or modify it under the terms of 
    the GNU General Public License as published by the Free Software Foundation, 
    either version 3 of the License, or (at your option) any later version.
    
    Boardspace is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
    without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
    See the GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along with Boardspace.
    If not, see https://www.gnu.org/licenses/.
 */
package hive;

import hive.HiveConstants.HiveId;
import hive.HiveConstants.PieceType;
import hive.HiveConstants.variation;
import lib.DStack;
import online.game.BoardProtocol;
import online.search.DefaultEvaluator;
import online.search.Evaluator;

class SecondEvaluator extends DefaultEvaluator implements Evaluator
{	
	// constructor
	public SecondEvaluator() {};
	public SecondEvaluator(variation var)
	{
	String weights = // version 2.19b 
			//"-2.5786549406209645 4.800823174160682 -9.48394627709441 -1.9099927861583068 4.781466938063065 0.7958562211974698 -0.20381335122965796 0.04538651894310872 0.06387665589419513 0.44442048230765707 0.25540749033684107 0.6612525195375272 -0.35564165719252794 0.5071881942155357 -0.36655825615123594 0.4564096711050024 -1.709126955140426 -15.251097492355413 -40.10250117851505 -65.13793067577012 -119.30719408953658 -119.96661677358534 -119.66248222490707 -119.96466996887226 0.41287956607205595 -0.04381823269309279 0.35204261176134993 0.12387363390710082 0.4376434743992227 0.09272641392964134 0.3761376782987065 0.7783975492909965 0.06846917495773097 0.141087966660209 1.8899387496795756 0.27153318680839944 1.3483572299058881 0.4838656571958469 1.0375147851480415 0.9122953863870906 1.3791361201518177 0.5335906519247893 1.621121557107937 0.9859719528371595 1.1022706981954276 1.3230898165311575 -0.04101100844937525 0.593718305244147 0.08849505508892525 -0.2008830015270762 -0.34166486539803076 -0.3169094306563969 0.02070988370647396 0.6572007916702362 0.2663708018187917 0.18634265215930815"
	//"-2.8187992740970915 4.683444587089239 -9.51287189277176 -1.8452340338168924 5.002170093409883 0.9749946389196105 -0.41781730848077464 0.16474035445909135 0.388019054365349 0.43573909123663535 -0.31784441463818547 0.4342741288021093 0.06428921067056616 -0.06708958361762164 -0.44085184646418146 0.4799969386847632 -2.1138641017892668 -15.147213952961264 -40.499109079204665 -64.65345116966398 -119.42219727305482 -120.34568268712079 -119.93390263859224 -120.12571365785475 0.3005816464523427 -0.13236145390423362 0.23613056950579753 0.11733776313359578 0.42380651893680343 0.22515035611011625 0.43000390585745196 0.8283487283048685 -0.12277167698088734 -0.03900434769378813 1.571108763481662 0.2502605743936384 1.022555106836458 0.35899022099005035 0.9014495392717307 1.0546230497187545 1.144172510352687 0.57374652363026 1.677331979497862 1.0384498355259668 0.7658393657667252 1.2114222804240244 -0.03413113968342256 0.5995124083267198 0.21853037476401993 -0.4373166645227061 -0.5958170882341695 0.1355314979081864 0.026530644970201026 0.4397616714289329 0.26606445487134056 0.36437710554529723"
	//		"-2.0693653223976747 4.284132889249429 -9.69154104753888 -1.662464192750979 4.417034658489169 0.8291146786003512 -0.5245907724001356 -7.222866079782744E-4 0.5340750070753871 0.18895156936543397 -0.42285788163423454 0.06701473546994599 0.08085555691831893 0.176700120514888 -0.42193143030276437 0.8001159890995306 -1.7643161798863327 -14.878105173112946 -40.36710921967016 -64.60016117750698 -119.32782539183339 -120.63201794902074 -120.27834849851024 -119.84140469321433 0.5130375750873654 0.16907067438325335 0.2828089754949107 0.2094011894467518 0.36260111483629803 0.08478107114883365 0.19665019607231154 1.128932076713821 -0.27980473438137776 -0.5136328623449963 1.7026196598969663 0.1306787558684928 1.1887414942842083 0.008151774760519129 0.907177610384795 1.474911245939425 1.3399970979309968 0.4052878048531491 1.53895761317695 0.8293333446616623 0.5924986680230537 1.5351893686160503 -0.1920175482481606 0.6012676510559694 0.06320009659152942 -0.7206331437172544 -0.6522820466364683 0.5532996511008472 -0.13730749363467434 0.626317513280896 -0.30059668481276086 0.33672307059795126"
			// from zero
			//"-4.7238462192654256E-4 -0.024196558528130248 -0.054931970685008887 -0.1195855405351904 -0.10769937225773596 -0.015709965548505928 0.022872256961522966 0.05772717865036321 0.010088023202792775 0.05821864073056105 -0.031831317788042206 0.0034512537407463077 -0.09067407349339704 0.028285825187195888 -0.15917234717730314 0.03759594184353438 -0.05570248947789154 0.012109466497113234 -0.0581217498976682 0.08662125943885784 0.10290108378471138 -0.25220067960622444 0.11631737389384107 0.07573386103087935 0.16621297852892591 0.12947564782934554 0.11663225868251842 -0.1453361896894303 0.00581815344132318 0.00841591796339658 0.011510544337911453 -0.09467659725852906 0.01094464336986141 -0.11577169037943308 0.016946486637856743 8.675781072813027E-5 0.1990025249397183 0.07726847420397924 0.09314505487502266 0.0041808569698839546 -0.002913934715629025 -0.04714139060799057 -0.11015942016219024 -0.04403065264707409 -0.019582781330220234 -0.029917917695529962 0.05156009829097852 -0.09983257507565282 -0.17887470898464058 -0.002400365600302695 0.025108792808051325 0.13289973084765966 -0.0740513334085293 -0.0638730858266394 -0.0016721197050136244 -0.04357345688477223"
			//"0.0825631833368489 -0.1539532874397269 0.013021195221380996 -0.2611274738077212 -0.11503866680257964 -0.04818217181955953 -0.026623370965362016 -0.04592712352553248 0.05996345503465442 0.027776225870006686 -0.041976594903090386 0.049513461589107584 -0.04083243470048616 0.059430932697842595 -0.12060239131123326 0.08117045390060382 -0.00665513302316964 -0.10465653568097529 -0.024372969365992384 0.062401168468062984 0.03753139625698443 -0.26896446768856863 0.018714207267782463 0.14865713800829508 0.20605705929856655 0.17966587970265332 0.12689328044390294 0.010390664004353508 0.0651120352314924 0.052531793008104816 0.06249207553644136 -0.06247872452157864 0.016237604612077145 -0.10592459820331827 -0.04912574368688302 -0.061748589016444894 0.1552297555707606 -1.1202571671499462E-4 0.18219053463781706 -0.08089785656579251 0.006053729643771627 -0.06846725745877164 -0.12979684724423612 -0.02081862695322855 -0.01878637287969113 0.033247532119750754 0.040380800054915365 -0.2053482668602998 0.010958340665912478 -0.009959350304499398 0.05586289842138771 0.12140642805644478 -0.13675898342204504 0.07819600576013008 -0.03683464658204216 0.042651902069240855"
			//".07512424320080686 -0.29252154328720176 0.06525238596837081 -0.5121792442443218 -0.08288300940990531 0.02443578885994313 -0.13233876358866492 -0.019539853362604564 -0.29967621634798786 0.151436523431649 -0.01786534033591802 0.07364866934339596 0.08952993028533207 -0.0328708656575761 -0.09066786548325176 0.17146454254187005 -0.02583773023103502 -0.04190723596963025 0.07890366430600158 0.098134610450787 0.044183702646132916 -0.4242942585224927 -0.018502194790253466 0.3645075385092586 0.2503790709089427 0.1665592627731966 0.102880670527858 -0.04280603509559994 0.010030632642646413 0.11917856626179982 0.07399536936426568 -0.01653248979001365 -0.024006954308735298 -0.17818692727768565 0.0088708810476707 0.052973099733544075 0.1629089449641714 0.1278987595047159 0.07143610142873552 -0.1833234576968789 0.07455077774076271 -0.16527467957922445 -0.1022256177857285 -0.007217750605282422 0.14989184119401716 0.28479658343889847 0.14063024517431977 -0.08111247155732151 -0.41797757894424376 0.2242760958979519 -0.094798871232548 0.1905476825705171 0.17725048734475163 -0.13954074489299245 -0.18171191321351976 -0.18414983027879306"
			" 0.0773650836020886 0.007319195953076146 -0.1346293687211501 -0.8018393649336869 -0.27831294476559904 -0.10792901937205045 -0.16932596542790979 -0.05010854014533226 -0.24195180019101492 -0.008300541982361017 0.05188373449016507 0.2781580972986195 0.04876833710914724 -0.10185290585964925 -0.08486947806507103 0.47589574931605205 0.05853609318775021 0.028894811593591523 -0.19375255270801464 0.04905354333764582 0.16622766563772434 -0.4218076224194478 0.10051214334938885 0.309840950943455 0.34521604784574644 0.334890708672451 0.16624592213669562 -0.007225206218266347 0.22376287103466655 0.27679001293737204 0.2160605252500113 -0.12733288759084146 0.059576647814214345 0.07064264667716959 0.05213495387512014 -0.14805403662336358 0.09451742257105436 0.10616304831883075 0.10245221136508713 -0.2692718792572453 -0.0441284575636547 -0.4059644916778428 -0.25151860688633976 -0.052456863624644204 0.34818346429385244 0.599974702993218 0.018424524309559556 -0.06467723547552447 -0.5300901286144797 0.2936180633576872 -0.08693467892368595 0.24330167349598347 0.2486765969270218 -0.13620897415868072 -0.16821313786446634 -0.10514122360737507"
	//		"0.07236220632585741 -0.010442724379888985 -0.10412814527516223 -0.7167399625823868 -0.27831294476559904 -0.10792901937205045 -0.16670334251362015 -0.010960305223392013 -0.27758418688682085 0.05073212659003997 0.03954987124446359 0.2781580972986195 0.03922429053418273 0.0012247410776787466 -0.0946079776822697 0.4909536139979744 0.05853609318775021 0.028894811593591523 -0.19375255270801464 0.07005676022711504 0.16622766563772434 -0.44095196108120066 0.10051214334938885 0.309840950943455 0.34521604784574644 0.37922184709430495 0.1811804666606042 -0.12463066512501533 0.22376287103466655 0.28773023428014705 0.2160605252500113 -0.16747287561881977 -0.06832133788682127 0.09584662015767004 0.05213495387512014 -0.14805403662336358 0.08994581971613377 0.06946301899504079 0.10654596977413294 -0.2692718792572453 -0.03241678496588297 -0.44928055057042465 -0.25151860688633976 -0.052456863624644204 0.3127413363141721 0.6564310561357676 0.07243136462213423 -0.08236330911946126 -0.5324158788196978 0.2936180633576872 -0.08693467892368595 0.24330167349598347 0.30722029022048347 -0.15265090838118914 -0.17469682864363553 -0.10514122360737507"
			;
	switch(var)
		{
		case hive_plm:
			weights = 
			//"0.13647133460702485 -0.09003985075518432 -0.10836302977058979 -0.22654126664980767 0.15161357216449492 0.05742618637948312 0.09536697254331755 0.12670999227098612 -0.05435774561445737 0.021187015347916144 0.022678512530851062 0.0542895066040234 0.0570185259328615 0.09300790042962152 0.12957802012290343 0.16910658014837715 0.02749527601434574 0.14872516076744008 -0.008289931368544882 0.022584216406964487 -0.029013195429225754 0.0075042184828860645 -0.09317586428981955 -0.06688329822971543 0.03728600078745583 -0.1822968629664445 -0.09509479416989393 -0.10224311255562424 0.00943218283865564 -0.008029062256956349 0.0027267371988066585 0.031975457121584075 -0.007983022311975063 0.001733026819935625 0.12487912524301617 -0.01942893231171392 0.06513897825881032 -0.09059321244192398 -0.08038549288991775 -0.0995150675245067 -0.12784451956812296 -0.1948274645970729 0.07282403719391056 -0.007721886668315174 0.06428105840150727 -0.06669389501912285 -0.03025172782376087 0.007906304681903606 0.009457370224035352 -0.15126605060610965 -0.010334041691985589 0.058410993112324505 -0.02101296328394167 0.004440644218484793 0.020796869150442356 0.07442869475417306"
			//"-0.08096071085005672 -0.04805563300490452 -0.10836302977058979 -0.2040637576767887 0.15161357216449492 0.07648372583278877 0.1641200042686534 0.1039843238328201 0.005580198368297588 0.07726643520471346 0.0644621538466894 0.04865601311130338 0.006995799500749092 0.003720455259907194 0.05829706186545243 0.16910658014837715 0.028654103747279933 0.05500628865415963 0.01580686772073083 -0.12133898942408158 -0.06258922711545664 -0.043751364449157996 -0.030045886343679218 -0.06688329822971543 0.01879204220499896 -0.08857781709964327 -0.1051713928592595 -0.08936034861622154 0.00943218283865564 -0.06520560787111727 -0.01914104090610907 0.11746592312547491 -0.015880808602853524 0.001733026819935625 0.07473977267485664 -0.009778195375099443 0.04635290823892867 -0.09059321244192398 -0.09671799568468084 -0.0587263485191061 -0.07551035330884315 -0.20870927763831545 -0.06000810655521775 -0.027641386867057124 0.06428105840150727 -0.06669389501912285 -0.06009595705986416 -0.07387835933504644 0.01152704570177731 0.03470765493609433 0.02820426924147222 0.045178669456650514 -0.016221656470927694 -0.028430850974728094 -0.04068959243716796 0.07442869475417306"
			//" -0.010382140333031115 -0.15670575015267763 -0.1098571506702331 -0.21062721776974125 0.16822070969736175 0.07608899042457809 0.13916146651501327 0.11944353526631986 -0.06020572366319076 0.07726643520471346 0.04663552602638167 0.06208355194760576 0.04025228958350632 0.1292614533212816 0.11899739071033966 0.14659294834864445 0.0950375848521422 0.0858991847826395 -0.0640115205130384 -0.13813539185546025 -0.029665938804507005 0.0017319115501293753 -0.06401238844452484 -0.06688329822971543 0.02404399600332753 -0.1312031289710351 -0.09152229740900189 -0.1039871281070748 0.00943218283865564 -0.06520560787111727 -0.013540270541010677 -0.12820189043627253 0.0034516269908319457 0.07364574500145278 0.11731634244814126 -0.009778195375099443 -0.0436200841741862 -0.10106799261430416 -0.12853347929102374 0.11036623952010549 -0.13059127661678352 -0.19054817156093903 -0.050775157262437316 0.09551878200566494 0.021268010773919006 -0.12588867376347423 -0.053370897439128345 -0.016784827820702397 -0.033435609904536194 -0.014666076330628795 -0.03524382973733494 0.058410993112324505 0.1913584837803169 -0.03258636647573687 -0.04068959243716796 -0.06417193798102269"
			//"-0.03366431802540053 0.003295853140156138 0.004725050663037904 -0.292268044313892 0.1290434862224247 0.08416500799517891 0.173580702868717 0.14058711481926056 -0.0032594841116194914 0.10628019637545204 0.09286891332567528 0.11819699998655678 0.04810382532087385 0.14846486152243737 0.13276756103901954 0.14241234752264711 0.08863401866276538 0.023340224847634972 -0.09948933188296252 -0.2696048920534417 -0.11487262254429381 -0.08642879500081786 -0.13394638269101775 -0.07628251648458644 0.03470029415957785 -0.16483949247543747 -0.11924261143097989 -0.15151762701771948 -0.013824686334969007 -0.10591937377878437 -0.017726802069249835 -0.06742971633597357 0.015965270297332263 0.013850451204427315 0.05452296006643513 -0.02729480500854886 0.19545051008465242 -0.22718416609483302 -0.1700880358759072 0.01972356797181866 0.02031739774760203 -0.06001459083057009 -0.3085895310446979 -0.025256288450434206 0.08962422987123653 -0.141953119568918 -0.03930802545980881 0.032857202203322194 -0.03180549169431792 -0.003253124911787265 -0.14062630572354404 0.06849678332965142 0.21388064090715256 0.042940303099796885 -0.055566491260892394 -0.11028577773106557"
			//"0.03621484053245079 0.05439794773735354 -0.06155217365148467 -0.19042768295329837 0.08776574541926005 0.13701096725211717 0.14181712592970197 0.18888655464587079 0.1135752664485227 0.06646877656625029 0.2045492617203269 0.04519402169389687 0.05569172902649819 0.24031131739971237 0.14990101208855666 0.22747810871921872 0.20851510570575765 -0.04202187835093177 -0.052400657332503736 -0.3605049809356117 0.10816800377179245 -0.032554791438536484 -0.21067365705616722 0.05708950000272882 0.04470120637013005 -0.12401646121381879 -0.05391308822329888 -0.18884695105494184 0.005752909211200554 -0.030150211093461655 -0.07541840741853297 -0.020469899098454362 -0.07766363091797102 0.0709943282289025 -0.05014743935390918 0.025504282733057992 0.16881998460637065 -0.25068839835433543 -0.1933128176336605 0.018865786394676395 -0.01627323403320676 -0.1824239535792207 -0.3280087267735971 0.11181189843212462 0.20094895448937333 -0.1276873638576562 -0.1378069016649628 -0.028492634654510438 -0.07571492084404982 0.03524462551314227 -0.02289122278135109 -0.0596662479213895 0.26470369666736 0.14476653957988428 -0.01310284742551196 0.0011549761999079611"
			//"-0.050260886377798616 0.12418107802479661 -0.10667654883196186 -0.22132064233208226 0.07457061640989007 0.10694890172945175 0.16602686237012051 0.11878983435955057 0.08365754123163402 0.05971315685834686 0.14224476513343898 0.09956854193984922 0.1387844752428914 0.17080118332421432 0.209066678880447 0.37827136267669526 0.2097400343072761 -0.07670597680424518 -0.24324250754658205 -0.42672275945949967 0.003444764802663064 -0.18702294402902214 -0.173487852822484 0.20690955008153367 0.03855326944110274 -0.2266997958864774 -0.06616100688391365 -0.19551956638712195 -0.030494095970864284 -0.06752892961411368 -0.051632236325293804 -0.01727079062820394 -0.020551587326680183 0.12054668554577687 -0.022883081867769557 -0.08896087150517092 0.139120311492229 -0.293575926158499 -0.19338567311324095 -0.023003131865427507 -0.11052182433548415 0.030639963068818454 -0.2761758752265273 0.11560616604994749 0.19120447696548865 0.012190113816424958 -0.07922188779107864 0.03276647838734298 -0.033164278676428946 -0.0410558551009649 0.009825599580779526 -0.024760145639993625 0.24819991595290314 0.1581860950773223 -0.09203642158423783 0.03629201878045263"
			//"0.12161860848405076 -0.13335099035936915 -0.21703260988380305 -0.2669414826185285 0.15622618756537346 0.14908731852514293 0.12136054947843893 0.11867643268152248 0.09433565693384903 0.10739061013684675 0.1679867614096211 0.44756253562271875 0.060273496579928795 0.47848225039229486 0.23374004482522026 0.6061136275173085 0.473552669628121 -0.035228542284098274 -0.2951749974589545 -1.0548438131119324 0.4129031799039742 -0.35095572443071654 0.0684834742171196 0.06574470841533467 0.02871347426386036 -0.14486929931958314 -0.1047507096913037 -0.1830327018132982 -0.03082943686053357 -0.04896463586266251 0.004954245764770222 -0.0259755777698008 -0.10825792900548568 -0.12933452540293228 0.01567409125379697 -0.3431938161035363 -0.24853062351142355 -0.43632882082317787 -0.24020473968104622 0.05937524553993525 -0.010991900891094065 -0.4495436104913538 -0.14859858270301285 -0.022959477552148777 -0.04505716842230584 -0.1969936057183196 -0.16612510614011292 0.029697997858408366 -0.06831119527084654 -0.137182529388489 -0.3522874725283996 -0.029075337477978226 -0.09317209340341127 0.0523763405489601 -0.05844017366954635 -0.2711419162115093"
			//"0.167385335211019 -0.06307542687184411 -0.30514304060794967 -0.3001361840080372 0.26362116557014265 0.09379054902923695 0.11453564153609747 0.1908385143850979 0.037953088997653865 0.14331844799781512 0.06445810103379561 0.4233871871410364 -0.22273493995924115 0.5361864797387499 0.21419224574697907 0.5853186313093987 0.41673835438415713 0.06560339983594522 -0.35963552418409633 -1.05457809656495 0.3430807783887946 -0.17187768916442148 -0.03186543528053024 -0.01650271788804865 0.06644956230102922 -0.09724969501910918 -0.0562502504468619 -0.19992808443272686 0.017361221291145836 -0.04896463586266251 -0.04632807178571668 -0.06672082229847877 -0.08477876299883955 -0.1256588099337081 0.01567409125379697 -0.23310259958359636 -0.26077340219668615 -0.4097860796495255 -0.2535989471192427 0.05854485413201695 0.0695446211898932 -0.3642632349479147 -0.24008724109599827 -0.015950647344797772 -0.11957622995783326 -0.08061340382429162 -0.24416538988838943 -0.059510582477907914 -0.06677048495825981 -0.16210551695548836 -0.3522874725283996 -0.016797452085721143 -0.0050106624646234915 0.04320241093039266 -0.08117435857515265 -0.20355816678442953"
			"0.2006971408335354 -0.13026744574220608 -0.3205262274909911 -0.3001361840080372 0.1954878410521335 0.14401175010970335 0.1822731141156575 0.2101057366540612 -0.04247326391985723 0.148733511022795 0.06445810103379561 0.35831380197193713 0.011184947154578255 0.5283919149675446 0.3312311766081359 0.6968242263743153 0.3889573809198819 -0.015551427470404448 -0.3619181413055389 -0.9773396660947903 0.28089628696555424 -0.12780081505595942 -0.0722575275014957 -0.006700404432690265 0.0028344360651988074 -0.08375581425872755 -0.07272794223613122 -0.27700381709426597 -0.06729291363335439 0.001163567023074361 -0.04632807178571668 -0.06672082229847877 -0.09893828632751857 -0.0814473426846852 0.017908413339957043 -0.23310259958359636 -0.12249580505971708 -0.43750473100167814 -0.3087575906340444 0.09572218224162143 -0.04152310077623027 -0.3642632349479147 -0.19858628254368976 -0.1066760853287865 0.06887526356957187 -0.12938682121145825 -0.24416538988838943 -0.051212597856382616 0.042116388811914665 -0.17441644008535184 -0.3314519763919989 9.039590091999943E-4 -0.15102742957091922 0.0034849796128321123 -0.016324953763798646 -0.3946679168967311"

			;
			break;
		default:
			break;
		
		}
	setWeights(weights);
	}
	// simple evaluation based on piece mobility and importance
	double beetle_fear_weight = -2.0;
	double queen_afinity_weight = 5.0;
	double queen_pinned_weight = -10.0;
	double QueenCrowdingWeight = -2.0;
	double beetleOnTopWeight = 2.0;
	double pillbugEmptyWeight = 0.2;
	double piece_mobility_weight[] = 
		{ 5.0,			// queen
		0.19,			// ant	
		0.15,			// grasshopper
		0.3,			// beetle
		0.1,			// spider
		0.18,			// mosquito
		0.3,			// ladybug
		0.1,			// original pillbug
		0.1,			// pillbug
		0.2};			// blank
	double piece_immobility_weight[] = 
		{ 0,			// queen
		0,			// ant	
		0,			// grasshopper
		0,			// beetle
		0,			// spider
		0,			// mosquito
		0,			// ladybug
		0,			// original pillbug
		0,			// pillbug
		0};			// blank

	double queen_safety[] = { 0.0, 0.0, -1.0, -15.0, -40.0, -65.0, -120,-120,-120,-120};
	double queen_distance_multiplier[] =
			{ 0.1,		// queen
			0.03,		// ant
			0.4,		// grasshopper
			0.9,		// beetle
			1.0,		// spider
			0.2,		// mosquito
			0.5,		// ladybug
			0.5,		// original pillbug
			0.5,		// pillbug
			0.2 };		// blank

	double reserve_value[] = {
			1,		// queen
			1,		// ant
			1,		// grasshopper
			1,		// beetle
			1,		// spider
			1,		// mosquito
			1,		// ladybug
			1,		// original pillbug
			1,		// pillbug
			1		// blank
	};
	public double[] getWeights()
	{	DStack v = new DStack();
		v.push(beetle_fear_weight);
		v.push(queen_afinity_weight);
		v.push(queen_pinned_weight);
		v.push(QueenCrowdingWeight);
		for(double d : piece_mobility_weight) { v.push(d); }
		for(double d : queen_safety) { v.push(d); }
		for(double d : queen_distance_multiplier)  { v.push(d); }
		v.push(beetleOnTopWeight);
		v.push(pillbugEmptyWeight);
		for(double d : reserve_value)  { v.push(d); }
		for(double d : piece_immobility_weight)  { v.push(d); }
		return(v.toArray());
	}
	public void setWeights(double v[])
	{	int idx = 0;
		beetle_fear_weight = v[idx++];
		queen_afinity_weight = v[idx++];
		queen_pinned_weight = v[idx++];
		QueenCrowdingWeight = v[idx++];
		for(int i=0;i<piece_mobility_weight.length;i++) {  piece_mobility_weight[i] = v[idx++]; }
		for(int i=0;i<queen_safety.length;i++) { queen_safety[i] = v[idx++]; }
		for(int i=0;i<queen_distance_multiplier.length;i++)  { queen_distance_multiplier[i]=v[idx++]; }
		beetleOnTopWeight = v[idx++];
		pillbugEmptyWeight =  v[idx++]; 
		for(int i=0;i<reserve_value.length;i++) 
			{ if(idx<v.length) { reserve_value[i]=v[idx++]; }}
		for(int i=0;i<piece_immobility_weight.length;i++) 
		{ if(idx<v.length) { piece_immobility_weight[i]=v[idx++]; }}
		
		// check
		//double rv[] = getWeights();
		//G.Assert(G.sameArrayContents(v, rv),"check setWeights failed");
	}
	
	public double evaluate(BoardProtocol boardp,int pl,boolean print)
	{ 	HiveGameBoard board = (HiveGameBoard)boardp;
		HiveCell oql = board.pieceLocation.get(board.playerQueen(pl^1));
		HiveCell myQueenLoc = board.pieceLocation.get(board.playerQueen(pl));
		double val = 0.0;
		String msg = "";
		boolean distance = false;
		int overland_base_gradient = 0;
		int slither_base_gradient =0;
		int myQueenAdjacent = 0;
		HiveCell rack[] = board.rackForPlayer(pl);
		for(int lim=rack.length-1; lim>=0; lim--)
			{ HiveCell rackCell = rack[lim];
			  int h = rackCell.height();
			  if(h>0)
				  { double lval = h*reserve_value[lim];
				    val += lval;
				  }
			}
		if(print && val>0) { msg+= "Reserve "+val; }
		// calculate queen distance overland_gradient
		if((oql!=null) && oql.onBoard)
		{ 	distance=true;
			overland_base_gradient = ++board.sweep_counter;
			board.sweepAndCountBoard(oql,0);
		  	slither_base_gradient = ++board.sweep_counter;
		  	board.slitherAndCountBoard(oql,oql,null,0,0);
		}

		// note, a subtle bug in this evaluator resulted because the order
		// of cells in occupiedcells is unstable.  Floating point values
		// are still slightly unstable!		
		HiveId targetColor = board.playerColor(pl);
		for(int i=0,lim=board.occupiedCells.size(); i<lim; i++)
			{	
				HiveCell loc = board.occupiedCells.elementAt(i);
				HivePiece bug = loc.topChip();
				if(bug.color==targetColor)
				{
				PieceType bugtype = bug.type;
				int pieceordinal = bugtype.ordinal();
				{	double weight = 0.6*piece_mobility_weight[pieceordinal];
					HiveCell tempDests[] = board.getTempDest();
					int ndests = board.legalDests(loc,false,bug,tempDests,null,pl,false);
					if(ndests>0 || distance)
					{
					int nd = Math.min(ndests, 5);
					if(print) 
						{ msg += " "+bug.exactBugName()+"[";
						  if(ndests>0) { msg+=""+ndests+"="+(nd*weight); }
						}
					if(nd>0)
					{
						val += nd*weight;
						if((loc.height()==1)&&loc.isAdjacentTo(myQueenLoc))
							{ myQueenAdjacent++; 	// count the number of our pieces adjacent to the our q which are mobile
							}
					}
					else {
						double w = piece_immobility_weight[pieceordinal];
						if(print) { msg+= " imm "+w; }
						val += w;
					}
					if(distance && nd>0)
					{	// score distance from queen, but only for mobile pieces
						PieceType ebugType = bugtype;
						int slither_distance = loc.slither_gradient-slither_base_gradient;
						
						if((bugtype==PieceType.MOSQUITO) && loc.isAdjacentToAnt())
						{
							ebugType = PieceType.ANT;
							}
						switch(ebugType)
							{
						case ANT:
							slither_distance = Math.min(1, slither_distance);	// ants are always adjacent
							//$FALL-THROUGH$
						default:
							if(slither_distance>=0)
							{
								double mul = slither_distance*queen_distance_multiplier[pieceordinal];
							val += mul;
								if(print) { msg += " sd="+slither_distance+"="+mul; }
								break;
							}
							//$FALL-THROUGH$
						case BEETLE:
						case GRASSHOPPER:
							{
								int queen_distance = (loc.overland_gradient-overland_base_gradient);
							double mul = queen_distance*queen_distance_multiplier[pieceordinal];
								val += mul;
								if(print) { msg += " od="+queen_distance+"="+mul; }
								}
							break;
						}
					}
					if(loc.height()>1) 
					{ // mobile and on top 
					  msg += " Top="+beetleOnTopWeight;
					  val += beetleOnTopWeight;
					}
					}
					
					if(bug.isPillbug())
						{	if(loc.isAdjacentToDanger(bug.color))
							{
							if(print) { msg += " Beetle fear="+beetle_fear_weight; }
							val += beetle_fear_weight;
							}
							if(board.isAdjacentToQueen(loc,oql,myQueenLoc))
							{
							if(print) { msg += " Qadj="+queen_afinity_weight; }
							val += queen_afinity_weight;
							}
							int nadj = loc.nOccupiedAdjacent();
							if(print) { msg += " adj="+nadj+"="+(nadj*pillbugEmptyWeight); }
							val += nadj*pillbugEmptyWeight;							
						}
					if(print) { msg +="]"; }

		        board.returnTempDest(tempDests);
				}
			}}
		if(myQueenLoc.onBoard)
		{	// evaluate queen safety, number adjacent-number mobile adjacent
			int na = myQueenLoc.nOccupiedAdjacent()-myQueenAdjacent;
			if(myQueenAdjacent>1)
			{	double qw = (myQueenAdjacent-1)*QueenCrowdingWeight;
				val += qw;
				if(print) { msg += "Qcrowd="+qw;}
			}
			if(na>0)
			{
			boolean isOnTop = (myQueenLoc.topChip().type==PieceType.QUEEN);
			double topval = isOnTop?0.0:queen_pinned_weight;
			if(print) { msg += " qsaf "+na+"="+(queen_safety[na]+topval); }
			val += queen_safety[na]+topval;
			}
		}

		if(print) { System.out.println(msg); }
		return(val);
	}
}